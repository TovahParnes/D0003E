
Lab-5-controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00002228  000022bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002228  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011e  0080011e  000022da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f1a  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c0  00000000  00000000  000054ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000162a  00000000  00000000  0000658e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ca8  00000000  00000000  00007bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000987  00000000  00000000  00008860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bb1  00000000  00000000  000091e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000bd98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__vector_1>
       8:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_2>
       c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_3>
      10:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_4>
      14:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__vector_9>
      28:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_10>
      2c:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__vector_11>
      30:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__vector_12>
      34:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__vector_13>
      38:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__vector_14>
      3c:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__vector_15>
      40:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_16>
      44:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__vector_17>
      48:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_18>
      4c:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__vector_19>
      50:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_20>
      54:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__vector_21>
      58:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e8 e2       	ldi	r30, 0x28	; 40
      70:	f2 e2       	ldi	r31, 0x22	; 34
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ae 31       	cpi	r26, 0x1E	; 30
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ae e1       	ldi	r26, 0x1E	; 30
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a1 37       	cpi	r26, 0x71	; 113
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 02 04 	call	0x804	; 0x804 <main>
      92:	0c 94 12 11 	jmp	0x2224	; 0x2224 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <decBridge>:
		self->queue[SOUTH]--;
		ASYNC(self->gui, displaySouthQueue, self->queue[SOUTH]);
	}
}

void decBridge (Controller *self){
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	fc 01       	movw	r30, r24
	// Decrease cars on bridge
	self->queue[BRIDGE]--;
      a8:	c4 80       	ldd	r12, Z+4	; 0x04
      aa:	d5 80       	ldd	r13, Z+5	; 0x05
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	c8 1a       	sub	r12, r24
      b0:	d1 08       	sbc	r13, r1
      b2:	d5 82       	std	Z+5, r13	; 0x05
      b4:	c4 82       	std	Z+4, r12	; 0x04
	ASYNC(self->gui, displayBridgeQueue, self->queue[BRIDGE]);
      b6:	02 89       	ldd	r16, Z+18	; 0x12
      b8:	13 89       	ldd	r17, Z+19	; 0x13
      ba:	0f 2e       	mov	r0, r31
      bc:	f7 e8       	ldi	r31, 0x87	; 135
      be:	ef 2e       	mov	r14, r31
      c0:	f3 e0       	ldi	r31, 0x03	; 3
      c2:	ff 2e       	mov	r15, r31
      c4:	f0 2d       	mov	r31, r0
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	a9 01       	movw	r20, r18
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	cb 01       	movw	r24, r22
      d2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
}
      d6:	1f 91       	pop	r17
      d8:	0f 91       	pop	r16
      da:	ff 90       	pop	r15
      dc:	ef 90       	pop	r14
      de:	df 90       	pop	r13
      e0:	cf 90       	pop	r12
      e2:	08 95       	ret

000000e4 <addQueue>:
 * Created: 2021-03-04 11:17:02
 *  Author: Adam Hedberg
 */ 
#include "Controller.h"

void addQueue (Controller *self, int dir){
      e4:	cf 92       	push	r12
      e6:	df 92       	push	r13
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
	if (dir == NORTH){ 
      f0:	61 30       	cpi	r22, 0x01	; 1
      f2:	71 05       	cpc	r23, r1
      f4:	d1 f4       	brne	.+52     	; 0x12a <addQueue+0x46>
		//Add car to north queue
		self->queue[NORTH]++;
      f6:	fc 01       	movw	r30, r24
      f8:	c6 80       	ldd	r12, Z+6	; 0x06
      fa:	d7 80       	ldd	r13, Z+7	; 0x07
      fc:	ff ef       	ldi	r31, 0xFF	; 255
      fe:	cf 1a       	sub	r12, r31
     100:	df 0a       	sbc	r13, r31
     102:	fc 01       	movw	r30, r24
     104:	d7 82       	std	Z+7, r13	; 0x07
     106:	c6 82       	std	Z+6, r12	; 0x06
		ASYNC(self->gui, displayNorthQueue, self->queue[NORTH]);
     108:	02 89       	ldd	r16, Z+18	; 0x12
     10a:	13 89       	ldd	r17, Z+19	; 0x13
     10c:	0f 2e       	mov	r0, r31
     10e:	fd e7       	ldi	r31, 0x7D	; 125
     110:	ef 2e       	mov	r14, r31
     112:	f3 e0       	ldi	r31, 0x03	; 3
     114:	ff 2e       	mov	r15, r31
     116:	f0 2d       	mov	r31, r0
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	a9 01       	movw	r20, r18
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	cb 01       	movw	r24, r22
     124:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
     128:	1c c0       	rjmp	.+56     	; 0x162 <addQueue+0x7e>
	}
	else if(dir == SOUTH){
     12a:	62 30       	cpi	r22, 0x02	; 2
     12c:	71 05       	cpc	r23, r1
     12e:	c9 f4       	brne	.+50     	; 0x162 <addQueue+0x7e>
		//Add car to south queue
		self->queue[SOUTH]++;
     130:	fc 01       	movw	r30, r24
     132:	c0 84       	ldd	r12, Z+8	; 0x08
     134:	d1 84       	ldd	r13, Z+9	; 0x09
     136:	ff ef       	ldi	r31, 0xFF	; 255
     138:	cf 1a       	sub	r12, r31
     13a:	df 0a       	sbc	r13, r31
     13c:	fc 01       	movw	r30, r24
     13e:	d1 86       	std	Z+9, r13	; 0x09
     140:	c0 86       	std	Z+8, r12	; 0x08
		ASYNC(self->gui, displaySouthQueue, self->queue[SOUTH]);
     142:	02 89       	ldd	r16, Z+18	; 0x12
     144:	13 89       	ldd	r17, Z+19	; 0x13
     146:	0f 2e       	mov	r0, r31
     148:	f2 e8       	ldi	r31, 0x82	; 130
     14a:	ef 2e       	mov	r14, r31
     14c:	f3 e0       	ldi	r31, 0x03	; 3
     14e:	ff 2e       	mov	r15, r31
     150:	f0 2d       	mov	r31, r0
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	a9 01       	movw	r20, r18
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	cb 01       	movw	r24, r22
     15e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
	}
}
     162:	1f 91       	pop	r17
     164:	0f 91       	pop	r16
     166:	ff 90       	pop	r15
     168:	ef 90       	pop	r14
     16a:	df 90       	pop	r13
     16c:	cf 90       	pop	r12
     16e:	08 95       	ret

00000170 <decQueue>:
	ASYNC(self->gui, displayBridgeQueue, self->queue[BRIDGE]);
	AFTER(SEC(5),self, decBridge, NULL);		//Decrease cars on bridge after 5 sec

}

void decQueue (Controller *self, int dir){
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
	if (dir == NORTH){
     17c:	61 30       	cpi	r22, 0x01	; 1
     17e:	71 05       	cpc	r23, r1
     180:	d1 f4       	brne	.+52     	; 0x1b6 <decQueue+0x46>
		//Decrease cars on north queue
		self->queue[NORTH]--;
     182:	fc 01       	movw	r30, r24
     184:	c6 80       	ldd	r12, Z+6	; 0x06
     186:	d7 80       	ldd	r13, Z+7	; 0x07
     188:	f1 e0       	ldi	r31, 0x01	; 1
     18a:	cf 1a       	sub	r12, r31
     18c:	d1 08       	sbc	r13, r1
     18e:	fc 01       	movw	r30, r24
     190:	d7 82       	std	Z+7, r13	; 0x07
     192:	c6 82       	std	Z+6, r12	; 0x06
		ASYNC(self->gui, displayNorthQueue, self->queue[NORTH]);
     194:	02 89       	ldd	r16, Z+18	; 0x12
     196:	13 89       	ldd	r17, Z+19	; 0x13
     198:	0f 2e       	mov	r0, r31
     19a:	fd e7       	ldi	r31, 0x7D	; 125
     19c:	ef 2e       	mov	r14, r31
     19e:	f3 e0       	ldi	r31, 0x03	; 3
     1a0:	ff 2e       	mov	r15, r31
     1a2:	f0 2d       	mov	r31, r0
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	a9 01       	movw	r20, r18
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	cb 01       	movw	r24, r22
     1b0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
     1b4:	1c c0       	rjmp	.+56     	; 0x1ee <decQueue+0x7e>
	}
	else if(dir == SOUTH){
     1b6:	62 30       	cpi	r22, 0x02	; 2
     1b8:	71 05       	cpc	r23, r1
     1ba:	c9 f4       	brne	.+50     	; 0x1ee <decQueue+0x7e>
		//Decrease cars on south queue
		self->queue[SOUTH]--;
     1bc:	fc 01       	movw	r30, r24
     1be:	c0 84       	ldd	r12, Z+8	; 0x08
     1c0:	d1 84       	ldd	r13, Z+9	; 0x09
     1c2:	f1 e0       	ldi	r31, 0x01	; 1
     1c4:	cf 1a       	sub	r12, r31
     1c6:	d1 08       	sbc	r13, r1
     1c8:	fc 01       	movw	r30, r24
     1ca:	d1 86       	std	Z+9, r13	; 0x09
     1cc:	c0 86       	std	Z+8, r12	; 0x08
		ASYNC(self->gui, displaySouthQueue, self->queue[SOUTH]);
     1ce:	02 89       	ldd	r16, Z+18	; 0x12
     1d0:	13 89       	ldd	r17, Z+19	; 0x13
     1d2:	0f 2e       	mov	r0, r31
     1d4:	f2 e8       	ldi	r31, 0x82	; 130
     1d6:	ef 2e       	mov	r14, r31
     1d8:	f3 e0       	ldi	r31, 0x03	; 3
     1da:	ff 2e       	mov	r15, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	a9 01       	movw	r20, r18
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	cb 01       	movw	r24, r22
     1ea:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
	}
}
     1ee:	1f 91       	pop	r17
     1f0:	0f 91       	pop	r16
     1f2:	ff 90       	pop	r15
     1f4:	ef 90       	pop	r14
     1f6:	df 90       	pop	r13
     1f8:	cf 90       	pop	r12
     1fa:	08 95       	ret

000001fc <addBridge>:
		self->queue[SOUTH]++;
		ASYNC(self->gui, displaySouthQueue, self->queue[SOUTH]);
	}
}

void addBridge (Controller *self, int dir){
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	ec 01       	movw	r28, r24
     20e:	6b 01       	movw	r12, r22
	decQueue(self, dir);		//Decrease car from current queue
     210:	0e 94 b8 00 	call	0x170	; 0x170 <decQueue>
	self->bridgeDirection = dir; 
     214:	db 86       	std	Y+11, r13	; 0x0b
     216:	ca 86       	std	Y+10, r12	; 0x0a
	self->carsPassed++;
     218:	8e 85       	ldd	r24, Y+14	; 0x0e
     21a:	9f 85       	ldd	r25, Y+15	; 0x0f
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9f 87       	std	Y+15, r25	; 0x0f
     220:	8e 87       	std	Y+14, r24	; 0x0e
	self->queue[BRIDGE]++;
     222:	cc 80       	ldd	r12, Y+4	; 0x04
     224:	dd 80       	ldd	r13, Y+5	; 0x05
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	c8 1a       	sub	r12, r24
     22a:	d8 0a       	sbc	r13, r24
     22c:	dd 82       	std	Y+5, r13	; 0x05
     22e:	cc 82       	std	Y+4, r12	; 0x04
	ASYNC(self->gui, displayBridgeQueue, self->queue[BRIDGE]);
     230:	0a 89       	ldd	r16, Y+18	; 0x12
     232:	1b 89       	ldd	r17, Y+19	; 0x13
     234:	0f 2e       	mov	r0, r31
     236:	f7 e8       	ldi	r31, 0x87	; 135
     238:	ef 2e       	mov	r14, r31
     23a:	f3 e0       	ldi	r31, 0x03	; 3
     23c:	ff 2e       	mov	r15, r31
     23e:	f0 2d       	mov	r31, r0
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	a9 01       	movw	r20, r18
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	cb 01       	movw	r24, r22
     24c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
	AFTER(SEC(5),self, decBridge, NULL);		//Decrease cars on bridge after 5 sec
     250:	c1 2c       	mov	r12, r1
     252:	d1 2c       	mov	r13, r1
     254:	0f 2e       	mov	r0, r31
     256:	fd e4       	ldi	r31, 0x4D	; 77
     258:	ef 2e       	mov	r14, r31
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	ff 2e       	mov	r15, r31
     25e:	f0 2d       	mov	r31, r0
     260:	8e 01       	movw	r16, r28
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	a9 01       	movw	r20, r18
     268:	6a e5       	ldi	r22, 0x5A	; 90
     26a:	72 e6       	ldi	r23, 0x62	; 98
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>

}
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	df 90       	pop	r13
     282:	cf 90       	pop	r12
     284:	08 95       	ret

00000286 <lightsRed>:
	// Decrease cars on bridge
	self->queue[BRIDGE]--;
	ASYNC(self->gui, displayBridgeQueue, self->queue[BRIDGE]);
}

void lightsRed(Controller *self){
     286:	cf 92       	push	r12
     288:	df 92       	push	r13
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
     292:	fc 01       	movw	r30, r24
	//Set both lights to red
	self->carsPassed = 0;		//Reset the amount of cars that has passed the bridge
     294:	17 86       	std	Z+15, r1	; 0x0f
     296:	16 86       	std	Z+14, r1	; 0x0e
	self->lights = RED;
     298:	15 86       	std	Z+13, r1	; 0x0d
     29a:	14 86       	std	Z+12, r1	; 0x0c
	ASYNC(self->OpH, outputLights, self->lights );
     29c:	00 89       	ldd	r16, Z+16	; 0x10
     29e:	11 89       	ldd	r17, Z+17	; 0x11
     2a0:	c1 2c       	mov	r12, r1
     2a2:	d1 2c       	mov	r13, r1
     2a4:	0f 2e       	mov	r0, r31
     2a6:	f0 e5       	ldi	r31, 0x50	; 80
     2a8:	ef 2e       	mov	r14, r31
     2aa:	f4 e0       	ldi	r31, 0x04	; 4
     2ac:	ff 2e       	mov	r15, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	a9 01       	movw	r20, r18
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	cb 01       	movw	r24, r22
     2bc:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
}
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	df 90       	pop	r13
     2ca:	cf 90       	pop	r12
     2cc:	08 95       	ret

000002ce <lightGreen>:

void lightGreen(Controller *self, int dir){
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
	//Set light in direction dir to green, the other to red
	self->lights = dir;
     2da:	fc 01       	movw	r30, r24
     2dc:	75 87       	std	Z+13, r23	; 0x0d
     2de:	64 87       	std	Z+12, r22	; 0x0c
	ASYNC(self->OpH, outputLights, self->lights );
     2e0:	00 89       	ldd	r16, Z+16	; 0x10
     2e2:	11 89       	ldd	r17, Z+17	; 0x11
     2e4:	6b 01       	movw	r12, r22
     2e6:	0f 2e       	mov	r0, r31
     2e8:	f0 e5       	ldi	r31, 0x50	; 80
     2ea:	ef 2e       	mov	r14, r31
     2ec:	f4 e0       	ldi	r31, 0x04	; 4
     2ee:	ff 2e       	mov	r15, r31
     2f0:	f0 2d       	mov	r31, r0
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	a9 01       	movw	r20, r18
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	cb 01       	movw	r24, r22
     2fe:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
}
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	df 90       	pop	r13
     30c:	cf 90       	pop	r12
     30e:	08 95       	ret

00000310 <lightsNorth>:

void lightsNorth(Controller *self){
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	ec 01       	movw	r28, r24
	// North cars can pass if:
	// There are cars in the north queue AND
	// The set amount of cars has not passed OR there are no cars in the south queue
	if (self->queue[NORTH] > 0 && (self->carsPassed <= maxCarsBeforeSwap || self->queue[SOUTH] == 0)){
     322:	8e 81       	ldd	r24, Y+6	; 0x06
     324:	9f 81       	ldd	r25, Y+7	; 0x07
     326:	18 16       	cp	r1, r24
     328:	19 06       	cpc	r1, r25
     32a:	0c f5       	brge	.+66     	; 0x36e <lightsNorth+0x5e>
     32c:	8e 85       	ldd	r24, Y+14	; 0x0e
     32e:	9f 85       	ldd	r25, Y+15	; 0x0f
     330:	06 97       	sbiw	r24, 0x06	; 6
     332:	2c f0       	brlt	.+10     	; 0x33e <lightsNorth+0x2e>
     334:	88 85       	ldd	r24, Y+8	; 0x08
     336:	99 85       	ldd	r25, Y+9	; 0x09
     338:	89 2b       	or	r24, r25
     33a:	09 f0       	breq	.+2      	; 0x33e <lightsNorth+0x2e>
     33c:	50 c0       	rjmp	.+160    	; 0x3de <lightsNorth+0xce>
		lightGreen(self, NORTH);
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	ce 01       	movw	r24, r28
     344:	0e 94 67 01 	call	0x2ce	; 0x2ce <lightGreen>
		AFTER(SEC(1), self, lightsNorth, NULL);
     348:	c1 2c       	mov	r12, r1
     34a:	d1 2c       	mov	r13, r1
     34c:	0f 2e       	mov	r0, r31
     34e:	f8 e8       	ldi	r31, 0x88	; 136
     350:	ef 2e       	mov	r14, r31
     352:	f1 e0       	ldi	r31, 0x01	; 1
     354:	ff 2e       	mov	r15, r31
     356:	f0 2d       	mov	r31, r0
     358:	8e 01       	movw	r16, r28
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	a9 01       	movw	r20, r18
     360:	62 e1       	ldi	r22, 0x12	; 18
     362:	7a e7       	ldi	r23, 0x7A	; 122
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
     36c:	3d c0       	rjmp	.+122    	; 0x3e8 <lightsNorth+0xd8>
		
	// Change to the south queue after 5 sec if:
	// There are cars on the bridge AND
	// There are cars in the south queue AND
	// The bridge direction is north
	} else if (self->queue[BRIDGE] != 0 && self->queue[SOUTH] != 0 && self->bridgeDirection == NORTH){
     36e:	8c 81       	ldd	r24, Y+4	; 0x04
     370:	9d 81       	ldd	r25, Y+5	; 0x05
     372:	89 2b       	or	r24, r25
     374:	f1 f0       	breq	.+60     	; 0x3b2 <lightsNorth+0xa2>
     376:	88 85       	ldd	r24, Y+8	; 0x08
     378:	99 85       	ldd	r25, Y+9	; 0x09
     37a:	89 2b       	or	r24, r25
     37c:	d1 f0       	breq	.+52     	; 0x3b2 <lightsNorth+0xa2>
     37e:	8a 85       	ldd	r24, Y+10	; 0x0a
     380:	9b 85       	ldd	r25, Y+11	; 0x0b
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	b1 f4       	brne	.+44     	; 0x3b2 <lightsNorth+0xa2>
		lightsRed(self);
     386:	ce 01       	movw	r24, r28
     388:	0e 94 43 01 	call	0x286	; 0x286 <lightsRed>
		AFTER(SEC(5), self, lightsSouth, NULL);
     38c:	c1 2c       	mov	r12, r1
     38e:	d1 2c       	mov	r13, r1
     390:	0f 2e       	mov	r0, r31
     392:	fd ef       	ldi	r31, 0xFD	; 253
     394:	ef 2e       	mov	r14, r31
     396:	f1 e0       	ldi	r31, 0x01	; 1
     398:	ff 2e       	mov	r15, r31
     39a:	f0 2d       	mov	r31, r0
     39c:	8e 01       	movw	r16, r28
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	a9 01       	movw	r20, r18
     3a4:	6a e5       	ldi	r22, 0x5A	; 90
     3a6:	72 e6       	ldi	r23, 0x62	; 98
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
     3b0:	1b c0       	rjmp	.+54     	; 0x3e8 <lightsNorth+0xd8>
	
	// If both queues are empty, set lights red
	// Will become a loop between lightsSouth and lightsNorth
	} else {
		lightsRed(self);
     3b2:	ce 01       	movw	r24, r28
     3b4:	0e 94 43 01 	call	0x286	; 0x286 <lightsRed>
		AFTER(SEC(1), self, lightsSouth, NULL);
     3b8:	c1 2c       	mov	r12, r1
     3ba:	d1 2c       	mov	r13, r1
     3bc:	0f 2e       	mov	r0, r31
     3be:	fd ef       	ldi	r31, 0xFD	; 253
     3c0:	ef 2e       	mov	r14, r31
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	ff 2e       	mov	r15, r31
     3c6:	f0 2d       	mov	r31, r0
     3c8:	8e 01       	movw	r16, r28
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	a9 01       	movw	r20, r18
     3d0:	62 e1       	ldi	r22, 0x12	; 18
     3d2:	7a e7       	ldi	r23, 0x7A	; 122
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
	}
}
     3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <lightsNorth+0xd8>
		
	// Change to the south queue after 5 sec if:
	// There are cars on the bridge AND
	// There are cars in the south queue AND
	// The bridge direction is north
	} else if (self->queue[BRIDGE] != 0 && self->queue[SOUTH] != 0 && self->bridgeDirection == NORTH){
     3de:	8c 81       	ldd	r24, Y+4	; 0x04
     3e0:	9d 81       	ldd	r25, Y+5	; 0x05
     3e2:	89 2b       	or	r24, r25
     3e4:	61 f6       	brne	.-104    	; 0x37e <lightsNorth+0x6e>
     3e6:	e5 cf       	rjmp	.-54     	; 0x3b2 <lightsNorth+0xa2>
	// Will become a loop between lightsSouth and lightsNorth
	} else {
		lightsRed(self);
		AFTER(SEC(1), self, lightsSouth, NULL);
	}
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	df 90       	pop	r13
     3f6:	cf 90       	pop	r12
     3f8:	08 95       	ret

000003fa <lightsSouth>:

void lightsSouth(Controller *self){
     3fa:	cf 92       	push	r12
     3fc:	df 92       	push	r13
     3fe:	ef 92       	push	r14
     400:	ff 92       	push	r15
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	ec 01       	movw	r28, r24
	// South cars can pass if:
	// There are cars in the south queue AND
	// The set amount of cars has not passed OR there are no cars in the north queue
	if (self->queue[SOUTH] > 0 && (self->carsPassed <= maxCarsBeforeSwap || self->queue[NORTH] == 0)){
     40c:	88 85       	ldd	r24, Y+8	; 0x08
     40e:	99 85       	ldd	r25, Y+9	; 0x09
     410:	18 16       	cp	r1, r24
     412:	19 06       	cpc	r1, r25
     414:	0c f5       	brge	.+66     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     416:	8e 85       	ldd	r24, Y+14	; 0x0e
     418:	9f 85       	ldd	r25, Y+15	; 0x0f
     41a:	06 97       	sbiw	r24, 0x06	; 6
     41c:	2c f0       	brlt	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     41e:	8e 81       	ldd	r24, Y+6	; 0x06
     420:	9f 81       	ldd	r25, Y+7	; 0x07
     422:	89 2b       	or	r24, r25
     424:	09 f0       	breq	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	50 c0       	rjmp	.+160    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
		lightGreen(self, SOUTH);
     428:	62 e0       	ldi	r22, 0x02	; 2
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	ce 01       	movw	r24, r28
     42e:	0e 94 67 01 	call	0x2ce	; 0x2ce <lightGreen>
		AFTER(SEC(1), self, lightsSouth, NULL);
     432:	c1 2c       	mov	r12, r1
     434:	d1 2c       	mov	r13, r1
     436:	0f 2e       	mov	r0, r31
     438:	fd ef       	ldi	r31, 0xFD	; 253
     43a:	ef 2e       	mov	r14, r31
     43c:	f1 e0       	ldi	r31, 0x01	; 1
     43e:	ff 2e       	mov	r15, r31
     440:	f0 2d       	mov	r31, r0
     442:	8e 01       	movw	r16, r28
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	a9 01       	movw	r20, r18
     44a:	62 e1       	ldi	r22, 0x12	; 18
     44c:	7a e7       	ldi	r23, 0x7A	; 122
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
     456:	3d c0       	rjmp	.+122    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
	
	// Change to the north queue after 5 sec if:
	// There are cars on the bridge AND
	// There are cars in the north queue AND
	// The bridge direction is south
	} else if (self->queue[BRIDGE] != 0 && self->queue[NORTH] != 0 && self->bridgeDirection == SOUTH){
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	9d 81       	ldd	r25, Y+5	; 0x05
     45c:	89 2b       	or	r24, r25
     45e:	f1 f0       	breq	.+60     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     460:	8e 81       	ldd	r24, Y+6	; 0x06
     462:	9f 81       	ldd	r25, Y+7	; 0x07
     464:	89 2b       	or	r24, r25
     466:	d1 f0       	breq	.+52     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     468:	8a 85       	ldd	r24, Y+10	; 0x0a
     46a:	9b 85       	ldd	r25, Y+11	; 0x0b
     46c:	02 97       	sbiw	r24, 0x02	; 2
     46e:	b1 f4       	brne	.+44     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		lightsRed(self);
     470:	ce 01       	movw	r24, r28
     472:	0e 94 43 01 	call	0x286	; 0x286 <lightsRed>
		AFTER(SEC(5), self, lightsNorth, NULL);
     476:	c1 2c       	mov	r12, r1
     478:	d1 2c       	mov	r13, r1
     47a:	0f 2e       	mov	r0, r31
     47c:	f8 e8       	ldi	r31, 0x88	; 136
     47e:	ef 2e       	mov	r14, r31
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	ff 2e       	mov	r15, r31
     484:	f0 2d       	mov	r31, r0
     486:	8e 01       	movw	r16, r28
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	a9 01       	movw	r20, r18
     48e:	6a e5       	ldi	r22, 0x5A	; 90
     490:	72 e6       	ldi	r23, 0x62	; 98
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
     49a:	1b c0       	rjmp	.+54     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
		
	// If both queues are empty, set lights red
	// Will become a loop between lightsSouth and lightsNorth
	} else {
		lightsRed(self);
     49c:	ce 01       	movw	r24, r28
     49e:	0e 94 43 01 	call	0x286	; 0x286 <lightsRed>
		AFTER(SEC(1), self, lightsNorth, NULL);
     4a2:	c1 2c       	mov	r12, r1
     4a4:	d1 2c       	mov	r13, r1
     4a6:	0f 2e       	mov	r0, r31
     4a8:	f8 e8       	ldi	r31, 0x88	; 136
     4aa:	ef 2e       	mov	r14, r31
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	ff 2e       	mov	r15, r31
     4b0:	f0 2d       	mov	r31, r0
     4b2:	8e 01       	movw	r16, r28
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	a9 01       	movw	r20, r18
     4ba:	62 e1       	ldi	r22, 0x12	; 18
     4bc:	7a e7       	ldi	r23, 0x7A	; 122
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
	}
}
     4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
	
	// Change to the north queue after 5 sec if:
	// There are cars on the bridge AND
	// There are cars in the north queue AND
	// The bridge direction is south
	} else if (self->queue[BRIDGE] != 0 && self->queue[NORTH] != 0 && self->bridgeDirection == SOUTH){
     4c8:	8c 81       	ldd	r24, Y+4	; 0x04
     4ca:	9d 81       	ldd	r25, Y+5	; 0x05
     4cc:	89 2b       	or	r24, r25
     4ce:	61 f6       	brne	.-104    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     4d0:	e5 cf       	rjmp	.-54     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	// Will become a loop between lightsSouth and lightsNorth
	} else {
		lightsRed(self);
		AFTER(SEC(1), self, lightsNorth, NULL);
	}
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	cf 90       	pop	r12
     4e2:	08 95       	ret

000004e4 <initialize>:

void initialize(Controller *self){
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	ec 01       	movw	r28, r24
	ASYNC(self->gui, init, NULL); 
     4f6:	0a 89       	ldd	r16, Y+18	; 0x12
     4f8:	1b 89       	ldd	r17, Y+19	; 0x13
     4fa:	c1 2c       	mov	r12, r1
     4fc:	d1 2c       	mov	r13, r1
     4fe:	0f 2e       	mov	r0, r31
     500:	f8 e7       	ldi	r31, 0x78	; 120
     502:	ef 2e       	mov	r14, r31
     504:	f3 e0       	ldi	r31, 0x03	; 3
     506:	ff 2e       	mov	r15, r31
     508:	f0 2d       	mov	r31, r0
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	a9 01       	movw	r20, r18
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	cb 01       	movw	r24, r22
     516:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
	
	//Display current queues
	ASYNC(self->gui, displayNorthQueue, self->queue[NORTH]); 
     51a:	ce 80       	ldd	r12, Y+6	; 0x06
     51c:	df 80       	ldd	r13, Y+7	; 0x07
     51e:	0a 89       	ldd	r16, Y+18	; 0x12
     520:	1b 89       	ldd	r17, Y+19	; 0x13
     522:	0f 2e       	mov	r0, r31
     524:	fd e7       	ldi	r31, 0x7D	; 125
     526:	ef 2e       	mov	r14, r31
     528:	f3 e0       	ldi	r31, 0x03	; 3
     52a:	ff 2e       	mov	r15, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	a9 01       	movw	r20, r18
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	cb 01       	movw	r24, r22
     53a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
	ASYNC(self->gui, displaySouthQueue, self->queue[SOUTH]);
     53e:	c8 84       	ldd	r12, Y+8	; 0x08
     540:	d9 84       	ldd	r13, Y+9	; 0x09
     542:	0a 89       	ldd	r16, Y+18	; 0x12
     544:	1b 89       	ldd	r17, Y+19	; 0x13
     546:	0f 2e       	mov	r0, r31
     548:	f2 e8       	ldi	r31, 0x82	; 130
     54a:	ef 2e       	mov	r14, r31
     54c:	f3 e0       	ldi	r31, 0x03	; 3
     54e:	ff 2e       	mov	r15, r31
     550:	f0 2d       	mov	r31, r0
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	a9 01       	movw	r20, r18
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	cb 01       	movw	r24, r22
     55e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
	ASYNC(self->gui, displayBridgeQueue, self->queue[BRIDGE]);
     562:	cc 80       	ldd	r12, Y+4	; 0x04
     564:	dd 80       	ldd	r13, Y+5	; 0x05
     566:	0a 89       	ldd	r16, Y+18	; 0x12
     568:	1b 89       	ldd	r17, Y+19	; 0x13
     56a:	0f 2e       	mov	r0, r31
     56c:	f7 e8       	ldi	r31, 0x87	; 135
     56e:	ef 2e       	mov	r14, r31
     570:	f3 e0       	ldi	r31, 0x03	; 3
     572:	ff 2e       	mov	r15, r31
     574:	f0 2d       	mov	r31, r0
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	a9 01       	movw	r20, r18
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	cb 01       	movw	r24, r22
     582:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
	
	//Initiate light
	ASYNC(self, lightsNorth, NULL);
     586:	c1 2c       	mov	r12, r1
     588:	d1 2c       	mov	r13, r1
     58a:	0f 2e       	mov	r0, r31
     58c:	f8 e8       	ldi	r31, 0x88	; 136
     58e:	ef 2e       	mov	r14, r31
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	ff 2e       	mov	r15, r31
     594:	f0 2d       	mov	r31, r0
     596:	8e 01       	movw	r16, r28
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	a9 01       	movw	r20, r18
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	cb 01       	movw	r24, r22
     5a4:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	cf 90       	pop	r12
     5b8:	08 95       	ret

000005ba <writeChar>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdbool.h>
#include "GUI.h"

void writeChar(char ch, int pos){
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	66 97       	sbiw	r28, 0x16	; 22
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
	if (pos < 0 || pos > 5){
     5ce:	66 30       	cpi	r22, 0x06	; 6
     5d0:	71 05       	cpc	r23, r1
     5d2:	e8 f5       	brcc	.+122    	; 0x64e <writeChar+0x94>

	//Initiate number to print;
	uint16_t num = 0x0;

	//Set SCC table to have the correct SCC values for the numbers 0-9 and a special character
	uint16_t tableSCC[11] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51, 0xC028};
     5d4:	96 e1       	ldi	r25, 0x16	; 22
     5d6:	e8 e0       	ldi	r30, 0x08	; 8
     5d8:	f1 e0       	ldi	r31, 0x01	; 1
     5da:	de 01       	movw	r26, r28
     5dc:	11 96       	adiw	r26, 0x01	; 1
     5de:	01 90       	ld	r0, Z+
     5e0:	0d 92       	st	X+, r0
     5e2:	9a 95       	dec	r25
     5e4:	e1 f7       	brne	.-8      	; 0x5de <writeChar+0x24>

	//Check if the given character is in the interval 0-9 and set the right number value
	if (ch >= '0' && ch <= '9'){
     5e6:	90 ed       	ldi	r25, 0xD0	; 208
     5e8:	98 0f       	add	r25, r24
     5ea:	9a 30       	cpi	r25, 0x0A	; 10
     5ec:	50 f4       	brcc	.+20     	; 0x602 <writeChar+0x48>
		//Set the corresponding value from the table to the number
		num = tableSCC[ch - '0'];
     5ee:	e8 2f       	mov	r30, r24
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	f0 97       	sbiw	r30, 0x30	; 48
     5f4:	ee 0f       	add	r30, r30
     5f6:	ff 1f       	adc	r31, r31
     5f8:	ec 0f       	add	r30, r28
     5fa:	fd 1f       	adc	r31, r29
     5fc:	21 81       	ldd	r18, Z+1	; 0x01
     5fe:	32 81       	ldd	r19, Z+2	; 0x02
     600:	02 c0       	rjmp	.+4      	; 0x606 <writeChar+0x4c>
		} else {
		//Set the special character from the table to the number
		num = tableSCC[10];
     602:	28 e2       	ldi	r18, 0x28	; 40
     604:	30 ec       	ldi	r19, 0xC0	; 192
	}

	//Update the LCD address to the given position
	addrLCD += pos >> 1;
     606:	fb 01       	movw	r30, r22
     608:	f5 95       	asr	r31
     60a:	e7 95       	ror	r30
     60c:	e4 51       	subi	r30, 0x14	; 20
     60e:	ff 4f       	sbci	r31, 0xFF	; 255

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
     610:	db 01       	movw	r26, r22
     612:	a1 70       	andi	r26, 0x01	; 1
     614:	bb 27       	eor	r27, r27
     616:	60 ff       	sbrs	r22, 0
     618:	02 c0       	rjmp	.+4      	; 0x61e <writeChar+0x64>
		mask = 0xF0;
		} else {
		mask = 0x0F;
     61a:	6f e0       	ldi	r22, 0x0F	; 15
     61c:	01 c0       	rjmp	.+2      	; 0x620 <writeChar+0x66>
	//Update the LCD address to the given position
	addrLCD += pos >> 1;

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
		mask = 0xF0;
     61e:	60 ef       	ldi	r22, 0xF0	; 240
     620:	af 01       	movw	r20, r30
     622:	4c 5e       	subi	r20, 0xEC	; 236
     624:	5f 4f       	sbci	r21, 0xFF	; 255

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
		//Masking the smallest number to the current nibble
		nibbleNum = num & 0xF;
     626:	82 2f       	mov	r24, r18
     628:	8f 70       	andi	r24, 0x0F	; 15
		//Remove the used nibble
		num = num >> 4;
     62a:	32 95       	swap	r19
     62c:	22 95       	swap	r18
     62e:	2f 70       	andi	r18, 0x0F	; 15
     630:	23 27       	eor	r18, r19
     632:	3f 70       	andi	r19, 0x0F	; 15
     634:	23 27       	eor	r18, r19

		//Shift the nibble to the right position if the pos is odd
		if (pos % 2 != 0){
     636:	10 97       	sbiw	r26, 0x00	; 0
     638:	11 f0       	breq	.+4      	; 0x63e <writeChar+0x84>
			nibbleNum = nibbleNum << 4;
     63a:	82 95       	swap	r24
     63c:	80 7f       	andi	r24, 0xF0	; 240
		}

		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
     63e:	90 81       	ld	r25, Z
     640:	96 23       	and	r25, r22
     642:	89 2b       	or	r24, r25
     644:	80 83       	st	Z, r24

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
     646:	35 96       	adiw	r30, 0x05	; 5
		mask = 0x0F;
	}

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
     648:	4e 17       	cp	r20, r30
     64a:	5f 07       	cpc	r21, r31
     64c:	61 f7       	brne	.-40     	; 0x626 <writeChar+0x6c>
		*addrLCD = (*addrLCD & mask) | nibbleNum;

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
	}
}
     64e:	66 96       	adiw	r28, 0x16	; 22
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <printAt>:

void printAt(int pos, int num) {
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
     66e:	7b 01       	movw	r14, r22
	writeChar( (num % 100) / 10 + '0', pos);
     670:	cb 01       	movw	r24, r22
     672:	64 e6       	ldi	r22, 0x64	; 100
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	0e 94 a9 10 	call	0x2152	; 0x2152 <__divmodhi4>
     67a:	0a e0       	ldi	r16, 0x0A	; 10
     67c:	10 e0       	ldi	r17, 0x00	; 0
     67e:	b8 01       	movw	r22, r16
     680:	0e 94 a9 10 	call	0x2152	; 0x2152 <__divmodhi4>
     684:	86 2f       	mov	r24, r22
     686:	be 01       	movw	r22, r28
     688:	80 5d       	subi	r24, 0xD0	; 208
     68a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <writeChar>
	pos++;
	writeChar( num % 10 + '0', pos);
     68e:	21 96       	adiw	r28, 0x01	; 1
     690:	c7 01       	movw	r24, r14
     692:	b8 01       	movw	r22, r16
     694:	0e 94 a9 10 	call	0x2152	; 0x2152 <__divmodhi4>
     698:	be 01       	movw	r22, r28
     69a:	80 5d       	subi	r24, 0xD0	; 208
     69c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <writeChar>
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	08 95       	ret

000006ae <initLCD>:


 void initLCD(void){
	 // LCD
	 CLKPR = 0x80;
     6ae:	e1 e6       	ldi	r30, 0x61	; 97
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 e8       	ldi	r24, 0x80	; 128
     6b4:	80 83       	st	Z, r24
	 CLKPR = 0x00;
     6b6:	10 82       	st	Z, r1
	 
	 //Set drive time to 300 milliseconds and contrast control voltage to 3.35 V
	 LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     6b8:	8f e0       	ldi	r24, 0x0F	; 15
     6ba:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	 
	 //Set external clock source, 1/3 bias, 1/4 duty cycle, 25 segments
	 LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     6be:	87 eb       	ldi	r24, 0xB7	; 183
     6c0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>

	 //Set prescaler setting N=16 and clock divide settings D=8
	 LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     6c4:	87 e0       	ldi	r24, 0x07	; 7
     6c6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>

	 //Enable low power waveform, no frame interrupt, no blanking, LCD enable
	 LCDCRA = (1 << LCDAB) | (1 << LCDEN);
     6ca:	80 ec       	ldi	r24, 0xC0	; 192
     6cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	 
	 LCDDR8 = 0x1;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__DATA_REGION_ORIGIN__+0x94>
     6d6:	08 95       	ret

000006d8 <initUSART>:
	#define FOSC 8000000 
	#define BAUD 9600 
	#define MYUBRR (FOSC/16/BAUD-1)
	
	// set baud rate 
	UBRR0H = (unsigned char)(MYUBRR >> 8);
     6d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)MYUBRR; 
     6dc:	83 e3       	ldi	r24, 0x33	; 51
     6de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	// Enable receiver and transmitter receive complete interrupt. 
	UCSR0B = (1 << RXEN0 ) | (1 << TXEN0)| (1 << RXCIE0) ; 
     6e2:	88 e9       	ldi	r24, 0x98	; 152
     6e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
	// Set frame format: 8datam 1stop bit , No parity 
	UCSR0C = (1 << UCSZ01 )| (1 << UCSZ00); 
     6e8:	86 e0       	ldi	r24, 0x06	; 6
     6ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     6ee:	08 95       	ret

000006f0 <init>:
	 
	 LCDDR8 = 0x1;
 }
 
 void init(GUI *self){
	 initLCD();
     6f0:	0e 94 57 03 	call	0x6ae	; 0x6ae <initLCD>
	 initUSART();
     6f4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <initUSART>
     6f8:	08 95       	ret

000006fa <displayNorthQueue>:
	// Set frame format: 8datam 1stop bit , No parity 
	UCSR0C = (1 << UCSZ01 )| (1 << UCSZ00); 
 }
 
void displayNorthQueue (GUI *self,int num){
	printAt(0,num);
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 30 03 	call	0x660	; 0x660 <printAt>
     702:	08 95       	ret

00000704 <displaySouthQueue>:
}

void displaySouthQueue (GUI *self,int num){
	printAt(4,num);
     704:	84 e0       	ldi	r24, 0x04	; 4
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 30 03 	call	0x660	; 0x660 <printAt>
     70c:	08 95       	ret

0000070e <displayBridgeQueue>:
}

void displayBridgeQueue (GUI *self,int num){
	printAt(2,num);
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 30 03 	call	0x660	; 0x660 <printAt>
     716:	08 95       	ret

00000718 <sensorInterupt>:


#include "InputHandler.h"
#include <avr/io.h>

void sensorInterupt (InputHandler *self){
     718:	cf 92       	push	r12
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	1f 92       	push	r1
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	fc 01       	movw	r30, r24
	volatile uint8_t data = UDR0;
     730:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     734:	99 83       	std	Y+1, r25	; 0x01
	
	if ((data >> 0) & 1){
     736:	99 81       	ldd	r25, Y+1	; 0x01
     738:	90 ff       	sbrs	r25, 0
     73a:	14 c0       	rjmp	.+40     	; 0x764 <sensorInterupt+0x4c>
		// add to North queue
		ASYNC(self->controller, addQueue, 1);
     73c:	04 81       	ldd	r16, Z+4	; 0x04
     73e:	15 81       	ldd	r17, Z+5	; 0x05
     740:	cc 24       	eor	r12, r12
     742:	c3 94       	inc	r12
     744:	d1 2c       	mov	r13, r1
     746:	0f 2e       	mov	r0, r31
     748:	f2 e7       	ldi	r31, 0x72	; 114
     74a:	ef 2e       	mov	r14, r31
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	ff 2e       	mov	r15, r31
     750:	f0 2d       	mov	r31, r0
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	a9 01       	movw	r20, r18
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	cb 01       	movw	r24, r22
     75e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
     762:	46 c0       	rjmp	.+140    	; 0x7f0 <sensorInterupt+0xd8>
	}
	
	else if ( data & northBridge ){
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	81 ff       	sbrs	r24, 1
     768:	14 c0       	rjmp	.+40     	; 0x792 <sensorInterupt+0x7a>
		// North car goes on bridge, add car on bridge
		ASYNC(self->controller, addBridge, 1);
     76a:	04 81       	ldd	r16, Z+4	; 0x04
     76c:	15 81       	ldd	r17, Z+5	; 0x05
     76e:	cc 24       	eor	r12, r12
     770:	c3 94       	inc	r12
     772:	d1 2c       	mov	r13, r1
     774:	0f 2e       	mov	r0, r31
     776:	fe ef       	ldi	r31, 0xFE	; 254
     778:	ef 2e       	mov	r14, r31
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	ff 2e       	mov	r15, r31
     77e:	f0 2d       	mov	r31, r0
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	a9 01       	movw	r20, r18
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	cb 01       	movw	r24, r22
     78c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
     790:	2f c0       	rjmp	.+94     	; 0x7f0 <sensorInterupt+0xd8>
	}
	
	else if (data & southCar){
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	82 ff       	sbrs	r24, 2
     796:	15 c0       	rjmp	.+42     	; 0x7c2 <sensorInterupt+0xaa>
		// add to South queue
		ASYNC(self->controller, addQueue, 2);
     798:	04 81       	ldd	r16, Z+4	; 0x04
     79a:	15 81       	ldd	r17, Z+5	; 0x05
     79c:	68 94       	set
     79e:	cc 24       	eor	r12, r12
     7a0:	c1 f8       	bld	r12, 1
     7a2:	d1 2c       	mov	r13, r1
     7a4:	0f 2e       	mov	r0, r31
     7a6:	f2 e7       	ldi	r31, 0x72	; 114
     7a8:	ef 2e       	mov	r14, r31
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ff 2e       	mov	r15, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	a9 01       	movw	r20, r18
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	cb 01       	movw	r24, r22
     7bc:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
     7c0:	17 c0       	rjmp	.+46     	; 0x7f0 <sensorInterupt+0xd8>
	}
	
	else if ( data & southBridge ){
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	83 ff       	sbrs	r24, 3
     7c6:	14 c0       	rjmp	.+40     	; 0x7f0 <sensorInterupt+0xd8>
		// South car goes on bridge, add car on bridge
		ASYNC(self->controller, addBridge, 2);
     7c8:	04 81       	ldd	r16, Z+4	; 0x04
     7ca:	15 81       	ldd	r17, Z+5	; 0x05
     7cc:	68 94       	set
     7ce:	cc 24       	eor	r12, r12
     7d0:	c1 f8       	bld	r12, 1
     7d2:	d1 2c       	mov	r13, r1
     7d4:	0f 2e       	mov	r0, r31
     7d6:	fe ef       	ldi	r31, 0xFE	; 254
     7d8:	ef 2e       	mov	r14, r31
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	ff 2e       	mov	r15, r31
     7de:	f0 2d       	mov	r31, r0
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	a9 01       	movw	r20, r18
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	cb 01       	movw	r24, r22
     7ec:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
	}
}
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	08 95       	ret

00000804 <main>:
#include "OutputHandler.h"
#include "InputHandler.h"
#include "TinyTimber.h"

int main(void)
{
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	a4 97       	sbiw	r28, 0x24	; 36
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
 
  GUI gui = initGUI();
     81c:	1a 82       	std	Y+2, r1	; 0x02
     81e:	19 82       	std	Y+1, r1	; 0x01
     820:	1c 82       	std	Y+4, r1	; 0x04
     822:	1b 82       	std	Y+3, r1	; 0x03
  
  OutputHandler opH = initOutputHandler();
     824:	1e 82       	std	Y+6, r1	; 0x06
     826:	1d 82       	std	Y+5, r1	; 0x05
     828:	18 86       	std	Y+8, r1	; 0x08
     82a:	1f 82       	std	Y+7, r1	; 0x07
  
  Controller controller = initController(&opH, &gui);
     82c:	1a 86       	std	Y+10, r1	; 0x0a
     82e:	19 86       	std	Y+9, r1	; 0x09
     830:	1c 86       	std	Y+12, r1	; 0x0c
     832:	1b 86       	std	Y+11, r1	; 0x0b
     834:	1e 86       	std	Y+14, r1	; 0x0e
     836:	1d 86       	std	Y+13, r1	; 0x0d
     838:	18 8a       	std	Y+16, r1	; 0x10
     83a:	1f 86       	std	Y+15, r1	; 0x0f
     83c:	1a 8a       	std	Y+18, r1	; 0x12
     83e:	19 8a       	std	Y+17, r1	; 0x11
     840:	1c 8a       	std	Y+20, r1	; 0x14
     842:	1b 8a       	std	Y+19, r1	; 0x13
     844:	1e 8a       	std	Y+22, r1	; 0x16
     846:	1d 8a       	std	Y+21, r1	; 0x15
     848:	18 8e       	std	Y+24, r1	; 0x18
     84a:	1f 8a       	std	Y+23, r1	; 0x17
     84c:	ce 01       	movw	r24, r28
     84e:	05 96       	adiw	r24, 0x05	; 5
     850:	9a 8f       	std	Y+26, r25	; 0x1a
     852:	89 8f       	std	Y+25, r24	; 0x19
     854:	04 97       	sbiw	r24, 0x04	; 4
     856:	9c 8f       	std	Y+28, r25	; 0x1c
     858:	8b 8f       	std	Y+27, r24	; 0x1b

  InputHandler inputHandler = initInputHandler(&controller, &gui);
     85a:	1e 8e       	std	Y+30, r1	; 0x1e
     85c:	1d 8e       	std	Y+29, r1	; 0x1d
     85e:	18 a2       	std	Y+32, r1	; 0x20
     860:	1f 8e       	std	Y+31, r1	; 0x1f
     862:	8e 01       	movw	r16, r28
     864:	07 5f       	subi	r16, 0xF7	; 247
     866:	1f 4f       	sbci	r17, 0xFF	; 255
     868:	1a a3       	std	Y+34, r17	; 0x22
     86a:	09 a3       	std	Y+33, r16	; 0x21
     86c:	9c a3       	std	Y+36, r25	; 0x24
     86e:	8b a3       	std	Y+35, r24	; 0x23
  
  INSTALL (&inputHandler, &sensorInterupt, IRQ_USART0_RX);
     870:	48 e0       	ldi	r20, 0x08	; 8
     872:	6c e8       	ldi	r22, 0x8C	; 140
     874:	73 e0       	ldi	r23, 0x03	; 3
     876:	4c 96       	adiw	r24, 0x1c	; 28
     878:	0e 94 73 10 	call	0x20e6	; 0x20e6 <install>
  
  return TINYTIMBER(&controller, initialize, NULL);
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	62 e7       	ldi	r22, 0x72	; 114
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	c8 01       	movw	r24, r16
     886:	0e 94 8d 10 	call	0x211a	; 0x211a <tinytimber>

	
}
     88a:	a4 96       	adiw	r28, 0x24	; 36
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret

000008a0 <outputLights>:
 *  Author: Adam Hedberg
 */ 
#include "OutputHandler.h"

void outputLights(OutputHandler *self, int lights){
	if (lights == 0){ // North and south is Red 
     8a0:	61 15       	cp	r22, r1
     8a2:	71 05       	cpc	r23, r1
     8a4:	21 f4       	brne	.+8      	; 0x8ae <outputLights+0xe>
		UDR0 = 0xA; // 0xA = 0b1010
     8a6:	8a e0       	ldi	r24, 0x0A	; 10
     8a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     8ac:	08 95       	ret
	}
	 else if (lights == 1){ // North is Green south is Red
     8ae:	61 30       	cpi	r22, 0x01	; 1
     8b0:	71 05       	cpc	r23, r1
     8b2:	21 f4       	brne	.+8      	; 0x8bc <outputLights+0x1c>
		UDR0 = 0x9; //Ox9 = 0b1001
     8b4:	89 e0       	ldi	r24, 0x09	; 9
     8b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     8ba:	08 95       	ret
	}
	else if (lights == 2){ // North is Red south is Green
     8bc:	62 30       	cpi	r22, 0x02	; 2
     8be:	71 05       	cpc	r23, r1
     8c0:	19 f4       	brne	.+6      	; 0x8c8 <outputLights+0x28>
		UDR0 = 0x6;	//0x6 = 0b0110
     8c2:	86 e0       	ldi	r24, 0x06	; 6
     8c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     8c8:	08 95       	ret

000008ca <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <initialize+0x6>
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <initialize+0x8>
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	81 e1       	ldi	r24, 0x11	; 17
     8d8:	92 e0       	ldi	r25, 0x02	; 2
     8da:	21 ef       	ldi	r18, 0xF1	; 241
     8dc:	32 e0       	ldi	r19, 0x02	; 2
     8de:	fc 01       	movw	r30, r24
     8e0:	70 97       	sbiw	r30, 0x10	; 16
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	80 83       	st	Z, r24
     8e6:	40 96       	adiw	r24, 0x10	; 16
     8e8:	82 17       	cp	r24, r18
     8ea:	93 07       	cpc	r25, r19
     8ec:	c1 f7       	brne	.-16     	; 0x8de <initialize+0x14>
     8ee:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <messages+0xe1>
     8f2:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <messages+0xe0>
     8f6:	ec e4       	ldi	r30, 0x4C	; 76
     8f8:	f1 e0       	ldi	r31, 0x01	; 1
     8fa:	89 e6       	ldi	r24, 0x69	; 105
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	91 83       	std	Z+1, r25	; 0x01
     900:	80 83       	st	Z, r24
     902:	86 e8       	ldi	r24, 0x86	; 134
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	96 8f       	std	Z+30, r25	; 0x1e
     908:	85 8f       	std	Z+29, r24	; 0x1d
     90a:	a3 ea       	ldi	r26, 0xA3	; 163
     90c:	b1 e0       	ldi	r27, 0x01	; 1
     90e:	b3 af       	std	Z+59, r27	; 0x3b
     910:	a2 af       	std	Z+58, r26	; 0x3a
     912:	1d 92       	st	X+, r1
     914:	1c 92       	st	X, r1
     916:	fa 83       	std	Y+2, r31	; 0x02
     918:	e9 83       	std	Y+1, r30	; 0x01
     91a:	ed e4       	ldi	r30, 0x4D	; 77
     91c:	f3 e0       	ldi	r31, 0x03	; 3
     91e:	fc 83       	std	Y+4, r31	; 0x04
     920:	eb 83       	std	Y+3, r30	; 0x03
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	06 96       	adiw	r24, 0x06	; 6
     928:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <setjmp>
     92c:	8b 81       	ldd	r24, Y+3	; 0x03
     92e:	9c 81       	ldd	r25, Y+4	; 0x04
     930:	e9 81       	ldd	r30, Y+1	; 0x01
     932:	fa 81       	ldd	r31, Y+2	; 0x02
     934:	97 8b       	std	Z+23, r25	; 0x17
     936:	86 8b       	std	Z+22, r24	; 0x16
     938:	91 8f       	std	Z+25, r25	; 0x19
     93a:	80 8f       	std	Z+24, r24	; 0x18
     93c:	85 e0       	ldi	r24, 0x05	; 5
     93e:	90 e1       	ldi	r25, 0x10	; 16
     940:	94 8f       	std	Z+28, r25	; 0x1c
     942:	83 8f       	std	Z+27, r24	; 0x1b
     944:	15 82       	std	Z+5, r1	; 0x05
     946:	14 82       	std	Z+4, r1	; 0x04
     948:	7d 96       	adiw	r30, 0x1d	; 29
     94a:	fa 83       	std	Y+2, r31	; 0x02
     94c:	e9 83       	std	Y+1, r30	; 0x01
     94e:	eb 81       	ldd	r30, Y+3	; 0x03
     950:	fc 81       	ldd	r31, Y+4	; 0x04
     952:	e0 5a       	subi	r30, 0xA0	; 160
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	fc 83       	std	Y+4, r31	; 0x04
     958:	eb 83       	std	Y+3, r30	; 0x03
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	9a 81       	ldd	r25, Y+2	; 0x02
     95e:	80 5c       	subi	r24, 0xC0	; 192
     960:	91 40       	sbci	r25, 0x01	; 1
     962:	f9 f6       	brne	.-66     	; 0x922 <initialize+0x58>
     964:	e4 ee       	ldi	r30, 0xE4	; 228
     966:	f1 e0       	ldi	r31, 0x01	; 1
     968:	11 82       	std	Z+1, r1	; 0x01
     96a:	10 82       	st	Z, r1
     96c:	15 82       	std	Z+5, r1	; 0x05
     96e:	14 82       	std	Z+4, r1	; 0x04
     970:	13 82       	std	Z+3, r1	; 0x03
     972:	12 82       	std	Z+2, r1	; 0x02
     974:	e1 e6       	ldi	r30, 0x61	; 97
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 e8       	ldi	r24, 0x80	; 128
     97a:	80 83       	st	Z, r24
     97c:	10 82       	st	Z, r1
     97e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     982:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <dispatch>:
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <dispatch+0x6>
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	9a 83       	std	Y+2, r25	; 0x02
     9ac:	89 83       	std	Y+1, r24	; 0x01
     9ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     9b6:	06 96       	adiw	r24, 0x06	; 6
     9b8:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <setjmp>
     9bc:	89 2b       	or	r24, r25
     9be:	59 f4       	brne	.+22     	; 0x9d6 <dispatch+0x36>
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	9a 81       	ldd	r25, Y+2	; 0x02
     9c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     9c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	06 96       	adiw	r24, 0x06	; 6
     9d2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <longjmp>
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <schedule>:
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <msgQ>
     9ec:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <msgQ+0x1>
     9f0:	30 97       	sbiw	r30, 0x00	; 0
     9f2:	61 f1       	breq	.+88     	; 0xa4c <schedule+0x6c>
     9f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     9f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	31 f1       	breq	.+76     	; 0xa4c <schedule+0x6c>
     a00:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     a04:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     a08:	aa 81       	ldd	r26, Y+2	; 0x02
     a0a:	bb 81       	ldd	r27, Y+3	; 0x03
     a0c:	10 97       	sbiw	r26, 0x00	; 0
     a0e:	79 f0       	breq	.+30     	; 0xa2e <schedule+0x4e>
     a10:	46 81       	ldd	r20, Z+6	; 0x06
     a12:	57 81       	ldd	r21, Z+7	; 0x07
     a14:	60 85       	ldd	r22, Z+8	; 0x08
     a16:	71 85       	ldd	r23, Z+9	; 0x09
     a18:	16 96       	adiw	r26, 0x06	; 6
     a1a:	0d 91       	ld	r16, X+
     a1c:	1d 91       	ld	r17, X+
     a1e:	2d 91       	ld	r18, X+
     a20:	3c 91       	ld	r19, X
     a22:	19 97       	sbiw	r26, 0x09	; 9
     a24:	40 1b       	sub	r20, r16
     a26:	51 0b       	sbc	r21, r17
     a28:	62 0b       	sbc	r22, r18
     a2a:	73 0b       	sbc	r23, r19
     a2c:	7a f4       	brpl	.+30     	; 0xa4c <schedule+0x6c>
     a2e:	fc 01       	movw	r30, r24
     a30:	20 81       	ld	r18, Z
     a32:	31 81       	ldd	r19, Z+1	; 0x01
     a34:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     a38:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     a3c:	d1 83       	std	Z+1, r29	; 0x01
     a3e:	c0 83       	st	Z, r28
     a40:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     a44:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     a48:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <dispatch>
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	08 95       	ret

00000a56 <__vector_1>:
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	af 93       	push	r26
     a72:	bf 93       	push	r27
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
     a78:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
     a7c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
     a80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a88:	c9 01       	movw	r24, r18
     a8a:	03 2e       	mov	r0, r19
     a8c:	00 0c       	add	r0, r0
     a8e:	aa 0b       	sbc	r26, r26
     a90:	bb 0b       	sbc	r27, r27
     a92:	dc 01       	movw	r26, r24
     a94:	99 27       	eor	r25, r25
     a96:	88 27       	eor	r24, r24
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	84 2b       	or	r24, r20
     a9e:	95 2b       	or	r25, r21
     aa0:	a6 2b       	or	r26, r22
     aa2:	b7 2b       	or	r27, r23
     aa4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     aa8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     aac:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     ab0:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     ab4:	b0 9b       	sbis	0x16, 0	; 22
     ab6:	1b c0       	rjmp	.+54     	; 0xaee <__vector_1+0x98>
     ab8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     abc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ac0:	c9 01       	movw	r24, r18
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	09 2e       	mov	r0, r25
     ac6:	00 0c       	add	r0, r0
     ac8:	aa 0b       	sbc	r26, r26
     aca:	bb 0b       	sbc	r27, r27
     acc:	dc 01       	movw	r26, r24
     ace:	99 27       	eor	r25, r25
     ad0:	88 27       	eor	r24, r24
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	84 2b       	or	r24, r20
     ad8:	95 2b       	or	r25, r21
     ada:	a6 2b       	or	r26, r22
     adc:	b7 2b       	or	r27, r23
     ade:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     ae2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     ae6:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     aea:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     aee:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable>
     af2:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x1>
     af6:	30 97       	sbiw	r30, 0x00	; 0
     af8:	39 f0       	breq	.+14     	; 0xb08 <__vector_1+0xb2>
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable>
     b02:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x1>
     b06:	09 95       	icall
     b08:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_2>:
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	2f 93       	push	r18
     b3a:	3f 93       	push	r19
     b3c:	4f 93       	push	r20
     b3e:	5f 93       	push	r21
     b40:	6f 93       	push	r22
     b42:	7f 93       	push	r23
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31
     b50:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
     b54:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
     b58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b60:	c9 01       	movw	r24, r18
     b62:	03 2e       	mov	r0, r19
     b64:	00 0c       	add	r0, r0
     b66:	aa 0b       	sbc	r26, r26
     b68:	bb 0b       	sbc	r27, r27
     b6a:	dc 01       	movw	r26, r24
     b6c:	99 27       	eor	r25, r25
     b6e:	88 27       	eor	r24, r24
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	84 2b       	or	r24, r20
     b76:	95 2b       	or	r25, r21
     b78:	a6 2b       	or	r26, r22
     b7a:	b7 2b       	or	r27, r23
     b7c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     b80:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     b84:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     b88:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     b8c:	b0 9b       	sbis	0x16, 0	; 22
     b8e:	1b c0       	rjmp	.+54     	; 0xbc6 <__vector_2+0x98>
     b90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b98:	c9 01       	movw	r24, r18
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	09 2e       	mov	r0, r25
     b9e:	00 0c       	add	r0, r0
     ba0:	aa 0b       	sbc	r26, r26
     ba2:	bb 0b       	sbc	r27, r27
     ba4:	dc 01       	movw	r26, r24
     ba6:	99 27       	eor	r25, r25
     ba8:	88 27       	eor	r24, r24
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	84 2b       	or	r24, r20
     bb0:	95 2b       	or	r25, r21
     bb2:	a6 2b       	or	r26, r22
     bb4:	b7 2b       	or	r27, r23
     bb6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     bba:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     bbe:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     bc2:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     bc6:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x2>
     bca:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x3>
     bce:	30 97       	sbiw	r30, 0x00	; 0
     bd0:	39 f0       	breq	.+14     	; 0xbe0 <__vector_2+0xb2>
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x2>
     bda:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x3>
     bde:	09 95       	icall
     be0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
     be4:	ff 91       	pop	r31
     be6:	ef 91       	pop	r30
     be8:	bf 91       	pop	r27
     bea:	af 91       	pop	r26
     bec:	9f 91       	pop	r25
     bee:	8f 91       	pop	r24
     bf0:	7f 91       	pop	r23
     bf2:	6f 91       	pop	r22
     bf4:	5f 91       	pop	r21
     bf6:	4f 91       	pop	r20
     bf8:	3f 91       	pop	r19
     bfa:	2f 91       	pop	r18
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	0f 90       	pop	r0
     c02:	1f 90       	pop	r1
     c04:	18 95       	reti

00000c06 <__vector_3>:
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	4f 93       	push	r20
     c16:	5f 93       	push	r21
     c18:	6f 93       	push	r22
     c1a:	7f 93       	push	r23
     c1c:	8f 93       	push	r24
     c1e:	9f 93       	push	r25
     c20:	af 93       	push	r26
     c22:	bf 93       	push	r27
     c24:	ef 93       	push	r30
     c26:	ff 93       	push	r31
     c28:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
     c2c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
     c30:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c34:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c38:	c9 01       	movw	r24, r18
     c3a:	03 2e       	mov	r0, r19
     c3c:	00 0c       	add	r0, r0
     c3e:	aa 0b       	sbc	r26, r26
     c40:	bb 0b       	sbc	r27, r27
     c42:	dc 01       	movw	r26, r24
     c44:	99 27       	eor	r25, r25
     c46:	88 27       	eor	r24, r24
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	84 2b       	or	r24, r20
     c4e:	95 2b       	or	r25, r21
     c50:	a6 2b       	or	r26, r22
     c52:	b7 2b       	or	r27, r23
     c54:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     c58:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     c5c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     c60:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     c64:	b0 9b       	sbis	0x16, 0	; 22
     c66:	1b c0       	rjmp	.+54     	; 0xc9e <__vector_3+0x98>
     c68:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c6c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c70:	c9 01       	movw	r24, r18
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	09 2e       	mov	r0, r25
     c76:	00 0c       	add	r0, r0
     c78:	aa 0b       	sbc	r26, r26
     c7a:	bb 0b       	sbc	r27, r27
     c7c:	dc 01       	movw	r26, r24
     c7e:	99 27       	eor	r25, r25
     c80:	88 27       	eor	r24, r24
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	84 2b       	or	r24, r20
     c88:	95 2b       	or	r25, r21
     c8a:	a6 2b       	or	r26, r22
     c8c:	b7 2b       	or	r27, r23
     c8e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     c92:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     c96:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     c9a:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     c9e:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x4>
     ca2:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x5>
     ca6:	30 97       	sbiw	r30, 0x00	; 0
     ca8:	39 f0       	breq	.+14     	; 0xcb8 <__vector_3+0xb2>
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x4>
     cb2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x5>
     cb6:	09 95       	icall
     cb8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	bf 91       	pop	r27
     cc2:	af 91       	pop	r26
     cc4:	9f 91       	pop	r25
     cc6:	8f 91       	pop	r24
     cc8:	7f 91       	pop	r23
     cca:	6f 91       	pop	r22
     ccc:	5f 91       	pop	r21
     cce:	4f 91       	pop	r20
     cd0:	3f 91       	pop	r19
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <__vector_4>:
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
     d00:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
     d04:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
     d08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d10:	c9 01       	movw	r24, r18
     d12:	03 2e       	mov	r0, r19
     d14:	00 0c       	add	r0, r0
     d16:	aa 0b       	sbc	r26, r26
     d18:	bb 0b       	sbc	r27, r27
     d1a:	dc 01       	movw	r26, r24
     d1c:	99 27       	eor	r25, r25
     d1e:	88 27       	eor	r24, r24
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	84 2b       	or	r24, r20
     d26:	95 2b       	or	r25, r21
     d28:	a6 2b       	or	r26, r22
     d2a:	b7 2b       	or	r27, r23
     d2c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     d30:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     d34:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     d38:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     d3c:	b0 9b       	sbis	0x16, 0	; 22
     d3e:	1b c0       	rjmp	.+54     	; 0xd76 <__vector_4+0x98>
     d40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d48:	c9 01       	movw	r24, r18
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	09 2e       	mov	r0, r25
     d4e:	00 0c       	add	r0, r0
     d50:	aa 0b       	sbc	r26, r26
     d52:	bb 0b       	sbc	r27, r27
     d54:	dc 01       	movw	r26, r24
     d56:	99 27       	eor	r25, r25
     d58:	88 27       	eor	r24, r24
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	84 2b       	or	r24, r20
     d60:	95 2b       	or	r25, r21
     d62:	a6 2b       	or	r26, r22
     d64:	b7 2b       	or	r27, r23
     d66:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     d6a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     d6e:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     d72:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     d76:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x6>
     d7a:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x7>
     d7e:	30 97       	sbiw	r30, 0x00	; 0
     d80:	39 f0       	breq	.+14     	; 0xd90 <__vector_4+0xb2>
     d82:	63 e0       	ldi	r22, 0x03	; 3
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x6>
     d8a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x7>
     d8e:	09 95       	icall
     d90:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
     d94:	ff 91       	pop	r31
     d96:	ef 91       	pop	r30
     d98:	bf 91       	pop	r27
     d9a:	af 91       	pop	r26
     d9c:	9f 91       	pop	r25
     d9e:	8f 91       	pop	r24
     da0:	7f 91       	pop	r23
     da2:	6f 91       	pop	r22
     da4:	5f 91       	pop	r21
     da6:	4f 91       	pop	r20
     da8:	3f 91       	pop	r19
     daa:	2f 91       	pop	r18
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <__vector_5>:
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	2f 93       	push	r18
     dc2:	3f 93       	push	r19
     dc4:	4f 93       	push	r20
     dc6:	5f 93       	push	r21
     dc8:	6f 93       	push	r22
     dca:	7f 93       	push	r23
     dcc:	8f 93       	push	r24
     dce:	9f 93       	push	r25
     dd0:	af 93       	push	r26
     dd2:	bf 93       	push	r27
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
     dd8:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
     ddc:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
     de0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     de4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     de8:	c9 01       	movw	r24, r18
     dea:	03 2e       	mov	r0, r19
     dec:	00 0c       	add	r0, r0
     dee:	aa 0b       	sbc	r26, r26
     df0:	bb 0b       	sbc	r27, r27
     df2:	dc 01       	movw	r26, r24
     df4:	99 27       	eor	r25, r25
     df6:	88 27       	eor	r24, r24
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	84 2b       	or	r24, r20
     dfe:	95 2b       	or	r25, r21
     e00:	a6 2b       	or	r26, r22
     e02:	b7 2b       	or	r27, r23
     e04:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     e08:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     e0c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     e10:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     e14:	b0 9b       	sbis	0x16, 0	; 22
     e16:	1b c0       	rjmp	.+54     	; 0xe4e <__vector_5+0x98>
     e18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e20:	c9 01       	movw	r24, r18
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	09 2e       	mov	r0, r25
     e26:	00 0c       	add	r0, r0
     e28:	aa 0b       	sbc	r26, r26
     e2a:	bb 0b       	sbc	r27, r27
     e2c:	dc 01       	movw	r26, r24
     e2e:	99 27       	eor	r25, r25
     e30:	88 27       	eor	r24, r24
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	84 2b       	or	r24, r20
     e38:	95 2b       	or	r25, r21
     e3a:	a6 2b       	or	r26, r22
     e3c:	b7 2b       	or	r27, r23
     e3e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     e42:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     e46:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     e4a:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     e4e:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x8>
     e52:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x9>
     e56:	30 97       	sbiw	r30, 0x00	; 0
     e58:	39 f0       	breq	.+14     	; 0xe68 <__vector_5+0xb2>
     e5a:	64 e0       	ldi	r22, 0x04	; 4
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x8>
     e62:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x9>
     e66:	09 95       	icall
     e68:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
     e6c:	ff 91       	pop	r31
     e6e:	ef 91       	pop	r30
     e70:	bf 91       	pop	r27
     e72:	af 91       	pop	r26
     e74:	9f 91       	pop	r25
     e76:	8f 91       	pop	r24
     e78:	7f 91       	pop	r23
     e7a:	6f 91       	pop	r22
     e7c:	5f 91       	pop	r21
     e7e:	4f 91       	pop	r20
     e80:	3f 91       	pop	r19
     e82:	2f 91       	pop	r18
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	0f 90       	pop	r0
     e8a:	1f 90       	pop	r1
     e8c:	18 95       	reti

00000e8e <__vector_10>:
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
     eb0:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
     eb4:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
     eb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ebc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ec0:	c9 01       	movw	r24, r18
     ec2:	03 2e       	mov	r0, r19
     ec4:	00 0c       	add	r0, r0
     ec6:	aa 0b       	sbc	r26, r26
     ec8:	bb 0b       	sbc	r27, r27
     eca:	dc 01       	movw	r26, r24
     ecc:	99 27       	eor	r25, r25
     ece:	88 27       	eor	r24, r24
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	84 2b       	or	r24, r20
     ed6:	95 2b       	or	r25, r21
     ed8:	a6 2b       	or	r26, r22
     eda:	b7 2b       	or	r27, r23
     edc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     ee0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     ee4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     ee8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     eec:	b0 9b       	sbis	0x16, 0	; 22
     eee:	1b c0       	rjmp	.+54     	; 0xf26 <__vector_10+0x98>
     ef0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ef4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ef8:	c9 01       	movw	r24, r18
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	09 2e       	mov	r0, r25
     efe:	00 0c       	add	r0, r0
     f00:	aa 0b       	sbc	r26, r26
     f02:	bb 0b       	sbc	r27, r27
     f04:	dc 01       	movw	r26, r24
     f06:	99 27       	eor	r25, r25
     f08:	88 27       	eor	r24, r24
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	84 2b       	or	r24, r20
     f10:	95 2b       	or	r25, r21
     f12:	a6 2b       	or	r26, r22
     f14:	b7 2b       	or	r27, r23
     f16:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     f1a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     f1e:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     f22:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     f26:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0xa>
     f2a:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0xb>
     f2e:	30 97       	sbiw	r30, 0x00	; 0
     f30:	39 f0       	breq	.+14     	; 0xf40 <__vector_10+0xb2>
     f32:	65 e0       	ldi	r22, 0x05	; 5
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xa>
     f3a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xb>
     f3e:	09 95       	icall
     f40:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	bf 91       	pop	r27
     f4a:	af 91       	pop	r26
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	7f 91       	pop	r23
     f52:	6f 91       	pop	r22
     f54:	5f 91       	pop	r21
     f56:	4f 91       	pop	r20
     f58:	3f 91       	pop	r19
     f5a:	2f 91       	pop	r18
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti

00000f66 <__vector_11>:
     f66:	1f 92       	push	r1
     f68:	0f 92       	push	r0
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	0f 92       	push	r0
     f6e:	11 24       	eor	r1, r1
     f70:	2f 93       	push	r18
     f72:	3f 93       	push	r19
     f74:	4f 93       	push	r20
     f76:	5f 93       	push	r21
     f78:	6f 93       	push	r22
     f7a:	7f 93       	push	r23
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
     f80:	af 93       	push	r26
     f82:	bf 93       	push	r27
     f84:	ef 93       	push	r30
     f86:	ff 93       	push	r31
     f88:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
     f8c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
     f90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f98:	c9 01       	movw	r24, r18
     f9a:	03 2e       	mov	r0, r19
     f9c:	00 0c       	add	r0, r0
     f9e:	aa 0b       	sbc	r26, r26
     fa0:	bb 0b       	sbc	r27, r27
     fa2:	dc 01       	movw	r26, r24
     fa4:	99 27       	eor	r25, r25
     fa6:	88 27       	eor	r24, r24
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	84 2b       	or	r24, r20
     fae:	95 2b       	or	r25, r21
     fb0:	a6 2b       	or	r26, r22
     fb2:	b7 2b       	or	r27, r23
     fb4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     fb8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     fbc:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     fc0:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     fc4:	b0 9b       	sbis	0x16, 0	; 22
     fc6:	1b c0       	rjmp	.+54     	; 0xffe <__vector_11+0x98>
     fc8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fcc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fd0:	c9 01       	movw	r24, r18
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	09 2e       	mov	r0, r25
     fd6:	00 0c       	add	r0, r0
     fd8:	aa 0b       	sbc	r26, r26
     fda:	bb 0b       	sbc	r27, r27
     fdc:	dc 01       	movw	r26, r24
     fde:	99 27       	eor	r25, r25
     fe0:	88 27       	eor	r24, r24
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	84 2b       	or	r24, r20
     fe8:	95 2b       	or	r25, r21
     fea:	a6 2b       	or	r26, r22
     fec:	b7 2b       	or	r27, r23
     fee:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     ff2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     ff6:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     ffa:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     ffe:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0xc>
    1002:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0xd>
    1006:	30 97       	sbiw	r30, 0x00	; 0
    1008:	39 f0       	breq	.+14     	; 0x1018 <__vector_11+0xb2>
    100a:	66 e0       	ldi	r22, 0x06	; 6
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xc>
    1012:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xd>
    1016:	09 95       	icall
    1018:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    101c:	ff 91       	pop	r31
    101e:	ef 91       	pop	r30
    1020:	bf 91       	pop	r27
    1022:	af 91       	pop	r26
    1024:	9f 91       	pop	r25
    1026:	8f 91       	pop	r24
    1028:	7f 91       	pop	r23
    102a:	6f 91       	pop	r22
    102c:	5f 91       	pop	r21
    102e:	4f 91       	pop	r20
    1030:	3f 91       	pop	r19
    1032:	2f 91       	pop	r18
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <__vector_12>:
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31
    1060:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    1064:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1068:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    106c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1070:	c9 01       	movw	r24, r18
    1072:	03 2e       	mov	r0, r19
    1074:	00 0c       	add	r0, r0
    1076:	aa 0b       	sbc	r26, r26
    1078:	bb 0b       	sbc	r27, r27
    107a:	dc 01       	movw	r26, r24
    107c:	99 27       	eor	r25, r25
    107e:	88 27       	eor	r24, r24
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	84 2b       	or	r24, r20
    1086:	95 2b       	or	r25, r21
    1088:	a6 2b       	or	r26, r22
    108a:	b7 2b       	or	r27, r23
    108c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1090:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1094:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1098:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    109c:	b0 9b       	sbis	0x16, 0	; 22
    109e:	1b c0       	rjmp	.+54     	; 0x10d6 <__vector_12+0x98>
    10a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10a8:	c9 01       	movw	r24, r18
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	09 2e       	mov	r0, r25
    10ae:	00 0c       	add	r0, r0
    10b0:	aa 0b       	sbc	r26, r26
    10b2:	bb 0b       	sbc	r27, r27
    10b4:	dc 01       	movw	r26, r24
    10b6:	99 27       	eor	r25, r25
    10b8:	88 27       	eor	r24, r24
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	84 2b       	or	r24, r20
    10c0:	95 2b       	or	r25, r21
    10c2:	a6 2b       	or	r26, r22
    10c4:	b7 2b       	or	r27, r23
    10c6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    10ca:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    10ce:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    10d2:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    10d6:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0xe>
    10da:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0xf>
    10de:	30 97       	sbiw	r30, 0x00	; 0
    10e0:	39 f0       	breq	.+14     	; 0x10f0 <__vector_12+0xb2>
    10e2:	67 e0       	ldi	r22, 0x07	; 7
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0xe>
    10ea:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0xf>
    10ee:	09 95       	icall
    10f0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    10f4:	ff 91       	pop	r31
    10f6:	ef 91       	pop	r30
    10f8:	bf 91       	pop	r27
    10fa:	af 91       	pop	r26
    10fc:	9f 91       	pop	r25
    10fe:	8f 91       	pop	r24
    1100:	7f 91       	pop	r23
    1102:	6f 91       	pop	r22
    1104:	5f 91       	pop	r21
    1106:	4f 91       	pop	r20
    1108:	3f 91       	pop	r19
    110a:	2f 91       	pop	r18
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <__vector_13>:
    1116:	1f 92       	push	r1
    1118:	0f 92       	push	r0
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	2f 93       	push	r18
    1122:	3f 93       	push	r19
    1124:	4f 93       	push	r20
    1126:	5f 93       	push	r21
    1128:	6f 93       	push	r22
    112a:	7f 93       	push	r23
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	af 93       	push	r26
    1132:	bf 93       	push	r27
    1134:	ef 93       	push	r30
    1136:	ff 93       	push	r31
    1138:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    113c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1140:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1144:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1148:	c9 01       	movw	r24, r18
    114a:	03 2e       	mov	r0, r19
    114c:	00 0c       	add	r0, r0
    114e:	aa 0b       	sbc	r26, r26
    1150:	bb 0b       	sbc	r27, r27
    1152:	dc 01       	movw	r26, r24
    1154:	99 27       	eor	r25, r25
    1156:	88 27       	eor	r24, r24
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	84 2b       	or	r24, r20
    115e:	95 2b       	or	r25, r21
    1160:	a6 2b       	or	r26, r22
    1162:	b7 2b       	or	r27, r23
    1164:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1168:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    116c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1170:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1174:	b0 9b       	sbis	0x16, 0	; 22
    1176:	1b c0       	rjmp	.+54     	; 0x11ae <__vector_13+0x98>
    1178:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    117c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1180:	c9 01       	movw	r24, r18
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	09 2e       	mov	r0, r25
    1186:	00 0c       	add	r0, r0
    1188:	aa 0b       	sbc	r26, r26
    118a:	bb 0b       	sbc	r27, r27
    118c:	dc 01       	movw	r26, r24
    118e:	99 27       	eor	r25, r25
    1190:	88 27       	eor	r24, r24
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	84 2b       	or	r24, r20
    1198:	95 2b       	or	r25, r21
    119a:	a6 2b       	or	r26, r22
    119c:	b7 2b       	or	r27, r23
    119e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    11a2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    11a6:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    11aa:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    11ae:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x10>
    11b2:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x11>
    11b6:	30 97       	sbiw	r30, 0x00	; 0
    11b8:	39 f0       	breq	.+14     	; 0x11c8 <__vector_13+0xb2>
    11ba:	68 e0       	ldi	r22, 0x08	; 8
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x10>
    11c2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x11>
    11c6:	09 95       	icall
    11c8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	7f 91       	pop	r23
    11da:	6f 91       	pop	r22
    11dc:	5f 91       	pop	r21
    11de:	4f 91       	pop	r20
    11e0:	3f 91       	pop	r19
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	0f 90       	pop	r0
    11ea:	1f 90       	pop	r1
    11ec:	18 95       	reti

000011ee <__vector_14>:
    11ee:	1f 92       	push	r1
    11f0:	0f 92       	push	r0
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	0f 92       	push	r0
    11f6:	11 24       	eor	r1, r1
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
    1210:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    1214:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1218:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    121c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1220:	c9 01       	movw	r24, r18
    1222:	03 2e       	mov	r0, r19
    1224:	00 0c       	add	r0, r0
    1226:	aa 0b       	sbc	r26, r26
    1228:	bb 0b       	sbc	r27, r27
    122a:	dc 01       	movw	r26, r24
    122c:	99 27       	eor	r25, r25
    122e:	88 27       	eor	r24, r24
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	84 2b       	or	r24, r20
    1236:	95 2b       	or	r25, r21
    1238:	a6 2b       	or	r26, r22
    123a:	b7 2b       	or	r27, r23
    123c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1240:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1244:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1248:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    124c:	b0 9b       	sbis	0x16, 0	; 22
    124e:	1b c0       	rjmp	.+54     	; 0x1286 <__vector_14+0x98>
    1250:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1254:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1258:	c9 01       	movw	r24, r18
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	09 2e       	mov	r0, r25
    125e:	00 0c       	add	r0, r0
    1260:	aa 0b       	sbc	r26, r26
    1262:	bb 0b       	sbc	r27, r27
    1264:	dc 01       	movw	r26, r24
    1266:	99 27       	eor	r25, r25
    1268:	88 27       	eor	r24, r24
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	84 2b       	or	r24, r20
    1270:	95 2b       	or	r25, r21
    1272:	a6 2b       	or	r26, r22
    1274:	b7 2b       	or	r27, r23
    1276:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    127a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    127e:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1282:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1286:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x12>
    128a:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x13>
    128e:	30 97       	sbiw	r30, 0x00	; 0
    1290:	39 f0       	breq	.+14     	; 0x12a0 <__vector_14+0xb2>
    1292:	69 e0       	ldi	r22, 0x09	; 9
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x12>
    129a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x13>
    129e:	09 95       	icall
    12a0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    12a4:	ff 91       	pop	r31
    12a6:	ef 91       	pop	r30
    12a8:	bf 91       	pop	r27
    12aa:	af 91       	pop	r26
    12ac:	9f 91       	pop	r25
    12ae:	8f 91       	pop	r24
    12b0:	7f 91       	pop	r23
    12b2:	6f 91       	pop	r22
    12b4:	5f 91       	pop	r21
    12b6:	4f 91       	pop	r20
    12b8:	3f 91       	pop	r19
    12ba:	2f 91       	pop	r18
    12bc:	0f 90       	pop	r0
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	0f 90       	pop	r0
    12c2:	1f 90       	pop	r1
    12c4:	18 95       	reti

000012c6 <__vector_15>:
    12c6:	1f 92       	push	r1
    12c8:	0f 92       	push	r0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	0f 92       	push	r0
    12ce:	11 24       	eor	r1, r1
    12d0:	2f 93       	push	r18
    12d2:	3f 93       	push	r19
    12d4:	4f 93       	push	r20
    12d6:	5f 93       	push	r21
    12d8:	6f 93       	push	r22
    12da:	7f 93       	push	r23
    12dc:	8f 93       	push	r24
    12de:	9f 93       	push	r25
    12e0:	af 93       	push	r26
    12e2:	bf 93       	push	r27
    12e4:	ef 93       	push	r30
    12e6:	ff 93       	push	r31
    12e8:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    12ec:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    12f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12f8:	c9 01       	movw	r24, r18
    12fa:	03 2e       	mov	r0, r19
    12fc:	00 0c       	add	r0, r0
    12fe:	aa 0b       	sbc	r26, r26
    1300:	bb 0b       	sbc	r27, r27
    1302:	dc 01       	movw	r26, r24
    1304:	99 27       	eor	r25, r25
    1306:	88 27       	eor	r24, r24
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	84 2b       	or	r24, r20
    130e:	95 2b       	or	r25, r21
    1310:	a6 2b       	or	r26, r22
    1312:	b7 2b       	or	r27, r23
    1314:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1318:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    131c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1320:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1324:	b0 9b       	sbis	0x16, 0	; 22
    1326:	1b c0       	rjmp	.+54     	; 0x135e <__vector_15+0x98>
    1328:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    132c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1330:	c9 01       	movw	r24, r18
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	09 2e       	mov	r0, r25
    1336:	00 0c       	add	r0, r0
    1338:	aa 0b       	sbc	r26, r26
    133a:	bb 0b       	sbc	r27, r27
    133c:	dc 01       	movw	r26, r24
    133e:	99 27       	eor	r25, r25
    1340:	88 27       	eor	r24, r24
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	84 2b       	or	r24, r20
    1348:	95 2b       	or	r25, r21
    134a:	a6 2b       	or	r26, r22
    134c:	b7 2b       	or	r27, r23
    134e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1352:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1356:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    135a:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    135e:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x14>
    1362:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x15>
    1366:	30 97       	sbiw	r30, 0x00	; 0
    1368:	39 f0       	breq	.+14     	; 0x1378 <__vector_15+0xb2>
    136a:	6a e0       	ldi	r22, 0x0A	; 10
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x14>
    1372:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x15>
    1376:	09 95       	icall
    1378:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    137c:	ff 91       	pop	r31
    137e:	ef 91       	pop	r30
    1380:	bf 91       	pop	r27
    1382:	af 91       	pop	r26
    1384:	9f 91       	pop	r25
    1386:	8f 91       	pop	r24
    1388:	7f 91       	pop	r23
    138a:	6f 91       	pop	r22
    138c:	5f 91       	pop	r21
    138e:	4f 91       	pop	r20
    1390:	3f 91       	pop	r19
    1392:	2f 91       	pop	r18
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <__vector_16>:
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
    13c0:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    13c4:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    13c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13d0:	c9 01       	movw	r24, r18
    13d2:	03 2e       	mov	r0, r19
    13d4:	00 0c       	add	r0, r0
    13d6:	aa 0b       	sbc	r26, r26
    13d8:	bb 0b       	sbc	r27, r27
    13da:	dc 01       	movw	r26, r24
    13dc:	99 27       	eor	r25, r25
    13de:	88 27       	eor	r24, r24
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	84 2b       	or	r24, r20
    13e6:	95 2b       	or	r25, r21
    13e8:	a6 2b       	or	r26, r22
    13ea:	b7 2b       	or	r27, r23
    13ec:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    13f0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    13f4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    13f8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    13fc:	b0 9b       	sbis	0x16, 0	; 22
    13fe:	1b c0       	rjmp	.+54     	; 0x1436 <__vector_16+0x98>
    1400:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1404:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1408:	c9 01       	movw	r24, r18
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	09 2e       	mov	r0, r25
    140e:	00 0c       	add	r0, r0
    1410:	aa 0b       	sbc	r26, r26
    1412:	bb 0b       	sbc	r27, r27
    1414:	dc 01       	movw	r26, r24
    1416:	99 27       	eor	r25, r25
    1418:	88 27       	eor	r24, r24
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	84 2b       	or	r24, r20
    1420:	95 2b       	or	r25, r21
    1422:	a6 2b       	or	r26, r22
    1424:	b7 2b       	or	r27, r23
    1426:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    142a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    142e:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1432:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1436:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x16>
    143a:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x17>
    143e:	30 97       	sbiw	r30, 0x00	; 0
    1440:	39 f0       	breq	.+14     	; 0x1450 <__vector_16+0xb2>
    1442:	6b e0       	ldi	r22, 0x0B	; 11
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x16>
    144a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x17>
    144e:	09 95       	icall
    1450:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    1454:	ff 91       	pop	r31
    1456:	ef 91       	pop	r30
    1458:	bf 91       	pop	r27
    145a:	af 91       	pop	r26
    145c:	9f 91       	pop	r25
    145e:	8f 91       	pop	r24
    1460:	7f 91       	pop	r23
    1462:	6f 91       	pop	r22
    1464:	5f 91       	pop	r21
    1466:	4f 91       	pop	r20
    1468:	3f 91       	pop	r19
    146a:	2f 91       	pop	r18
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	0f 90       	pop	r0
    1472:	1f 90       	pop	r1
    1474:	18 95       	reti

00001476 <__vector_17>:
    1476:	1f 92       	push	r1
    1478:	0f 92       	push	r0
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	0f 92       	push	r0
    147e:	11 24       	eor	r1, r1
    1480:	2f 93       	push	r18
    1482:	3f 93       	push	r19
    1484:	4f 93       	push	r20
    1486:	5f 93       	push	r21
    1488:	6f 93       	push	r22
    148a:	7f 93       	push	r23
    148c:	8f 93       	push	r24
    148e:	9f 93       	push	r25
    1490:	af 93       	push	r26
    1492:	bf 93       	push	r27
    1494:	ef 93       	push	r30
    1496:	ff 93       	push	r31
    1498:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    149c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    14a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14a8:	c9 01       	movw	r24, r18
    14aa:	03 2e       	mov	r0, r19
    14ac:	00 0c       	add	r0, r0
    14ae:	aa 0b       	sbc	r26, r26
    14b0:	bb 0b       	sbc	r27, r27
    14b2:	dc 01       	movw	r26, r24
    14b4:	99 27       	eor	r25, r25
    14b6:	88 27       	eor	r24, r24
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	84 2b       	or	r24, r20
    14be:	95 2b       	or	r25, r21
    14c0:	a6 2b       	or	r26, r22
    14c2:	b7 2b       	or	r27, r23
    14c4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    14c8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    14cc:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    14d0:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    14d4:	b0 9b       	sbis	0x16, 0	; 22
    14d6:	1b c0       	rjmp	.+54     	; 0x150e <__vector_17+0x98>
    14d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14e0:	c9 01       	movw	r24, r18
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	09 2e       	mov	r0, r25
    14e6:	00 0c       	add	r0, r0
    14e8:	aa 0b       	sbc	r26, r26
    14ea:	bb 0b       	sbc	r27, r27
    14ec:	dc 01       	movw	r26, r24
    14ee:	99 27       	eor	r25, r25
    14f0:	88 27       	eor	r24, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	84 2b       	or	r24, r20
    14f8:	95 2b       	or	r25, r21
    14fa:	a6 2b       	or	r26, r22
    14fc:	b7 2b       	or	r27, r23
    14fe:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1502:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1506:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    150a:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    150e:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x18>
    1512:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x19>
    1516:	30 97       	sbiw	r30, 0x00	; 0
    1518:	39 f0       	breq	.+14     	; 0x1528 <__vector_17+0xb2>
    151a:	6c e0       	ldi	r22, 0x0C	; 12
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x18>
    1522:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x19>
    1526:	09 95       	icall
    1528:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	bf 91       	pop	r27
    1532:	af 91       	pop	r26
    1534:	9f 91       	pop	r25
    1536:	8f 91       	pop	r24
    1538:	7f 91       	pop	r23
    153a:	6f 91       	pop	r22
    153c:	5f 91       	pop	r21
    153e:	4f 91       	pop	r20
    1540:	3f 91       	pop	r19
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <__vector_18>:
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
    1570:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    1574:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1578:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    157c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1580:	c9 01       	movw	r24, r18
    1582:	03 2e       	mov	r0, r19
    1584:	00 0c       	add	r0, r0
    1586:	aa 0b       	sbc	r26, r26
    1588:	bb 0b       	sbc	r27, r27
    158a:	dc 01       	movw	r26, r24
    158c:	99 27       	eor	r25, r25
    158e:	88 27       	eor	r24, r24
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	84 2b       	or	r24, r20
    1596:	95 2b       	or	r25, r21
    1598:	a6 2b       	or	r26, r22
    159a:	b7 2b       	or	r27, r23
    159c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    15a0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    15a4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    15a8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    15ac:	b0 9b       	sbis	0x16, 0	; 22
    15ae:	1b c0       	rjmp	.+54     	; 0x15e6 <__vector_18+0x98>
    15b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15b8:	c9 01       	movw	r24, r18
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	09 2e       	mov	r0, r25
    15be:	00 0c       	add	r0, r0
    15c0:	aa 0b       	sbc	r26, r26
    15c2:	bb 0b       	sbc	r27, r27
    15c4:	dc 01       	movw	r26, r24
    15c6:	99 27       	eor	r25, r25
    15c8:	88 27       	eor	r24, r24
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	84 2b       	or	r24, r20
    15d0:	95 2b       	or	r25, r21
    15d2:	a6 2b       	or	r26, r22
    15d4:	b7 2b       	or	r27, r23
    15d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    15da:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    15de:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    15e2:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    15e6:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x1a>
    15ea:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1b>
    15ee:	30 97       	sbiw	r30, 0x00	; 0
    15f0:	39 f0       	breq	.+14     	; 0x1600 <__vector_18+0xb2>
    15f2:	6d e0       	ldi	r22, 0x0D	; 13
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1a>
    15fa:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1b>
    15fe:	09 95       	icall
    1600:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    1604:	ff 91       	pop	r31
    1606:	ef 91       	pop	r30
    1608:	bf 91       	pop	r27
    160a:	af 91       	pop	r26
    160c:	9f 91       	pop	r25
    160e:	8f 91       	pop	r24
    1610:	7f 91       	pop	r23
    1612:	6f 91       	pop	r22
    1614:	5f 91       	pop	r21
    1616:	4f 91       	pop	r20
    1618:	3f 91       	pop	r19
    161a:	2f 91       	pop	r18
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	0f 90       	pop	r0
    1622:	1f 90       	pop	r1
    1624:	18 95       	reti

00001626 <__vector_19>:
    1626:	1f 92       	push	r1
    1628:	0f 92       	push	r0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	2f 93       	push	r18
    1632:	3f 93       	push	r19
    1634:	4f 93       	push	r20
    1636:	5f 93       	push	r21
    1638:	6f 93       	push	r22
    163a:	7f 93       	push	r23
    163c:	8f 93       	push	r24
    163e:	9f 93       	push	r25
    1640:	af 93       	push	r26
    1642:	bf 93       	push	r27
    1644:	ef 93       	push	r30
    1646:	ff 93       	push	r31
    1648:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    164c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1650:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1654:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1658:	c9 01       	movw	r24, r18
    165a:	03 2e       	mov	r0, r19
    165c:	00 0c       	add	r0, r0
    165e:	aa 0b       	sbc	r26, r26
    1660:	bb 0b       	sbc	r27, r27
    1662:	dc 01       	movw	r26, r24
    1664:	99 27       	eor	r25, r25
    1666:	88 27       	eor	r24, r24
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	84 2b       	or	r24, r20
    166e:	95 2b       	or	r25, r21
    1670:	a6 2b       	or	r26, r22
    1672:	b7 2b       	or	r27, r23
    1674:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1678:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    167c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1680:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1684:	b0 9b       	sbis	0x16, 0	; 22
    1686:	1b c0       	rjmp	.+54     	; 0x16be <__vector_19+0x98>
    1688:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    168c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1690:	c9 01       	movw	r24, r18
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	09 2e       	mov	r0, r25
    1696:	00 0c       	add	r0, r0
    1698:	aa 0b       	sbc	r26, r26
    169a:	bb 0b       	sbc	r27, r27
    169c:	dc 01       	movw	r26, r24
    169e:	99 27       	eor	r25, r25
    16a0:	88 27       	eor	r24, r24
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	84 2b       	or	r24, r20
    16a8:	95 2b       	or	r25, r21
    16aa:	a6 2b       	or	r26, r22
    16ac:	b7 2b       	or	r27, r23
    16ae:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    16b2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    16b6:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    16ba:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    16be:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x1c>
    16c2:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1d>
    16c6:	30 97       	sbiw	r30, 0x00	; 0
    16c8:	39 f0       	breq	.+14     	; 0x16d8 <__vector_19+0xb2>
    16ca:	6e e0       	ldi	r22, 0x0E	; 14
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1c>
    16d2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1d>
    16d6:	09 95       	icall
    16d8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_20>:
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	2f 93       	push	r18
    170a:	3f 93       	push	r19
    170c:	4f 93       	push	r20
    170e:	5f 93       	push	r21
    1710:	6f 93       	push	r22
    1712:	7f 93       	push	r23
    1714:	8f 93       	push	r24
    1716:	9f 93       	push	r25
    1718:	af 93       	push	r26
    171a:	bf 93       	push	r27
    171c:	ef 93       	push	r30
    171e:	ff 93       	push	r31
    1720:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    1724:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1728:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    172c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1730:	c9 01       	movw	r24, r18
    1732:	03 2e       	mov	r0, r19
    1734:	00 0c       	add	r0, r0
    1736:	aa 0b       	sbc	r26, r26
    1738:	bb 0b       	sbc	r27, r27
    173a:	dc 01       	movw	r26, r24
    173c:	99 27       	eor	r25, r25
    173e:	88 27       	eor	r24, r24
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	84 2b       	or	r24, r20
    1746:	95 2b       	or	r25, r21
    1748:	a6 2b       	or	r26, r22
    174a:	b7 2b       	or	r27, r23
    174c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1750:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1754:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1758:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    175c:	b0 9b       	sbis	0x16, 0	; 22
    175e:	1b c0       	rjmp	.+54     	; 0x1796 <__vector_20+0x98>
    1760:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1764:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1768:	c9 01       	movw	r24, r18
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	09 2e       	mov	r0, r25
    176e:	00 0c       	add	r0, r0
    1770:	aa 0b       	sbc	r26, r26
    1772:	bb 0b       	sbc	r27, r27
    1774:	dc 01       	movw	r26, r24
    1776:	99 27       	eor	r25, r25
    1778:	88 27       	eor	r24, r24
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	84 2b       	or	r24, r20
    1780:	95 2b       	or	r25, r21
    1782:	a6 2b       	or	r26, r22
    1784:	b7 2b       	or	r27, r23
    1786:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    178a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    178e:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1792:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1796:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x1e>
    179a:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x1f>
    179e:	30 97       	sbiw	r30, 0x00	; 0
    17a0:	39 f0       	breq	.+14     	; 0x17b0 <__vector_20+0xb2>
    17a2:	6f e0       	ldi	r22, 0x0F	; 15
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x1e>
    17aa:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x1f>
    17ae:	09 95       	icall
    17b0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <__vector_21>:
    17d6:	1f 92       	push	r1
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	11 24       	eor	r1, r1
    17e0:	2f 93       	push	r18
    17e2:	3f 93       	push	r19
    17e4:	4f 93       	push	r20
    17e6:	5f 93       	push	r21
    17e8:	6f 93       	push	r22
    17ea:	7f 93       	push	r23
    17ec:	8f 93       	push	r24
    17ee:	9f 93       	push	r25
    17f0:	af 93       	push	r26
    17f2:	bf 93       	push	r27
    17f4:	ef 93       	push	r30
    17f6:	ff 93       	push	r31
    17f8:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    17fc:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1800:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1804:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1808:	c9 01       	movw	r24, r18
    180a:	03 2e       	mov	r0, r19
    180c:	00 0c       	add	r0, r0
    180e:	aa 0b       	sbc	r26, r26
    1810:	bb 0b       	sbc	r27, r27
    1812:	dc 01       	movw	r26, r24
    1814:	99 27       	eor	r25, r25
    1816:	88 27       	eor	r24, r24
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	84 2b       	or	r24, r20
    181e:	95 2b       	or	r25, r21
    1820:	a6 2b       	or	r26, r22
    1822:	b7 2b       	or	r27, r23
    1824:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1828:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    182c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1830:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1834:	b0 9b       	sbis	0x16, 0	; 22
    1836:	1b c0       	rjmp	.+54     	; 0x186e <__vector_21+0x98>
    1838:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    183c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1840:	c9 01       	movw	r24, r18
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	09 2e       	mov	r0, r25
    1846:	00 0c       	add	r0, r0
    1848:	aa 0b       	sbc	r26, r26
    184a:	bb 0b       	sbc	r27, r27
    184c:	dc 01       	movw	r26, r24
    184e:	99 27       	eor	r25, r25
    1850:	88 27       	eor	r24, r24
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	84 2b       	or	r24, r20
    1858:	95 2b       	or	r25, r21
    185a:	a6 2b       	or	r26, r22
    185c:	b7 2b       	or	r27, r23
    185e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1862:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1866:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    186a:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    186e:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x20>
    1872:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x21>
    1876:	30 97       	sbiw	r30, 0x00	; 0
    1878:	39 f0       	breq	.+14     	; 0x1888 <__vector_21+0xb2>
    187a:	60 e1       	ldi	r22, 0x10	; 16
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x20>
    1882:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x21>
    1886:	09 95       	icall
    1888:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    188c:	ff 91       	pop	r31
    188e:	ef 91       	pop	r30
    1890:	bf 91       	pop	r27
    1892:	af 91       	pop	r26
    1894:	9f 91       	pop	r25
    1896:	8f 91       	pop	r24
    1898:	7f 91       	pop	r23
    189a:	6f 91       	pop	r22
    189c:	5f 91       	pop	r21
    189e:	4f 91       	pop	r20
    18a0:	3f 91       	pop	r19
    18a2:	2f 91       	pop	r18
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	0f 90       	pop	r0
    18aa:	1f 90       	pop	r1
    18ac:	18 95       	reti

000018ae <__vector_22>:
    18ae:	1f 92       	push	r1
    18b0:	0f 92       	push	r0
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	0f 92       	push	r0
    18b6:	11 24       	eor	r1, r1
    18b8:	2f 93       	push	r18
    18ba:	3f 93       	push	r19
    18bc:	4f 93       	push	r20
    18be:	5f 93       	push	r21
    18c0:	6f 93       	push	r22
    18c2:	7f 93       	push	r23
    18c4:	8f 93       	push	r24
    18c6:	9f 93       	push	r25
    18c8:	af 93       	push	r26
    18ca:	bf 93       	push	r27
    18cc:	ef 93       	push	r30
    18ce:	ff 93       	push	r31
    18d0:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    18d4:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    18d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18e0:	c9 01       	movw	r24, r18
    18e2:	03 2e       	mov	r0, r19
    18e4:	00 0c       	add	r0, r0
    18e6:	aa 0b       	sbc	r26, r26
    18e8:	bb 0b       	sbc	r27, r27
    18ea:	dc 01       	movw	r26, r24
    18ec:	99 27       	eor	r25, r25
    18ee:	88 27       	eor	r24, r24
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	84 2b       	or	r24, r20
    18f6:	95 2b       	or	r25, r21
    18f8:	a6 2b       	or	r26, r22
    18fa:	b7 2b       	or	r27, r23
    18fc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1900:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1904:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1908:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    190c:	b0 9b       	sbis	0x16, 0	; 22
    190e:	1b c0       	rjmp	.+54     	; 0x1946 <__vector_22+0x98>
    1910:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1914:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1918:	c9 01       	movw	r24, r18
    191a:	01 96       	adiw	r24, 0x01	; 1
    191c:	09 2e       	mov	r0, r25
    191e:	00 0c       	add	r0, r0
    1920:	aa 0b       	sbc	r26, r26
    1922:	bb 0b       	sbc	r27, r27
    1924:	dc 01       	movw	r26, r24
    1926:	99 27       	eor	r25, r25
    1928:	88 27       	eor	r24, r24
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	84 2b       	or	r24, r20
    1930:	95 2b       	or	r25, r21
    1932:	a6 2b       	or	r26, r22
    1934:	b7 2b       	or	r27, r23
    1936:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    193a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    193e:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1942:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1946:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x22>
    194a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x23>
    194e:	30 97       	sbiw	r30, 0x00	; 0
    1950:	39 f0       	breq	.+14     	; 0x1960 <__vector_22+0xb2>
    1952:	61 e1       	ldi	r22, 0x11	; 17
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x22>
    195a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x23>
    195e:	09 95       	icall
    1960:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	7f 91       	pop	r23
    1972:	6f 91       	pop	r22
    1974:	5f 91       	pop	r21
    1976:	4f 91       	pop	r20
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	0f 90       	pop	r0
    1982:	1f 90       	pop	r1
    1984:	18 95       	reti

00001986 <enqueueByDeadline>:
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	7b 01       	movw	r14, r22
    1994:	eb 01       	movw	r28, r22
    1996:	a8 81       	ld	r26, Y
    1998:	b9 81       	ldd	r27, Y+1	; 0x01
    199a:	10 97       	sbiw	r26, 0x00	; 0
    199c:	61 f1       	breq	.+88     	; 0x19f6 <enqueueByDeadline+0x70>
    199e:	fc 01       	movw	r30, r24
    19a0:	06 81       	ldd	r16, Z+6	; 0x06
    19a2:	17 81       	ldd	r17, Z+7	; 0x07
    19a4:	20 85       	ldd	r18, Z+8	; 0x08
    19a6:	31 85       	ldd	r19, Z+9	; 0x09
    19a8:	16 96       	adiw	r26, 0x06	; 6
    19aa:	4d 91       	ld	r20, X+
    19ac:	5d 91       	ld	r21, X+
    19ae:	6d 91       	ld	r22, X+
    19b0:	7c 91       	ld	r23, X
    19b2:	19 97       	sbiw	r26, 0x09	; 9
    19b4:	04 17       	cp	r16, r20
    19b6:	15 07       	cpc	r17, r21
    19b8:	26 07       	cpc	r18, r22
    19ba:	37 07       	cpc	r19, r23
    19bc:	14 f4       	brge	.+4      	; 0x19c2 <enqueueByDeadline+0x3c>
    19be:	1b c0       	rjmp	.+54     	; 0x19f6 <enqueueByDeadline+0x70>
    19c0:	df 01       	movw	r26, r30
    19c2:	ed 91       	ld	r30, X+
    19c4:	fc 91       	ld	r31, X
    19c6:	11 97       	sbiw	r26, 0x01	; 1
    19c8:	30 97       	sbiw	r30, 0x00	; 0
    19ca:	49 f0       	breq	.+18     	; 0x19de <enqueueByDeadline+0x58>
    19cc:	46 81       	ldd	r20, Z+6	; 0x06
    19ce:	57 81       	ldd	r21, Z+7	; 0x07
    19d0:	60 85       	ldd	r22, Z+8	; 0x08
    19d2:	71 85       	ldd	r23, Z+9	; 0x09
    19d4:	04 17       	cp	r16, r20
    19d6:	15 07       	cpc	r17, r21
    19d8:	26 07       	cpc	r18, r22
    19da:	37 07       	cpc	r19, r23
    19dc:	8c f7       	brge	.-30     	; 0x19c0 <enqueueByDeadline+0x3a>
    19de:	ec 01       	movw	r28, r24
    19e0:	f9 83       	std	Y+1, r31	; 0x01
    19e2:	e8 83       	st	Y, r30
    19e4:	10 97       	sbiw	r26, 0x00	; 0
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <enqueueByDeadline+0x6a>
    19e8:	f7 01       	movw	r30, r14
    19ea:	91 83       	std	Z+1, r25	; 0x01
    19ec:	80 83       	st	Z, r24
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <enqueueByDeadline+0x78>
    19f0:	8d 93       	st	X+, r24
    19f2:	9c 93       	st	X, r25
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <enqueueByDeadline+0x78>
    19f6:	ec 01       	movw	r28, r24
    19f8:	b9 83       	std	Y+1, r27	; 0x01
    19fa:	a8 83       	st	Y, r26
    19fc:	f5 cf       	rjmp	.-22     	; 0x19e8 <enqueueByDeadline+0x62>
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	ff 90       	pop	r15
    1a08:	ef 90       	pop	r14
    1a0a:	08 95       	ret

00001a0c <enqueueByBaseline>:
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	7b 01       	movw	r14, r22
    1a1a:	eb 01       	movw	r28, r22
    1a1c:	a8 81       	ld	r26, Y
    1a1e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a20:	10 97       	sbiw	r26, 0x00	; 0
    1a22:	61 f1       	breq	.+88     	; 0x1a7c <enqueueByBaseline+0x70>
    1a24:	fc 01       	movw	r30, r24
    1a26:	02 81       	ldd	r16, Z+2	; 0x02
    1a28:	13 81       	ldd	r17, Z+3	; 0x03
    1a2a:	24 81       	ldd	r18, Z+4	; 0x04
    1a2c:	35 81       	ldd	r19, Z+5	; 0x05
    1a2e:	12 96       	adiw	r26, 0x02	; 2
    1a30:	4d 91       	ld	r20, X+
    1a32:	5d 91       	ld	r21, X+
    1a34:	6d 91       	ld	r22, X+
    1a36:	7c 91       	ld	r23, X
    1a38:	15 97       	sbiw	r26, 0x05	; 5
    1a3a:	04 17       	cp	r16, r20
    1a3c:	15 07       	cpc	r17, r21
    1a3e:	26 07       	cpc	r18, r22
    1a40:	37 07       	cpc	r19, r23
    1a42:	14 f4       	brge	.+4      	; 0x1a48 <enqueueByBaseline+0x3c>
    1a44:	1b c0       	rjmp	.+54     	; 0x1a7c <enqueueByBaseline+0x70>
    1a46:	df 01       	movw	r26, r30
    1a48:	ed 91       	ld	r30, X+
    1a4a:	fc 91       	ld	r31, X
    1a4c:	11 97       	sbiw	r26, 0x01	; 1
    1a4e:	30 97       	sbiw	r30, 0x00	; 0
    1a50:	49 f0       	breq	.+18     	; 0x1a64 <enqueueByBaseline+0x58>
    1a52:	42 81       	ldd	r20, Z+2	; 0x02
    1a54:	53 81       	ldd	r21, Z+3	; 0x03
    1a56:	64 81       	ldd	r22, Z+4	; 0x04
    1a58:	75 81       	ldd	r23, Z+5	; 0x05
    1a5a:	04 17       	cp	r16, r20
    1a5c:	15 07       	cpc	r17, r21
    1a5e:	26 07       	cpc	r18, r22
    1a60:	37 07       	cpc	r19, r23
    1a62:	8c f7       	brge	.-30     	; 0x1a46 <enqueueByBaseline+0x3a>
    1a64:	ec 01       	movw	r28, r24
    1a66:	f9 83       	std	Y+1, r31	; 0x01
    1a68:	e8 83       	st	Y, r30
    1a6a:	10 97       	sbiw	r26, 0x00	; 0
    1a6c:	21 f4       	brne	.+8      	; 0x1a76 <enqueueByBaseline+0x6a>
    1a6e:	f7 01       	movw	r30, r14
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
    1a74:	07 c0       	rjmp	.+14     	; 0x1a84 <enqueueByBaseline+0x78>
    1a76:	8d 93       	st	X+, r24
    1a78:	9c 93       	st	X, r25
    1a7a:	04 c0       	rjmp	.+8      	; 0x1a84 <enqueueByBaseline+0x78>
    1a7c:	ec 01       	movw	r28, r24
    1a7e:	b9 83       	std	Y+1, r27	; 0x01
    1a80:	a8 83       	st	Y, r26
    1a82:	f5 cf       	rjmp	.-22     	; 0x1a6e <enqueueByBaseline+0x62>
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	ff 90       	pop	r15
    1a8e:	ef 90       	pop	r14
    1a90:	08 95       	ret

00001a92 <dequeue>:
    1a92:	dc 01       	movw	r26, r24
    1a94:	ed 91       	ld	r30, X+
    1a96:	fc 91       	ld	r31, X
    1a98:	11 97       	sbiw	r26, 0x01	; 1
    1a9a:	30 97       	sbiw	r30, 0x00	; 0
    1a9c:	59 f4       	brne	.+22     	; 0x1ab4 <dequeue+0x22>
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1aa4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1aa8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	83 bf       	out	0x33, r24	; 51
    1ab0:	88 95       	sleep
    1ab2:	fd cf       	rjmp	.-6      	; 0x1aae <dequeue+0x1c>
    1ab4:	20 81       	ld	r18, Z
    1ab6:	31 81       	ldd	r19, Z+1	; 0x01
    1ab8:	2d 93       	st	X+, r18
    1aba:	3c 93       	st	X, r19
    1abc:	cf 01       	movw	r24, r30
    1abe:	08 95       	ret

00001ac0 <__vector_9>:
    1ac0:	1f 92       	push	r1
    1ac2:	0f 92       	push	r0
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	0f 92       	push	r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	2f 93       	push	r18
    1acc:	3f 93       	push	r19
    1ace:	4f 93       	push	r20
    1ad0:	5f 93       	push	r21
    1ad2:	6f 93       	push	r22
    1ad4:	7f 93       	push	r23
    1ad6:	8f 93       	push	r24
    1ad8:	9f 93       	push	r25
    1ada:	ef 93       	push	r30
    1adc:	ff 93       	push	r31
    1ade:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    1ae2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
    1aec:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
    1af0:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <timerQ>
    1af4:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <timerQ+0x1>
    1af8:	30 97       	sbiw	r30, 0x00	; 0
    1afa:	01 f1       	breq	.+64     	; 0x1b3c <__vector_9+0x7c>
    1afc:	42 81       	ldd	r20, Z+2	; 0x02
    1afe:	53 81       	ldd	r21, Z+3	; 0x03
    1b00:	64 81       	ldd	r22, Z+4	; 0x04
    1b02:	75 81       	ldd	r23, Z+5	; 0x05
    1b04:	86 17       	cp	r24, r22
    1b06:	97 07       	cpc	r25, r23
    1b08:	c9 f4       	brne	.+50     	; 0x1b3c <__vector_9+0x7c>
    1b0a:	ca 01       	movw	r24, r20
    1b0c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b10:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b14:	42 1b       	sub	r20, r18
    1b16:	53 0b       	sbc	r21, r19
    1b18:	41 30       	cpi	r20, 0x01	; 1
    1b1a:	51 05       	cpc	r21, r1
    1b1c:	29 f4       	brne	.+10     	; 0x1b28 <__vector_9+0x68>
    1b1e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b22:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1b2c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1b30:	ef e6       	ldi	r30, 0x6F	; 111
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	82 60       	ori	r24, 0x02	; 2
    1b38:	80 83       	st	Z, r24
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <__vector_9+0x86>
    1b3c:	ef e6       	ldi	r30, 0x6F	; 111
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	8d 7f       	andi	r24, 0xFD	; 253
    1b44:	80 83       	st	Z, r24
    1b46:	ff 91       	pop	r31
    1b48:	ef 91       	pop	r30
    1b4a:	9f 91       	pop	r25
    1b4c:	8f 91       	pop	r24
    1b4e:	7f 91       	pop	r23
    1b50:	6f 91       	pop	r22
    1b52:	5f 91       	pop	r21
    1b54:	4f 91       	pop	r20
    1b56:	3f 91       	pop	r19
    1b58:	2f 91       	pop	r18
    1b5a:	0f 90       	pop	r0
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	0f 90       	pop	r0
    1b60:	1f 90       	pop	r1
    1b62:	18 95       	reti

00001b64 <__vector_7>:
    1b64:	1f 92       	push	r1
    1b66:	0f 92       	push	r0
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	0f 92       	push	r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	2f 93       	push	r18
    1b78:	3f 93       	push	r19
    1b7a:	4f 93       	push	r20
    1b7c:	5f 93       	push	r21
    1b7e:	6f 93       	push	r22
    1b80:	7f 93       	push	r23
    1b82:	8f 93       	push	r24
    1b84:	9f 93       	push	r25
    1b86:	af 93       	push	r26
    1b88:	bf 93       	push	r27
    1b8a:	ef 93       	push	r30
    1b8c:	ff 93       	push	r31
    1b8e:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <__data_end>
    1b92:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <__data_end+0x1>
    1b96:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b9a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b9e:	b0 99       	sbic	0x16, 0	; 22
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <__vector_7+0x5c>
    1ba2:	0d 2c       	mov	r0, r13
    1ba4:	00 0c       	add	r0, r0
    1ba6:	ee 08       	sbc	r14, r14
    1ba8:	ff 08       	sbc	r15, r15
    1baa:	d6 01       	movw	r26, r12
    1bac:	99 27       	eor	r25, r25
    1bae:	88 27       	eor	r24, r24
    1bb0:	69 01       	movw	r12, r18
    1bb2:	e1 2c       	mov	r14, r1
    1bb4:	f1 2c       	mov	r15, r1
    1bb6:	c8 2a       	or	r12, r24
    1bb8:	d9 2a       	or	r13, r25
    1bba:	ea 2a       	or	r14, r26
    1bbc:	fb 2a       	or	r15, r27
    1bbe:	15 c0       	rjmp	.+42     	; 0x1bea <__vector_7+0x86>
    1bc0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bc4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	c8 1a       	sub	r12, r24
    1bcc:	d8 0a       	sbc	r13, r24
    1bce:	0d 2c       	mov	r0, r13
    1bd0:	00 0c       	add	r0, r0
    1bd2:	ee 08       	sbc	r14, r14
    1bd4:	ff 08       	sbc	r15, r15
    1bd6:	d6 01       	movw	r26, r12
    1bd8:	99 27       	eor	r25, r25
    1bda:	88 27       	eor	r24, r24
    1bdc:	69 01       	movw	r12, r18
    1bde:	e1 2c       	mov	r14, r1
    1be0:	f1 2c       	mov	r15, r1
    1be2:	c8 2a       	or	r12, r24
    1be4:	d9 2a       	or	r13, r25
    1be6:	ea 2a       	or	r14, r26
    1be8:	fb 2a       	or	r15, r27
    1bea:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <timerQ>
    1bee:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <timerQ+0x1>
    1bf2:	30 97       	sbiw	r30, 0x00	; 0
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <__vector_7+0x94>
    1bf6:	42 c0       	rjmp	.+132    	; 0x1c7c <__vector_7+0x118>
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	a4 81       	ldd	r26, Z+4	; 0x04
    1bfe:	b5 81       	ldd	r27, Z+5	; 0x05
    1c00:	8c 19       	sub	r24, r12
    1c02:	9d 09       	sbc	r25, r13
    1c04:	ae 09       	sbc	r26, r14
    1c06:	bf 09       	sbc	r27, r15
    1c08:	18 16       	cp	r1, r24
    1c0a:	19 06       	cpc	r1, r25
    1c0c:	1a 06       	cpc	r1, r26
    1c0e:	1b 06       	cpc	r1, r27
    1c10:	ec f1       	brlt	.+122    	; 0x1c8c <__vector_7+0x128>
    1c12:	84 e2       	ldi	r24, 0x24	; 36
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <dequeue>
    1c1a:	66 e2       	ldi	r22, 0x26	; 38
    1c1c:	71 e0       	ldi	r23, 0x01	; 1
    1c1e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <enqueueByDeadline>
    1c22:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <timerQ>
    1c26:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <timerQ+0x1>
    1c2a:	30 97       	sbiw	r30, 0x00	; 0
    1c2c:	39 f1       	breq	.+78     	; 0x1c7c <__vector_7+0x118>
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	a4 81       	ldd	r26, Z+4	; 0x04
    1c34:	b5 81       	ldd	r27, Z+5	; 0x05
    1c36:	8c 19       	sub	r24, r12
    1c38:	9d 09       	sbc	r25, r13
    1c3a:	ae 09       	sbc	r26, r14
    1c3c:	bf 09       	sbc	r27, r15
    1c3e:	18 16       	cp	r1, r24
    1c40:	19 06       	cpc	r1, r25
    1c42:	1a 06       	cpc	r1, r26
    1c44:	1b 06       	cpc	r1, r27
    1c46:	2c f7       	brge	.-54     	; 0x1c12 <__vector_7+0xae>
    1c48:	21 c0       	rjmp	.+66     	; 0x1c8c <__vector_7+0x128>
    1c4a:	9c 01       	movw	r18, r24
    1c4c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c50:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c54:	84 1b       	sub	r24, r20
    1c56:	95 0b       	sbc	r25, r21
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	31 f4       	brne	.+12     	; 0x1c68 <__vector_7+0x104>
    1c5c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c60:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c64:	2f 5f       	subi	r18, 0xFF	; 255
    1c66:	3f 4f       	sbci	r19, 0xFF	; 255
    1c68:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c6c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c70:	ef e6       	ldi	r30, 0x6F	; 111
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	82 60       	ori	r24, 0x02	; 2
    1c78:	80 83       	st	Z, r24
    1c7a:	05 c0       	rjmp	.+10     	; 0x1c86 <__vector_7+0x122>
    1c7c:	ef e6       	ldi	r30, 0x6F	; 111
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8d 7f       	andi	r24, 0xFD	; 253
    1c84:	80 83       	st	Z, r24
    1c86:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    1c8a:	0c c0       	rjmp	.+24     	; 0x1ca4 <__vector_7+0x140>
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	a4 81       	ldd	r26, Z+4	; 0x04
    1c92:	b5 81       	ldd	r27, Z+5	; 0x05
    1c94:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    1c98:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1c9c:	2a 17       	cp	r18, r26
    1c9e:	3b 07       	cpc	r19, r27
    1ca0:	69 f7       	brne	.-38     	; 0x1c7c <__vector_7+0x118>
    1ca2:	d3 cf       	rjmp	.-90     	; 0x1c4a <__vector_7+0xe6>
    1ca4:	ff 91       	pop	r31
    1ca6:	ef 91       	pop	r30
    1ca8:	bf 91       	pop	r27
    1caa:	af 91       	pop	r26
    1cac:	9f 91       	pop	r25
    1cae:	8f 91       	pop	r24
    1cb0:	7f 91       	pop	r23
    1cb2:	6f 91       	pop	r22
    1cb4:	5f 91       	pop	r21
    1cb6:	4f 91       	pop	r20
    1cb8:	3f 91       	pop	r19
    1cba:	2f 91       	pop	r18
    1cbc:	ff 90       	pop	r15
    1cbe:	ef 90       	pop	r14
    1cc0:	df 90       	pop	r13
    1cc2:	cf 90       	pop	r12
    1cc4:	0f 90       	pop	r0
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	0f 90       	pop	r0
    1cca:	1f 90       	pop	r1
    1ccc:	18 95       	reti

00001cce <async>:
    1cce:	3f 92       	push	r3
    1cd0:	4f 92       	push	r4
    1cd2:	5f 92       	push	r5
    1cd4:	6f 92       	push	r6
    1cd6:	7f 92       	push	r7
    1cd8:	8f 92       	push	r8
    1cda:	9f 92       	push	r9
    1cdc:	af 92       	push	r10
    1cde:	bf 92       	push	r11
    1ce0:	cf 92       	push	r12
    1ce2:	df 92       	push	r13
    1ce4:	ef 92       	push	r14
    1ce6:	ff 92       	push	r15
    1ce8:	0f 93       	push	r16
    1cea:	1f 93       	push	r17
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	2b 01       	movw	r4, r22
    1cf2:	3c 01       	movw	r6, r24
    1cf4:	49 01       	movw	r8, r18
    1cf6:	5a 01       	movw	r10, r20
    1cf8:	8f b7       	in	r24, 0x3f	; 63
    1cfa:	80 78       	andi	r24, 0x80	; 128
    1cfc:	38 2e       	mov	r3, r24
    1cfe:	f8 94       	cli
    1d00:	86 e0       	ldi	r24, 0x06	; 6
    1d02:	91 e0       	ldi	r25, 0x01	; 1
    1d04:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <dequeue>
    1d08:	ec 01       	movw	r28, r24
    1d0a:	1b 87       	std	Y+11, r17	; 0x0b
    1d0c:	0a 87       	std	Y+10, r16	; 0x0a
    1d0e:	fd 86       	std	Y+13, r15	; 0x0d
    1d10:	ec 86       	std	Y+12, r14	; 0x0c
    1d12:	df 86       	std	Y+15, r13	; 0x0f
    1d14:	ce 86       	std	Y+14, r12	; 0x0e
    1d16:	33 20       	and	r3, r3
    1d18:	61 f0       	breq	.+24     	; 0x1d32 <async+0x64>
    1d1a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1d1e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1d22:	02 80       	ldd	r0, Z+2	; 0x02
    1d24:	f3 81       	ldd	r31, Z+3	; 0x03
    1d26:	e0 2d       	mov	r30, r0
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	a4 81       	ldd	r26, Z+4	; 0x04
    1d2e:	b5 81       	ldd	r27, Z+5	; 0x05
    1d30:	08 c0       	rjmp	.+16     	; 0x1d42 <async+0x74>
    1d32:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <timestamp>
    1d36:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <timestamp+0x1>
    1d3a:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <timestamp+0x2>
    1d3e:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <timestamp+0x3>
    1d42:	48 0e       	add	r4, r24
    1d44:	59 1e       	adc	r5, r25
    1d46:	6a 1e       	adc	r6, r26
    1d48:	7b 1e       	adc	r7, r27
    1d4a:	4a 82       	std	Y+2, r4	; 0x02
    1d4c:	5b 82       	std	Y+3, r5	; 0x03
    1d4e:	6c 82       	std	Y+4, r6	; 0x04
    1d50:	7d 82       	std	Y+5, r7	; 0x05
    1d52:	18 14       	cp	r1, r8
    1d54:	19 04       	cpc	r1, r9
    1d56:	1a 04       	cpc	r1, r10
    1d58:	1b 04       	cpc	r1, r11
    1d5a:	44 f0       	brlt	.+16     	; 0x1d6c <async+0x9e>
    1d5c:	0f 2e       	mov	r0, r31
    1d5e:	88 24       	eor	r8, r8
    1d60:	8a 94       	dec	r8
    1d62:	98 2c       	mov	r9, r8
    1d64:	a8 2c       	mov	r10, r8
    1d66:	ff e7       	ldi	r31, 0x7F	; 127
    1d68:	bf 2e       	mov	r11, r31
    1d6a:	f0 2d       	mov	r31, r0
    1d6c:	84 0c       	add	r8, r4
    1d6e:	95 1c       	adc	r9, r5
    1d70:	a6 1c       	adc	r10, r6
    1d72:	b7 1c       	adc	r11, r7
    1d74:	8e 82       	std	Y+6, r8	; 0x06
    1d76:	9f 82       	std	Y+7, r9	; 0x07
    1d78:	a8 86       	std	Y+8, r10	; 0x08
    1d7a:	b9 86       	std	Y+9, r11	; 0x09
    1d7c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    1d80:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    1d84:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d88:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d8c:	b0 99       	sbic	0x16, 0	; 22
    1d8e:	0e c0       	rjmp	.+28     	; 0x1dac <async+0xde>
    1d90:	09 2e       	mov	r0, r25
    1d92:	00 0c       	add	r0, r0
    1d94:	aa 0b       	sbc	r26, r26
    1d96:	bb 0b       	sbc	r27, r27
    1d98:	dc 01       	movw	r26, r24
    1d9a:	99 27       	eor	r25, r25
    1d9c:	88 27       	eor	r24, r24
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	84 2b       	or	r24, r20
    1da4:	95 2b       	or	r25, r21
    1da6:	a6 2b       	or	r26, r22
    1da8:	b7 2b       	or	r27, r23
    1daa:	13 c0       	rjmp	.+38     	; 0x1dd2 <async+0x104>
    1dac:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1db0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	09 2e       	mov	r0, r25
    1db8:	00 0c       	add	r0, r0
    1dba:	aa 0b       	sbc	r26, r26
    1dbc:	bb 0b       	sbc	r27, r27
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	99 27       	eor	r25, r25
    1dc2:	88 27       	eor	r24, r24
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	84 2b       	or	r24, r20
    1dcc:	95 2b       	or	r25, r21
    1dce:	a6 2b       	or	r26, r22
    1dd0:	b7 2b       	or	r27, r23
    1dd2:	48 1a       	sub	r4, r24
    1dd4:	59 0a       	sbc	r5, r25
    1dd6:	6a 0a       	sbc	r6, r26
    1dd8:	7b 0a       	sbc	r7, r27
    1dda:	14 14       	cp	r1, r4
    1ddc:	15 04       	cpc	r1, r5
    1dde:	16 04       	cpc	r1, r6
    1de0:	17 04       	cpc	r1, r7
    1de2:	ac f5       	brge	.+106    	; 0x1e4e <async+0x180>
    1de4:	64 e2       	ldi	r22, 0x24	; 36
    1de6:	71 e0       	ldi	r23, 0x01	; 1
    1de8:	ce 01       	movw	r24, r28
    1dea:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <enqueueByBaseline>
    1dee:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <timerQ>
    1df2:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <timerQ+0x1>
    1df6:	30 97       	sbiw	r30, 0x00	; 0
    1df8:	21 f1       	breq	.+72     	; 0x1e42 <async+0x174>
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	a4 81       	ldd	r26, Z+4	; 0x04
    1e00:	b5 81       	ldd	r27, Z+5	; 0x05
    1e02:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    1e06:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1e0a:	2a 17       	cp	r18, r26
    1e0c:	3b 07       	cpc	r19, r27
    1e0e:	c9 f4       	brne	.+50     	; 0x1e42 <async+0x174>
    1e10:	9c 01       	movw	r18, r24
    1e12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e1a:	84 1b       	sub	r24, r20
    1e1c:	95 0b       	sbc	r25, r21
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	31 f4       	brne	.+12     	; 0x1e2e <async+0x160>
    1e22:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e26:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e2a:	2f 5f       	subi	r18, 0xFF	; 255
    1e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1e32:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1e36:	ef e6       	ldi	r30, 0x6F	; 111
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	82 60       	ori	r24, 0x02	; 2
    1e3e:	80 83       	st	Z, r24
    1e40:	41 c0       	rjmp	.+130    	; 0x1ec4 <async+0x1f6>
    1e42:	ef e6       	ldi	r30, 0x6F	; 111
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8d 7f       	andi	r24, 0xFD	; 253
    1e4a:	80 83       	st	Z, r24
    1e4c:	3b c0       	rjmp	.+118    	; 0x1ec4 <async+0x1f6>
    1e4e:	66 e2       	ldi	r22, 0x26	; 38
    1e50:	71 e0       	ldi	r23, 0x01	; 1
    1e52:	ce 01       	movw	r24, r28
    1e54:	0e 94 c3 0c 	call	0x1986	; 0x1986 <enqueueByDeadline>
    1e58:	33 20       	and	r3, r3
    1e5a:	b9 f1       	breq	.+110    	; 0x1eca <async+0x1fc>
    1e5c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1e60:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	81 f1       	breq	.+96     	; 0x1ec8 <async+0x1fa>
    1e68:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1e6c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1e70:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <msgQ>
    1e74:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <msgQ+0x1>
    1e78:	02 81       	ldd	r16, Z+2	; 0x02
    1e7a:	13 81       	ldd	r17, Z+3	; 0x03
    1e7c:	d9 01       	movw	r26, r18
    1e7e:	16 96       	adiw	r26, 0x06	; 6
    1e80:	4d 91       	ld	r20, X+
    1e82:	5d 91       	ld	r21, X+
    1e84:	6d 91       	ld	r22, X+
    1e86:	7c 91       	ld	r23, X
    1e88:	19 97       	sbiw	r26, 0x09	; 9
    1e8a:	d8 01       	movw	r26, r16
    1e8c:	16 96       	adiw	r26, 0x06	; 6
    1e8e:	0d 91       	ld	r16, X+
    1e90:	1d 91       	ld	r17, X+
    1e92:	2d 91       	ld	r18, X+
    1e94:	3c 91       	ld	r19, X
    1e96:	19 97       	sbiw	r26, 0x09	; 9
    1e98:	40 1b       	sub	r20, r16
    1e9a:	51 0b       	sbc	r21, r17
    1e9c:	62 0b       	sbc	r22, r18
    1e9e:	73 0b       	sbc	r23, r19
    1ea0:	9a f4       	brpl	.+38     	; 0x1ec8 <async+0x1fa>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	2d 91       	ld	r18, X+
    1ea6:	3c 91       	ld	r19, X
    1ea8:	11 97       	sbiw	r26, 0x01	; 1
    1eaa:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    1eae:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    1eb2:	ed 93       	st	X+, r30
    1eb4:	fc 93       	st	X, r31
    1eb6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    1eba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    1ebe:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <dispatch>
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <async+0x1fa>
    1ec4:	33 20       	and	r3, r3
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <async+0x1fc>
    1ec8:	78 94       	sei
    1eca:	ce 01       	movw	r24, r28
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	1f 91       	pop	r17
    1ed2:	0f 91       	pop	r16
    1ed4:	ff 90       	pop	r15
    1ed6:	ef 90       	pop	r14
    1ed8:	df 90       	pop	r13
    1eda:	cf 90       	pop	r12
    1edc:	bf 90       	pop	r11
    1ede:	af 90       	pop	r10
    1ee0:	9f 90       	pop	r9
    1ee2:	8f 90       	pop	r8
    1ee4:	7f 90       	pop	r7
    1ee6:	6f 90       	pop	r6
    1ee8:	5f 90       	pop	r5
    1eea:	4f 90       	pop	r4
    1eec:	3f 90       	pop	r3
    1eee:	08 95       	ret

00001ef0 <sync>:
    1ef0:	cf 92       	push	r12
    1ef2:	df 92       	push	r13
    1ef4:	ef 92       	push	r14
    1ef6:	ff 92       	push	r15
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	ec 01       	movw	r28, r24
    1f02:	7b 01       	movw	r14, r22
    1f04:	6a 01       	movw	r12, r20
    1f06:	1f b7       	in	r17, 0x3f	; 63
    1f08:	10 78       	andi	r17, 0x80	; 128
    1f0a:	f8 94       	cli
    1f0c:	a8 81       	ld	r26, Y
    1f0e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f10:	10 97       	sbiw	r26, 0x00	; 0
    1f12:	61 f1       	breq	.+88     	; 0x1f6c <sync+0x7c>
    1f14:	14 96       	adiw	r26, 0x04	; 4
    1f16:	ed 91       	ld	r30, X+
    1f18:	fc 91       	ld	r31, X
    1f1a:	15 97       	sbiw	r26, 0x05	; 5
    1f1c:	30 97       	sbiw	r30, 0x00	; 0
    1f1e:	41 f0       	breq	.+16     	; 0x1f30 <sync+0x40>
    1f20:	a0 81       	ld	r26, Z
    1f22:	b1 81       	ldd	r27, Z+1	; 0x01
    1f24:	14 96       	adiw	r26, 0x04	; 4
    1f26:	ed 91       	ld	r30, X+
    1f28:	fc 91       	ld	r31, X
    1f2a:	15 97       	sbiw	r26, 0x05	; 5
    1f2c:	30 97       	sbiw	r30, 0x00	; 0
    1f2e:	c1 f7       	brne	.-16     	; 0x1f20 <sync+0x30>
    1f30:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1f34:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1f38:	2a 17       	cp	r18, r26
    1f3a:	3b 07       	cpc	r19, r27
    1f3c:	21 f0       	breq	.+8      	; 0x1f46 <sync+0x56>
    1f3e:	11 23       	and	r17, r17
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <sync+0x54>
    1f42:	3d c0       	rjmp	.+122    	; 0x1fbe <sync+0xce>
    1f44:	07 c0       	rjmp	.+14     	; 0x1f54 <sync+0x64>
    1f46:	11 23       	and	r17, r17
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <sync+0x5c>
    1f4a:	3c c0       	rjmp	.+120    	; 0x1fc4 <sync+0xd4>
    1f4c:	78 94       	sei
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	9f ef       	ldi	r25, 0xFF	; 255
    1f52:	52 c0       	rjmp	.+164    	; 0x1ff8 <sync+0x108>
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	d1 f1       	breq	.+116    	; 0x1fd0 <sync+0xe0>
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	15 82       	std	Z+5, r1	; 0x05
    1f60:	14 82       	std	Z+4, r1	; 0x04
    1f62:	36 c0       	rjmp	.+108    	; 0x1fd0 <sync+0xe0>
    1f64:	78 94       	sei
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	46 c0       	rjmp	.+140    	; 0x1ff8 <sync+0x108>
    1f6c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1f70:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1f74:	99 83       	std	Y+1, r25	; 0x01
    1f76:	88 83       	st	Y, r24
    1f78:	11 23       	and	r17, r17
    1f7a:	29 f0       	breq	.+10     	; 0x1f86 <sync+0x96>
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <sync+0x96>
    1f84:	78 94       	sei
    1f86:	b6 01       	movw	r22, r12
    1f88:	ce 01       	movw	r24, r28
    1f8a:	f7 01       	movw	r30, r14
    1f8c:	09 95       	icall
    1f8e:	f8 2e       	mov	r15, r24
    1f90:	09 2f       	mov	r16, r25
    1f92:	8f b7       	in	r24, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	19 82       	std	Y+1, r1	; 0x01
    1f98:	18 82       	st	Y, r1
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9e:	82 30       	cpi	r24, 0x02	; 2
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	38 f0       	brcs	.+14     	; 0x1fb2 <sync+0xc2>
    1fa4:	1b 82       	std	Y+3, r1	; 0x03
    1fa6:	1a 82       	std	Y+2, r1	; 0x02
    1fa8:	fc 01       	movw	r30, r24
    1faa:	15 82       	std	Z+5, r1	; 0x05
    1fac:	14 82       	std	Z+4, r1	; 0x04
    1fae:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <dispatch>
    1fb2:	11 23       	and	r17, r17
    1fb4:	51 f0       	breq	.+20     	; 0x1fca <sync+0xda>
    1fb6:	78 94       	sei
    1fb8:	8f 2d       	mov	r24, r15
    1fba:	90 2f       	mov	r25, r16
    1fbc:	1d c0       	rjmp	.+58     	; 0x1ff8 <sync+0x108>
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	9f ef       	ldi	r25, 0xFF	; 255
    1fc2:	1a c0       	rjmp	.+52     	; 0x1ff8 <sync+0x108>
    1fc4:	8f ef       	ldi	r24, 0xFF	; 255
    1fc6:	9f ef       	ldi	r25, 0xFF	; 255
    1fc8:	17 c0       	rjmp	.+46     	; 0x1ff8 <sync+0x108>
    1fca:	8f 2d       	mov	r24, r15
    1fcc:	90 2f       	mov	r25, r16
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <sync+0x108>
    1fd0:	3b 83       	std	Y+3, r19	; 0x03
    1fd2:	2a 83       	std	Y+2, r18	; 0x02
    1fd4:	f9 01       	movw	r30, r18
    1fd6:	d5 83       	std	Z+5, r29	; 0x05
    1fd8:	c4 83       	std	Z+4, r28	; 0x04
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <dispatch>
    1fe0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1fe4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	93 81       	ldd	r25, Z+3	; 0x03
    1fec:	89 2b       	or	r24, r25
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <sync+0x102>
    1ff0:	b9 cf       	rjmp	.-142    	; 0x1f64 <sync+0x74>
    1ff2:	f9 83       	std	Y+1, r31	; 0x01
    1ff4:	e8 83       	st	Y, r30
    1ff6:	c2 cf       	rjmp	.-124    	; 0x1f7c <sync+0x8c>
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	ff 90       	pop	r15
    2002:	ef 90       	pop	r14
    2004:	df 90       	pop	r13
    2006:	cf 90       	pop	r12
    2008:	08 95       	ret

0000200a <run>:
    200a:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
    200e:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_start+0x1>
    2012:	86 e2       	ldi	r24, 0x26	; 38
    2014:	91 e0       	ldi	r25, 0x01	; 1
    2016:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <dequeue>
    201a:	ec 01       	movw	r28, r24
    201c:	d8 01       	movw	r26, r16
    201e:	13 96       	adiw	r26, 0x03	; 3
    2020:	9c 93       	st	X, r25
    2022:	8e 93       	st	-X, r24
    2024:	12 97       	sbiw	r26, 0x02	; 2
    2026:	78 94       	sei
    2028:	4e 85       	ldd	r20, Y+14	; 0x0e
    202a:	5f 85       	ldd	r21, Y+15	; 0x0f
    202c:	6c 85       	ldd	r22, Y+12	; 0x0c
    202e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2030:	8a 85       	ldd	r24, Y+10	; 0x0a
    2032:	9b 85       	ldd	r25, Y+11	; 0x0b
    2034:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <sync>
    2038:	8f b7       	in	r24, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    2040:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    2044:	99 83       	std	Y+1, r25	; 0x01
    2046:	88 83       	st	Y, r24
    2048:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    204c:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    2050:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2054:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    2058:	00 81       	ld	r16, Z
    205a:	11 81       	ldd	r17, Z+1	; 0x01
    205c:	e8 01       	movw	r28, r16
    205e:	2a 81       	ldd	r18, Y+2	; 0x02
    2060:	3b 81       	ldd	r19, Y+3	; 0x03
    2062:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <msgQ>
    2066:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <msgQ+0x1>
    206a:	10 97       	sbiw	r26, 0x00	; 0
    206c:	c1 f0       	breq	.+48     	; 0x209e <run+0x94>
    206e:	21 15       	cp	r18, r1
    2070:	31 05       	cpc	r19, r1
    2072:	59 f2       	breq	.-106    	; 0x200a <run>
    2074:	16 96       	adiw	r26, 0x06	; 6
    2076:	8d 91       	ld	r24, X+
    2078:	9d 91       	ld	r25, X+
    207a:	0d 90       	ld	r0, X+
    207c:	bc 91       	ld	r27, X
    207e:	a0 2d       	mov	r26, r0
    2080:	e9 01       	movw	r28, r18
    2082:	4e 81       	ldd	r20, Y+6	; 0x06
    2084:	5f 81       	ldd	r21, Y+7	; 0x07
    2086:	68 85       	ldd	r22, Y+8	; 0x08
    2088:	79 85       	ldd	r23, Y+9	; 0x09
    208a:	84 1b       	sub	r24, r20
    208c:	95 0b       	sbc	r25, r21
    208e:	a6 0b       	sbc	r26, r22
    2090:	b7 0b       	sbc	r27, r23
    2092:	18 16       	cp	r1, r24
    2094:	19 06       	cpc	r1, r25
    2096:	1a 06       	cpc	r1, r26
    2098:	1b 06       	cpc	r1, r27
    209a:	0c f0       	brlt	.+2      	; 0x209e <run+0x94>
    209c:	b6 cf       	rjmp	.-148    	; 0x200a <run>
    209e:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <activeStack+0x1>
    20a2:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <activeStack>
    20a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    20aa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	80 83       	st	Z, r24
    20b2:	f0 93 05 01 	sts	0x0105, r31	; 0x800105 <threadPool+0x1>
    20b6:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <threadPool>
    20ba:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    20be:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    20c2:	14 96       	adiw	r26, 0x04	; 4
    20c4:	ed 91       	ld	r30, X+
    20c6:	fc 91       	ld	r31, X
    20c8:	15 97       	sbiw	r26, 0x05	; 5
    20ca:	30 97       	sbiw	r30, 0x00	; 0
    20cc:	41 f0       	breq	.+16     	; 0x20de <run+0xd4>
    20ce:	a0 81       	ld	r26, Z
    20d0:	b1 81       	ldd	r27, Z+1	; 0x01
    20d2:	14 96       	adiw	r26, 0x04	; 4
    20d4:	ed 91       	ld	r30, X+
    20d6:	fc 91       	ld	r31, X
    20d8:	15 97       	sbiw	r26, 0x05	; 5
    20da:	30 97       	sbiw	r30, 0x00	; 0
    20dc:	c1 f7       	brne	.-16     	; 0x20ce <run+0xc4>
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <dispatch>
    20e4:	92 cf       	rjmp	.-220    	; 0x200a <run>

000020e6 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    20e6:	42 31       	cpi	r20, 0x12	; 18
    20e8:	b8 f4       	brcc	.+46     	; 0x2118 <install+0x32>
        char status;
        DISABLE(status);
    20ea:	2f b7       	in	r18, 0x3f	; 63
    20ec:	f8 94       	cli
        otable[i] = obj;
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	44 0f       	add	r20, r20
    20f2:	55 1f       	adc	r21, r21
    20f4:	fa 01       	movw	r30, r20
    20f6:	e8 5d       	subi	r30, 0xD8	; 216
    20f8:	fe 4f       	sbci	r31, 0xFE	; 254
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	80 83       	st	Z, r24
        mtable[i] = m;
    20fe:	fa 01       	movw	r30, r20
    2100:	e0 54       	subi	r30, 0x40	; 64
    2102:	fe 4f       	sbci	r31, 0xFE	; 254
    2104:	71 83       	std	Z+1, r23	; 0x01
    2106:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	fc 01       	movw	r30, r24
    210e:	53 83       	std	Z+3, r21	; 0x03
    2110:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2112:	22 23       	and	r18, r18
    2114:	0c f4       	brge	.+2      	; 0x2118 <install+0x32>
    2116:	78 94       	sei
    2118:	08 95       	ret

0000211a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    211a:	8c 01       	movw	r16, r24
    211c:	7b 01       	movw	r14, r22
    211e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2120:	8f b7       	in	r24, 0x3f	; 63
    2122:	f8 94       	cli
    initialize();
    2124:	0e 94 65 04 	call	0x8ca	; 0x8ca <initialize>
    ENABLE(1);
    2128:	78 94       	sei
    if (m != NULL)
    212a:	e1 14       	cp	r14, r1
    212c:	f1 04       	cpc	r15, r1
    212e:	41 f0       	breq	.+16     	; 0x2140 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	a9 01       	movw	r20, r18
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	cb 01       	movw	r24, r22
    213c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <async>
    DISABLE(status);
    2140:	8f b7       	in	r24, 0x3f	; 63
    2142:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2144:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <schedule>
    ENABLE(1);
    2148:	78 94       	sei
    while (1) {
        SLEEP();
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	83 bf       	out	0x33, r24	; 51
    214e:	88 95       	sleep
    2150:	fd cf       	rjmp	.-6      	; 0x214c <tinytimber+0x32>

00002152 <__divmodhi4>:
    2152:	97 fb       	bst	r25, 7
    2154:	07 2e       	mov	r0, r23
    2156:	16 f4       	brtc	.+4      	; 0x215c <__divmodhi4+0xa>
    2158:	00 94       	com	r0
    215a:	07 d0       	rcall	.+14     	; 0x216a <__divmodhi4_neg1>
    215c:	77 fd       	sbrc	r23, 7
    215e:	09 d0       	rcall	.+18     	; 0x2172 <__divmodhi4_neg2>
    2160:	0e 94 bd 10 	call	0x217a	; 0x217a <__udivmodhi4>
    2164:	07 fc       	sbrc	r0, 7
    2166:	05 d0       	rcall	.+10     	; 0x2172 <__divmodhi4_neg2>
    2168:	3e f4       	brtc	.+14     	; 0x2178 <__divmodhi4_exit>

0000216a <__divmodhi4_neg1>:
    216a:	90 95       	com	r25
    216c:	81 95       	neg	r24
    216e:	9f 4f       	sbci	r25, 0xFF	; 255
    2170:	08 95       	ret

00002172 <__divmodhi4_neg2>:
    2172:	70 95       	com	r23
    2174:	61 95       	neg	r22
    2176:	7f 4f       	sbci	r23, 0xFF	; 255

00002178 <__divmodhi4_exit>:
    2178:	08 95       	ret

0000217a <__udivmodhi4>:
    217a:	aa 1b       	sub	r26, r26
    217c:	bb 1b       	sub	r27, r27
    217e:	51 e1       	ldi	r21, 0x11	; 17
    2180:	07 c0       	rjmp	.+14     	; 0x2190 <__udivmodhi4_ep>

00002182 <__udivmodhi4_loop>:
    2182:	aa 1f       	adc	r26, r26
    2184:	bb 1f       	adc	r27, r27
    2186:	a6 17       	cp	r26, r22
    2188:	b7 07       	cpc	r27, r23
    218a:	10 f0       	brcs	.+4      	; 0x2190 <__udivmodhi4_ep>
    218c:	a6 1b       	sub	r26, r22
    218e:	b7 0b       	sbc	r27, r23

00002190 <__udivmodhi4_ep>:
    2190:	88 1f       	adc	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	5a 95       	dec	r21
    2196:	a9 f7       	brne	.-22     	; 0x2182 <__udivmodhi4_loop>
    2198:	80 95       	com	r24
    219a:	90 95       	com	r25
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	08 95       	ret

000021a2 <setjmp>:
    21a2:	dc 01       	movw	r26, r24
    21a4:	2d 92       	st	X+, r2
    21a6:	3d 92       	st	X+, r3
    21a8:	4d 92       	st	X+, r4
    21aa:	5d 92       	st	X+, r5
    21ac:	6d 92       	st	X+, r6
    21ae:	7d 92       	st	X+, r7
    21b0:	8d 92       	st	X+, r8
    21b2:	9d 92       	st	X+, r9
    21b4:	ad 92       	st	X+, r10
    21b6:	bd 92       	st	X+, r11
    21b8:	cd 92       	st	X+, r12
    21ba:	dd 92       	st	X+, r13
    21bc:	ed 92       	st	X+, r14
    21be:	fd 92       	st	X+, r15
    21c0:	0d 93       	st	X+, r16
    21c2:	1d 93       	st	X+, r17
    21c4:	cd 93       	st	X+, r28
    21c6:	dd 93       	st	X+, r29
    21c8:	ff 91       	pop	r31
    21ca:	ef 91       	pop	r30
    21cc:	8d b7       	in	r24, 0x3d	; 61
    21ce:	8d 93       	st	X+, r24
    21d0:	8e b7       	in	r24, 0x3e	; 62
    21d2:	8d 93       	st	X+, r24
    21d4:	8f b7       	in	r24, 0x3f	; 63
    21d6:	8d 93       	st	X+, r24
    21d8:	ed 93       	st	X+, r30
    21da:	fd 93       	st	X+, r31
    21dc:	88 27       	eor	r24, r24
    21de:	99 27       	eor	r25, r25
    21e0:	09 94       	ijmp

000021e2 <longjmp>:
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	91 05       	cpc	r25, r1
    21ea:	81 1d       	adc	r24, r1
    21ec:	2d 90       	ld	r2, X+
    21ee:	3d 90       	ld	r3, X+
    21f0:	4d 90       	ld	r4, X+
    21f2:	5d 90       	ld	r5, X+
    21f4:	6d 90       	ld	r6, X+
    21f6:	7d 90       	ld	r7, X+
    21f8:	8d 90       	ld	r8, X+
    21fa:	9d 90       	ld	r9, X+
    21fc:	ad 90       	ld	r10, X+
    21fe:	bd 90       	ld	r11, X+
    2200:	cd 90       	ld	r12, X+
    2202:	dd 90       	ld	r13, X+
    2204:	ed 90       	ld	r14, X+
    2206:	fd 90       	ld	r15, X+
    2208:	0d 91       	ld	r16, X+
    220a:	1d 91       	ld	r17, X+
    220c:	cd 91       	ld	r28, X+
    220e:	dd 91       	ld	r29, X+
    2210:	ed 91       	ld	r30, X+
    2212:	fd 91       	ld	r31, X+
    2214:	0d 90       	ld	r0, X+
    2216:	f8 94       	cli
    2218:	fe bf       	out	0x3e, r31	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	ed bf       	out	0x3d, r30	; 61
    221e:	ed 91       	ld	r30, X+
    2220:	fd 91       	ld	r31, X+
    2222:	09 94       	ijmp

00002224 <_exit>:
    2224:	f8 94       	cli

00002226 <__stop_program>:
    2226:	ff cf       	rjmp	.-2      	; 0x2226 <__stop_program>


Lab-5-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000002f6  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800116  00800116  000003a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a61  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000899  00000000  00000000  00000eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  0000174a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000290  00000000  00000000  00001f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000021ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 ef       	ldi	r30, 0xF6	; 246
  70:	f2 e0       	ldi	r31, 0x02	; 2
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a6 31       	cpi	r26, 0x16	; 22
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	a6 e1       	ldi	r26, 0x16	; 22
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ac 31       	cpi	r26, 0x1C	; 28
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  92:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
 */ 

#include <avr/io.h>
#include <stdint.h>

void writeChar(char ch, int pos){
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	66 97       	sbiw	r28, 0x16	; 22
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
	if (pos < 0 || pos > 5){
  ae:	66 30       	cpi	r22, 0x06	; 6
  b0:	71 05       	cpc	r23, r1
  b2:	e8 f5       	brcc	.+122    	; 0x12e <writeChar+0x94>

	//Initiate number to print;
	uint16_t num = 0x0;

	//Set SCC table to have the correct SCC values for the numbers 0-9 and a special character
	uint16_t tableSCC[11] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51, 0xC028};
  b4:	96 e1       	ldi	r25, 0x16	; 22
  b6:	e0 e0       	ldi	r30, 0x00	; 0
  b8:	f1 e0       	ldi	r31, 0x01	; 1
  ba:	de 01       	movw	r26, r28
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	01 90       	ld	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	9a 95       	dec	r25
  c4:	e1 f7       	brne	.-8      	; 0xbe <writeChar+0x24>

	//Check if the given character is in the interval 0-9 and set the right number value
	if (ch >= '0' && ch <= '9'){
  c6:	90 ed       	ldi	r25, 0xD0	; 208
  c8:	98 0f       	add	r25, r24
  ca:	9a 30       	cpi	r25, 0x0A	; 10
  cc:	50 f4       	brcc	.+20     	; 0xe2 <writeChar+0x48>
		//Set the corresponding value from the table to the number
		num = tableSCC[ch - '0'];
  ce:	e8 2f       	mov	r30, r24
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	f0 97       	sbiw	r30, 0x30	; 48
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	21 81       	ldd	r18, Z+1	; 0x01
  de:	32 81       	ldd	r19, Z+2	; 0x02
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <writeChar+0x4c>
		} else {
		//Set the special character from the table to the number
		num = tableSCC[10];
  e2:	28 e2       	ldi	r18, 0x28	; 40
  e4:	30 ec       	ldi	r19, 0xC0	; 192
	}

	//Update the LCD address to the given position
	addrLCD += pos >> 1;
  e6:	fb 01       	movw	r30, r22
  e8:	f5 95       	asr	r31
  ea:	e7 95       	ror	r30
  ec:	e4 51       	subi	r30, 0x14	; 20
  ee:	ff 4f       	sbci	r31, 0xFF	; 255

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
  f0:	db 01       	movw	r26, r22
  f2:	a1 70       	andi	r26, 0x01	; 1
  f4:	bb 27       	eor	r27, r27
  f6:	60 ff       	sbrs	r22, 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <writeChar+0x64>
		mask = 0xF0;
		} else {
		mask = 0x0F;
  fa:	6f e0       	ldi	r22, 0x0F	; 15
  fc:	01 c0       	rjmp	.+2      	; 0x100 <writeChar+0x66>
	//Update the LCD address to the given position
	addrLCD += pos >> 1;

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
		mask = 0xF0;
  fe:	60 ef       	ldi	r22, 0xF0	; 240
 100:	af 01       	movw	r20, r30
 102:	4c 5e       	subi	r20, 0xEC	; 236
 104:	5f 4f       	sbci	r21, 0xFF	; 255

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
		//Masking the smallest number to the current nibble
		nibbleNum = num & 0xF;
 106:	82 2f       	mov	r24, r18
 108:	8f 70       	andi	r24, 0x0F	; 15
		//Remove the used nibble
		num = num >> 4;
 10a:	32 95       	swap	r19
 10c:	22 95       	swap	r18
 10e:	2f 70       	andi	r18, 0x0F	; 15
 110:	23 27       	eor	r18, r19
 112:	3f 70       	andi	r19, 0x0F	; 15
 114:	23 27       	eor	r18, r19

		//Shift the nibble to the right position if the pos is odd
		if (pos % 2 != 0){
 116:	10 97       	sbiw	r26, 0x00	; 0
 118:	11 f0       	breq	.+4      	; 0x11e <writeChar+0x84>
			nibbleNum = nibbleNum << 4;
 11a:	82 95       	swap	r24
 11c:	80 7f       	andi	r24, 0xF0	; 240
		}

		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
 11e:	90 81       	ld	r25, Z
 120:	96 23       	and	r25, r22
 122:	89 2b       	or	r24, r25
 124:	80 83       	st	Z, r24

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
 126:	35 96       	adiw	r30, 0x05	; 5
		mask = 0x0F;
	}

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
 128:	4e 17       	cp	r20, r30
 12a:	5f 07       	cpc	r21, r31
 12c:	61 f7       	brne	.-40     	; 0x106 <writeChar+0x6c>
		*addrLCD = (*addrLCD & mask) | nibbleNum;

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
	}
}
 12e:	66 96       	adiw	r28, 0x16	; 22
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <initLCD>:

 void initLCD(void){
	 // LCD
	 CLKPR = 0x80;
 140:	e1 e6       	ldi	r30, 0x61	; 97
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 e8       	ldi	r24, 0x80	; 128
 146:	80 83       	st	Z, r24
	 CLKPR = 0x00;
 148:	10 82       	st	Z, r1
	 
	 //Set drive time to 300 milliseconds and contrast control voltage to 3.35 V
	 LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	 
	 //Set external clock source, 1/3 bias, 1/4 duty cycle, 25 segments
	 LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 150:	87 eb       	ldi	r24, 0xB7	; 183
 152:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>

	 //Set prescaler setting N=16 and clock divide settings D=8
	 LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>

	 //Enable low power waveform, no frame interrupt, no blanking, LCD enable
	 LCDCRA = (1 << LCDAB) | (1 << LCDEN);
 15c:	80 ec       	ldi	r24, 0xC0	; 192
 15e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 162:	08 95       	ret

00000164 <initUSART>:
  #define FOSC 1843200
  #define BAUD 9600
  #define MYUBRR (FOSC/16/BAUD-1)
  
  // set baud rate
	UBRR0H = (unsigned char)(MYUBRR >> 8);
 164:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)MYUBRR;
 168:	8b e0       	ldi	r24, 0x0B	; 11
 16a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	  
	  // Enable receiver and transmitter receive complete interrupt.
	  UCSR0B = (1 << 4 ) | (1 << 3)| (1 << 7) ; // Rxen = 4 and txen = 3 RXCIE = 7
 16e:	88 e9       	ldi	r24, 0x98	; 152
 170:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	  
	  // Set frame format: 8datam 1stop bit , No parity
	  UCSR0C = (1 << 2 )| (1 << 1); // UCSZ1 = 2  UCSZ0 = 1
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 17a:	08 95       	ret

0000017c <printAt>:
 }

void printAt(int pos, int num) {
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	ec 01       	movw	r28, r24
 18a:	7b 01       	movw	r14, r22
	writeChar( (num % 100) / 10 + '0', pos);
 18c:	cb 01       	movw	r24, r22
 18e:	64 e6       	ldi	r22, 0x64	; 100
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	0e 94 0c 01 	call	0x218	; 0x218 <__divmodhi4>
 196:	0a e0       	ldi	r16, 0x0A	; 10
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	b8 01       	movw	r22, r16
 19c:	0e 94 0c 01 	call	0x218	; 0x218 <__divmodhi4>
 1a0:	86 2f       	mov	r24, r22
 1a2:	be 01       	movw	r22, r28
 1a4:	80 5d       	subi	r24, 0xD0	; 208
 1a6:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
	pos++;
	writeChar( num % 10 + '0', pos);
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	c7 01       	movw	r24, r14
 1ae:	b8 01       	movw	r22, r16
 1b0:	0e 94 0c 01 	call	0x218	; 0x218 <__divmodhi4>
 1b4:	be 01       	movw	r22, r28
 1b6:	80 5d       	subi	r24, 0xD0	; 208
 1b8:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	08 95       	ret

000001ca <main>:

int main(void)
{
	initLCD();
 1ca:	0e 94 a0 00 	call	0x140	; 0x140 <initLCD>
	initUSART();
 1ce:	0e 94 b2 00 	call	0x164	; 0x164 <initUSART>
    while (1) 
    {
		uint8_t data = UDR0;
 1d2:	06 ec       	ldi	r16, 0xC6	; 198
 1d4:	10 e0       	ldi	r17, 0x00	; 0
 1d6:	f8 01       	movw	r30, r16
 1d8:	c0 81       	ld	r28, Z
		printAt(4, data);
 1da:	6c 2f       	mov	r22, r28
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 be 00 	call	0x17c	; 0x17c <printAt>
		data = data >> 2;
 1e6:	c6 95       	lsr	r28
 1e8:	c6 95       	lsr	r28
		printAt(2, data);
 1ea:	6c 2f       	mov	r22, r28
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 be 00 	call	0x17c	; 0x17c <printAt>
		data = data >> 2;
		printAt(0, data);
 1f6:	c6 95       	lsr	r28
 1f8:	c6 95       	lsr	r28
 1fa:	6c 2f       	mov	r22, r28
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 be 00 	call	0x17c	; 0x17c <printAt>
		
		char test = getchar();
 206:	0e 94 34 01 	call	0x268	; 0x268 <getchar>
		if (test == 'a'){
 20a:	81 36       	cpi	r24, 0x61	; 97
 20c:	21 f7       	brne	.-56     	; 0x1d6 <main+0xc>
			writeChar('a', 5);
 20e:	65 e0       	ldi	r22, 0x05	; 5
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
 216:	df cf       	rjmp	.-66     	; 0x1d6 <main+0xc>

00000218 <__divmodhi4>:
 218:	97 fb       	bst	r25, 7
 21a:	07 2e       	mov	r0, r23
 21c:	16 f4       	brtc	.+4      	; 0x222 <__divmodhi4+0xa>
 21e:	00 94       	com	r0
 220:	07 d0       	rcall	.+14     	; 0x230 <__divmodhi4_neg1>
 222:	77 fd       	sbrc	r23, 7
 224:	09 d0       	rcall	.+18     	; 0x238 <__divmodhi4_neg2>
 226:	0e 94 20 01 	call	0x240	; 0x240 <__udivmodhi4>
 22a:	07 fc       	sbrc	r0, 7
 22c:	05 d0       	rcall	.+10     	; 0x238 <__divmodhi4_neg2>
 22e:	3e f4       	brtc	.+14     	; 0x23e <__divmodhi4_exit>

00000230 <__divmodhi4_neg1>:
 230:	90 95       	com	r25
 232:	81 95       	neg	r24
 234:	9f 4f       	sbci	r25, 0xFF	; 255
 236:	08 95       	ret

00000238 <__divmodhi4_neg2>:
 238:	70 95       	com	r23
 23a:	61 95       	neg	r22
 23c:	7f 4f       	sbci	r23, 0xFF	; 255

0000023e <__divmodhi4_exit>:
 23e:	08 95       	ret

00000240 <__udivmodhi4>:
 240:	aa 1b       	sub	r26, r26
 242:	bb 1b       	sub	r27, r27
 244:	51 e1       	ldi	r21, 0x11	; 17
 246:	07 c0       	rjmp	.+14     	; 0x256 <__udivmodhi4_ep>

00000248 <__udivmodhi4_loop>:
 248:	aa 1f       	adc	r26, r26
 24a:	bb 1f       	adc	r27, r27
 24c:	a6 17       	cp	r26, r22
 24e:	b7 07       	cpc	r27, r23
 250:	10 f0       	brcs	.+4      	; 0x256 <__udivmodhi4_ep>
 252:	a6 1b       	sub	r26, r22
 254:	b7 0b       	sbc	r27, r23

00000256 <__udivmodhi4_ep>:
 256:	88 1f       	adc	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	5a 95       	dec	r21
 25c:	a9 f7       	brne	.-22     	; 0x248 <__udivmodhi4_loop>
 25e:	80 95       	com	r24
 260:	90 95       	com	r25
 262:	bc 01       	movw	r22, r24
 264:	cd 01       	movw	r24, r26
 266:	08 95       	ret

00000268 <getchar>:
 268:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 26c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 270:	0e 94 3b 01 	call	0x276	; 0x276 <fgetc>
 274:	08 95       	ret

00000276 <fgetc>:
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	ec 01       	movw	r28, r24
 27c:	2b 81       	ldd	r18, Y+3	; 0x03
 27e:	20 ff       	sbrs	r18, 0
 280:	33 c0       	rjmp	.+102    	; 0x2e8 <fgetc+0x72>
 282:	26 ff       	sbrs	r18, 6
 284:	0a c0       	rjmp	.+20     	; 0x29a <fgetc+0x24>
 286:	2f 7b       	andi	r18, 0xBF	; 191
 288:	2b 83       	std	Y+3, r18	; 0x03
 28a:	8e 81       	ldd	r24, Y+6	; 0x06
 28c:	9f 81       	ldd	r25, Y+7	; 0x07
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	9f 83       	std	Y+7, r25	; 0x07
 292:	8e 83       	std	Y+6, r24	; 0x06
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	29 c0       	rjmp	.+82     	; 0x2ec <fgetc+0x76>
 29a:	22 ff       	sbrs	r18, 2
 29c:	0f c0       	rjmp	.+30     	; 0x2bc <fgetc+0x46>
 29e:	e8 81       	ld	r30, Y
 2a0:	f9 81       	ldd	r31, Y+1	; 0x01
 2a2:	80 81       	ld	r24, Z
 2a4:	08 2e       	mov	r0, r24
 2a6:	00 0c       	add	r0, r0
 2a8:	99 0b       	sbc	r25, r25
 2aa:	00 97       	sbiw	r24, 0x00	; 0
 2ac:	19 f4       	brne	.+6      	; 0x2b4 <fgetc+0x3e>
 2ae:	20 62       	ori	r18, 0x20	; 32
 2b0:	2b 83       	std	Y+3, r18	; 0x03
 2b2:	1a c0       	rjmp	.+52     	; 0x2e8 <fgetc+0x72>
 2b4:	31 96       	adiw	r30, 0x01	; 1
 2b6:	f9 83       	std	Y+1, r31	; 0x01
 2b8:	e8 83       	st	Y, r30
 2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <fgetc+0x62>
 2bc:	ea 85       	ldd	r30, Y+10	; 0x0a
 2be:	fb 85       	ldd	r31, Y+11	; 0x0b
 2c0:	09 95       	icall
 2c2:	97 ff       	sbrs	r25, 7
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <fgetc+0x62>
 2c6:	2b 81       	ldd	r18, Y+3	; 0x03
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	11 f0       	breq	.+4      	; 0x2d0 <fgetc+0x5a>
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <fgetc+0x5c>
 2d0:	80 e1       	ldi	r24, 0x10	; 16
 2d2:	82 2b       	or	r24, r18
 2d4:	8b 83       	std	Y+3, r24	; 0x03
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <fgetc+0x72>
 2d8:	2e 81       	ldd	r18, Y+6	; 0x06
 2da:	3f 81       	ldd	r19, Y+7	; 0x07
 2dc:	2f 5f       	subi	r18, 0xFF	; 255
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	3f 83       	std	Y+7, r19	; 0x07
 2e2:	2e 83       	std	Y+6, r18	; 0x06
 2e4:	99 27       	eor	r25, r25
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <fgetc+0x76>
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	9f ef       	ldi	r25, 0xFF	; 255
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>


Alternative-3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000662  000006f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000662  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  0080011c  0080011c  00000712  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000712  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd2  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab4  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000609  00000000  00000000  000022b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000028bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000539  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000081e  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e6       	ldi	r30, 0x62	; 98
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ac 31       	cpi	r26, 0x1C	; 28
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	ac e1       	ldi	r26, 0x1C	; 28
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a1 34       	cpi	r26, 0x41	; 65
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  92:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
}


void blink(int t){
	// Invert leds 
	LCDDR18 ^= 0x1;
  9a:	ee ef       	ldi	r30, 0xFE	; 254
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	90 81       	ld	r25, Z
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <LCDInit>:
int count = -1;

void LCDInit(void){

	//Set drive time to 300 milliseconds and contrast control voltage to 3.35 V
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>

	//Set external clock source, 1/3 bias, 1/4 duty cycle, 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  ae:	87 eb       	ldi	r24, 0xB7	; 183
  b0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

	

	//Set prescaler setting N=16 and clock divide settings D=8
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  b4:	87 e0       	ldi	r24, 0x07	; 7
  b6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>

	

	//Enable low power waveform, no frame interrupt, no blanking, LCD enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
  ba:	80 ec       	ldi	r24, 0xC0	; 192
  bc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	
	// Activate the pull-up register for bit 7
	PORTB = (1<<PB7) | PORTB;
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	08 95       	ret

000000c8 <writeChar>:

}

void writeChar(char ch, int pos){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	66 97       	sbiw	r28, 0x16	; 22
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
	if (pos < 0 || pos > 5){
  dc:	66 30       	cpi	r22, 0x06	; 6
  de:	71 05       	cpc	r23, r1
  e0:	08 f0       	brcs	.+2      	; 0xe4 <writeChar+0x1c>
  e2:	43 c0       	rjmp	.+134    	; 0x16a <writeChar+0xa2>

	//Initiate number to print;
	uint16_t num = 0x0;

	//Set SCC table to have the correct SCC values for the numbers 0-9 and a special character
	uint16_t tableSCC[11] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51, 0xC028};
  e4:	96 e1       	ldi	r25, 0x16	; 22
  e6:	e6 e0       	ldi	r30, 0x06	; 6
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	de 01       	movw	r26, r28
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	01 90       	ld	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	9a 95       	dec	r25
  f4:	e1 f7       	brne	.-8      	; 0xee <writeChar+0x26>

	//Check if the given character is in the interval 0-9 and set the right number value
	if (ch >= '0' && ch <= '9'){
  f6:	90 ed       	ldi	r25, 0xD0	; 208
  f8:	98 0f       	add	r25, r24
  fa:	9a 30       	cpi	r25, 0x0A	; 10
  fc:	70 f4       	brcc	.+28     	; 0x11a <writeChar+0x52>
		//Set the corresponding value from the table to the number
		num = tableSCC[ch - '0'];
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	f0 97       	sbiw	r30, 0x30	; 48
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	8c 0f       	add	r24, r28
 10e:	9d 1f       	adc	r25, r29
 110:	e8 0f       	add	r30, r24
 112:	f9 1f       	adc	r31, r25
 114:	40 81       	ld	r20, Z
 116:	51 81       	ldd	r21, Z+1	; 0x01
 118:	02 c0       	rjmp	.+4      	; 0x11e <writeChar+0x56>
		} else {
		//Set the special character from the table to the number
		num = tableSCC[10];
 11a:	48 e2       	ldi	r20, 0x28	; 40
 11c:	50 ec       	ldi	r21, 0xC0	; 192
	}

	//Update the LCD address to the given position
	addrLCD += pos >> 1;
 11e:	fb 01       	movw	r30, r22
 120:	f5 95       	asr	r31
 122:	e7 95       	ror	r30
 124:	e4 51       	subi	r30, 0x14	; 20
 126:	ff 4f       	sbci	r31, 0xFF	; 255

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
 128:	db 01       	movw	r26, r22
 12a:	a1 70       	andi	r26, 0x01	; 1
 12c:	bb 27       	eor	r27, r27
 12e:	60 fd       	sbrc	r22, 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <writeChar+0x6e>
		mask = 0xF0;
 132:	60 ef       	ldi	r22, 0xF0	; 240
 134:	01 c0       	rjmp	.+2      	; 0x138 <writeChar+0x70>
		} else {
		mask = 0x0F;
 136:	6f e0       	ldi	r22, 0x0F	; 15
	}

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	13 c0       	rjmp	.+38     	; 0x164 <writeChar+0x9c>
		//Masking the smallest number to the current nibble
		nibbleNum = num & 0xF;
 13e:	84 2f       	mov	r24, r20
 140:	8f 70       	andi	r24, 0x0F	; 15
		//Remove the used nibble
		num = num >> 4;
 142:	52 95       	swap	r21
 144:	42 95       	swap	r20
 146:	4f 70       	andi	r20, 0x0F	; 15
 148:	45 27       	eor	r20, r21
 14a:	5f 70       	andi	r21, 0x0F	; 15
 14c:	45 27       	eor	r20, r21

		//Shift the nibble to the right position if the pos is odd
		if (pos % 2 != 0){
 14e:	10 97       	sbiw	r26, 0x00	; 0
 150:	11 f0       	breq	.+4      	; 0x156 <writeChar+0x8e>
			nibbleNum = nibbleNum << 4;
 152:	82 95       	swap	r24
 154:	80 7f       	andi	r24, 0xF0	; 240
		}

		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
 156:	90 81       	ld	r25, Z
 158:	96 23       	and	r25, r22
 15a:	89 2b       	or	r24, r25
 15c:	80 83       	st	Z, r24

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
 15e:	35 96       	adiw	r30, 0x05	; 5
		mask = 0x0F;
	}

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	24 30       	cpi	r18, 0x04	; 4
 166:	31 05       	cpc	r19, r1
 168:	54 f3       	brlt	.-44     	; 0x13e <writeChar+0x76>
		*addrLCD = (*addrLCD & mask) | nibbleNum;

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
	}
}
 16a:	66 96       	adiw	r28, 0x16	; 22
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <is_prime>:

int is_prime(long i){
 17c:	cf 92       	push	r12
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	6b 01       	movw	r12, r22
 18a:	7c 01       	movw	r14, r24
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 18c:	c2 e0       	ldi	r28, 0x02	; 2
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <is_prime+0x28>
		if (i % n == 0){
 192:	c7 01       	movw	r24, r14
 194:	b6 01       	movw	r22, r12
 196:	0e 94 ad 02 	call	0x55a	; 0x55a <__divmodsi4>
 19a:	67 2b       	or	r22, r23
 19c:	68 2b       	or	r22, r24
 19e:	69 2b       	or	r22, r25
 1a0:	71 f0       	breq	.+28     	; 0x1be <is_prime+0x42>
	}
}

int is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 1a2:	21 96       	adiw	r28, 0x01	; 1
 1a4:	9e 01       	movw	r18, r28
 1a6:	0d 2e       	mov	r0, r29
 1a8:	00 0c       	add	r0, r0
 1aa:	44 0b       	sbc	r20, r20
 1ac:	55 0b       	sbc	r21, r21
 1ae:	2c 15       	cp	r18, r12
 1b0:	3d 05       	cpc	r19, r13
 1b2:	4e 05       	cpc	r20, r14
 1b4:	5f 05       	cpc	r21, r15
 1b6:	6c f3       	brlt	.-38     	; 0x192 <is_prime+0x16>
		if (i % n == 0){
			return 0;
		}
	}
	return 1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <is_prime+0x46>

int is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
		if (i % n == 0){
			return 0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 1;
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	08 95       	ret

000001d0 <printAt>:

void printAt(long num, int pos) {
 1d0:	8f 92       	push	r8
 1d2:	9f 92       	push	r9
 1d4:	af 92       	push	r10
 1d6:	bf 92       	push	r11
 1d8:	cf 92       	push	r12
 1da:	df 92       	push	r13
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	4b 01       	movw	r8, r22
 1e6:	5c 01       	movw	r10, r24
 1e8:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 1ea:	24 e6       	ldi	r18, 0x64	; 100
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	0e 94 ad 02 	call	0x55a	; 0x55a <__divmodsi4>
 1f6:	0f 2e       	mov	r0, r31
 1f8:	fa e0       	ldi	r31, 0x0A	; 10
 1fa:	cf 2e       	mov	r12, r31
 1fc:	d1 2c       	mov	r13, r1
 1fe:	e1 2c       	mov	r14, r1
 200:	f1 2c       	mov	r15, r1
 202:	f0 2d       	mov	r31, r0
 204:	a7 01       	movw	r20, r14
 206:	96 01       	movw	r18, r12
 208:	0e 94 ad 02 	call	0x55a	; 0x55a <__divmodsi4>
 20c:	be 01       	movw	r22, r28
 20e:	80 e3       	ldi	r24, 0x30	; 48
 210:	82 0f       	add	r24, r18
 212:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
	pp++;
 216:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
 218:	c5 01       	movw	r24, r10
 21a:	b4 01       	movw	r22, r8
 21c:	a7 01       	movw	r20, r14
 21e:	96 01       	movw	r18, r12
 220:	0e 94 ad 02 	call	0x55a	; 0x55a <__divmodsi4>
 224:	86 2f       	mov	r24, r22
 226:	be 01       	movw	r22, r28
 228:	80 5d       	subi	r24, 0xD0	; 208
 22a:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	df 90       	pop	r13
 238:	cf 90       	pop	r12
 23a:	bf 90       	pop	r11
 23c:	af 90       	pop	r10
 23e:	9f 90       	pop	r9
 240:	8f 90       	pop	r8
 242:	08 95       	ret

00000244 <button>:
			printAt(n, pos);
		}
	}
}

void button(int pos){
 244:	ac 01       	movw	r20, r24
	//Print counter
	count++;
 246:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 24e:	6f 5f       	subi	r22, 0xFF	; 255
 250:	7f 4f       	sbci	r23, 0xFF	; 255
 252:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 256:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	printAt(count, pos);
 25a:	07 2e       	mov	r0, r23
 25c:	00 0c       	add	r0, r0
 25e:	88 0b       	sbc	r24, r24
 260:	99 0b       	sbc	r25, r25
 262:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <printAt>
 266:	08 95       	ret

00000268 <computePrimes>:
	writeChar( num % 10 + '0', pp);
}



void computePrimes(int pos) {
 268:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 26a:	c1 2c       	mov	r12, r1
 26c:	d1 2c       	mov	r13, r1
 26e:	76 01       	movw	r14, r12
 270:	c3 94       	inc	r12
		if (is_prime(n)) {
 272:	c7 01       	movw	r24, r14
 274:	b6 01       	movw	r22, r12
 276:	0e 94 be 00 	call	0x17c	; 0x17c <is_prime>
 27a:	89 2b       	or	r24, r25
 27c:	29 f0       	breq	.+10     	; 0x288 <computePrimes+0x20>
			printAt(n, pos);
 27e:	ae 01       	movw	r20, r28
 280:	c7 01       	movw	r24, r14
 282:	b6 01       	movw	r22, r12
 284:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <printAt>


void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	c8 1a       	sub	r12, r24
 28c:	d8 0a       	sbc	r13, r24
 28e:	e8 0a       	sbc	r14, r24
 290:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 292:	ef cf       	rjmp	.-34     	; 0x272 <computePrimes+0xa>

00000294 <main>:
}


int main(void)
{
	CLKPR = 0x80;  
 294:	e1 e6       	ldi	r30, 0x61	; 97
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	80 83       	st	Z, r24
	CLKPR = 0x00;
 29c:	10 82       	st	Z, r1

	LCDInit();
 29e:	0e 94 54 00 	call	0xa8	; 0xa8 <LCDInit>
	
	spawn(button, 3);
 2a2:	63 e0       	ldi	r22, 0x03	; 3
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	82 e2       	ldi	r24, 0x22	; 34
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <spawn>
	spawn(blink, 0);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	8d e4       	ldi	r24, 0x4D	; 77
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <spawn>
	computePrimes(0);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 34 01 	call	0x268	; 0x268 <computePrimes>

000002c2 <initialize>:

int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++){
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	15 c0       	rjmp	.+42     	; 0x2f2 <initialize+0x30>
        threads[i].next = &threads[i+1];
 2c8:	ac 01       	movw	r20, r24
 2ca:	4f 5f       	subi	r20, 0xFF	; 255
 2cc:	5f 4f       	sbci	r21, 0xFF	; 255
 2ce:	6d e6       	ldi	r22, 0x6D	; 109
 2d0:	64 9f       	mul	r22, r20
 2d2:	90 01       	movw	r18, r0
 2d4:	65 9f       	mul	r22, r21
 2d6:	30 0d       	add	r19, r0
 2d8:	11 24       	eor	r1, r1
 2da:	23 57       	subi	r18, 0x73	; 115
 2dc:	3e 4f       	sbci	r19, 0xFE	; 254
 2de:	68 9f       	mul	r22, r24
 2e0:	f0 01       	movw	r30, r0
 2e2:	69 9f       	mul	r22, r25
 2e4:	f0 0d       	add	r31, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	e3 57       	subi	r30, 0x73	; 115
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	35 83       	std	Z+5, r19	; 0x05
 2ee:	24 83       	std	Z+4, r18	; 0x04

int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++){
 2f0:	ca 01       	movw	r24, r20
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	91 05       	cpc	r25, r1
 2f6:	44 f3       	brlt	.-48     	; 0x2c8 <initialize+0x6>
        threads[i].next = &threads[i+1];
	}
    threads[NTHREADS-1].next = NULL;
 2f8:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <threads+0x14c>
 2fc:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <threads+0x14b>


    initialized = 1;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 308:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	
	// Initialize for butterfly joystick
	EIMSK = (1<<PCIE1) | EIMSK;
 30c:	8d b3       	in	r24, 0x1d	; 29
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 = (1<<PCINT15) | PCMSK1;
 312:	ec e6       	ldi	r30, 0x6C	; 108
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	80 83       	st	Z, r24
	PORTB = (1<<PB0) | PORTB;
 31c:	85 b1       	in	r24, 0x05	; 5
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	85 b9       	out	0x05, r24	; 5
	
	// Initialize for timer 
	
	// Enable timer output compare A interrupts 
	TIMSK1 = (1<<OCIE1A) | TIMSK1;
 322:	ef e6       	ldi	r30, 0x6F	; 111
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	82 60       	ori	r24, 0x02	; 2
 32a:	80 83       	st	Z, r24
	// Turn on OC1A compare match
	TCCR1A = (1<<COM1A0) | (1<<COM1A1) | TCCR1A;
 32c:	e0 e8       	ldi	r30, 0x80	; 128
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	80 6c       	ori	r24, 0xC0	; 192
 334:	80 83       	st	Z, r24
	// Set timer to clear on timer compare (CTC) and timer prescaling factor 1024 
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10) | TCCR1B;
 336:	e1 e8       	ldi	r30, 0x81	; 129
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	8d 60       	ori	r24, 0x0D	; 13
 33e:	80 83       	st	Z, r24
	
	// 20 intervals of 50 ms per second 
	// 1 second = 8 000 000 / 1024 = 7812.5 
	// 1 second divided by 2 intervals = 7812.5/2 = 3906,25 = 0xF42
	OCR1A = 0xF42;	
 340:	82 e4       	ldi	r24, 0x42	; 66
 342:	9f e0       	ldi	r25, 0x0F	; 15
 344:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 348:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCNT1 = 0x0;
 34c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 350:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 354:	08 95       	ret

00000356 <enqueue>:
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 356:	fc 01       	movw	r30, r24
 358:	15 82       	std	Z+5, r1	; 0x05
 35a:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 35c:	fb 01       	movw	r30, r22
 35e:	20 81       	ld	r18, Z
 360:	31 81       	ldd	r19, Z+1	; 0x01
 362:	21 15       	cp	r18, r1
 364:	31 05       	cpc	r19, r1
 366:	19 f4       	brne	.+6      	; 0x36e <enqueue+0x18>
        *queue = p;
 368:	91 83       	std	Z+1, r25	; 0x01
 36a:	80 83       	st	Z, r24
 36c:	08 95       	ret
    } else {
        thread q = *queue;
		p->next = q;
 36e:	fc 01       	movw	r30, r24
 370:	35 83       	std	Z+5, r19	; 0x05
 372:	24 83       	std	Z+4, r18	; 0x04
        *queue = p;
 374:	fb 01       	movw	r30, r22
 376:	91 83       	std	Z+1, r25	; 0x01
 378:	80 83       	st	Z, r24
 37a:	08 95       	ret

0000037c <dequeue>:
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 37c:	dc 01       	movw	r26, r24
 37e:	ed 91       	ld	r30, X+
 380:	fc 91       	ld	r31, X
 382:	11 97       	sbiw	r26, 0x01	; 1
    if (*queue) {
 384:	30 97       	sbiw	r30, 0x00	; 0
 386:	09 f4       	brne	.+2      	; 0x38a <dequeue+0xe>
 388:	ff cf       	rjmp	.-2      	; 0x388 <dequeue+0xc>
        *queue = (*queue)->next;
 38a:	24 81       	ldd	r18, Z+4	; 0x04
 38c:	35 81       	ldd	r19, Z+5	; 0x05
 38e:	2d 93       	st	X+, r18
 390:	3c 93       	st	X, r19
    } else {
        // Empty queue, kernel panic!!!
        while (1) ;  // not much else to do...
    }
    return p;
}
 392:	cf 01       	movw	r24, r30
 394:	08 95       	ret

00000396 <dispatch>:

static void dispatch(thread next) {
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	00 d0       	rcall	.+0      	; 0x39c <dispatch+0x6>
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	9a 83       	std	Y+2, r25	; 0x02
 3a2:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 3a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current>
 3a8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <current+0x1>
 3ac:	06 96       	adiw	r24, 0x06	; 6
 3ae:	0e 94 ee 02 	call	0x5dc	; 0x5dc <setjmp>
 3b2:	89 2b       	or	r24, r25
 3b4:	59 f4       	brne	.+22     	; 0x3cc <dispatch+0x36>
        current = next;
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <current+0x1>
 3be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current>
        longjmp(next->context,1);
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	06 96       	adiw	r24, 0x06	; 6
 3c8:	0e 94 0e 03 	call	0x61c	; 0x61c <longjmp>
    }
}
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <spawn>:

void spawn(void (* function)(int), int arg) {
 3d6:	ef 92       	push	r14
 3d8:	ff 92       	push	r15
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <spawn+0xe>
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	7c 01       	movw	r14, r24
 3ea:	8b 01       	movw	r16, r22
    thread newp;

    DISABLE();
 3ec:	f8 94       	cli
    if (!initialized) initialize();
 3ee:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 3f2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 3f6:	89 2b       	or	r24, r25
 3f8:	11 f4       	brne	.+4      	; 0x3fe <spawn+0x28>
 3fa:	0e 94 61 01 	call	0x2c2	; 0x2c2 <initialize>
	enqueue(current, &readyQ);
 3fe:	6e e1       	ldi	r22, 0x1E	; 30
 400:	71 e0       	ldi	r23, 0x01	; 1
 402:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current>
 406:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <current+0x1>
 40a:	0e 94 ab 01 	call	0x356	; 0x356 <enqueue>

    newp = dequeue(&freeQ);
 40e:	84 e0       	ldi	r24, 0x04	; 4
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 be 01 	call	0x37c	; 0x37c <dequeue>
 416:	9a 83       	std	Y+2, r25	; 0x02
 418:	89 83       	std	Y+1, r24	; 0x01
    newp->function = function;
 41a:	fc 01       	movw	r30, r24
 41c:	f1 82       	std	Z+1, r15	; 0x01
 41e:	e0 82       	st	Z, r14
    newp->arg = arg;
 420:	13 83       	std	Z+3, r17	; 0x03
 422:	02 83       	std	Z+2, r16	; 0x02
    newp->next = NULL;
 424:	15 82       	std	Z+5, r1	; 0x05
 426:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 428:	06 96       	adiw	r24, 0x06	; 6
 42a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <setjmp>
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	e1 f4       	brne	.+56     	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
        ENABLE();
 432:	78 94       	sei
        current->function(current->arg);
 434:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <current>
 438:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <current+0x1>
 43c:	ed 91       	ld	r30, X+
 43e:	fc 91       	ld	r31, X
 440:	11 97       	sbiw	r26, 0x01	; 1
 442:	12 96       	adiw	r26, 0x02	; 2
 444:	8d 91       	ld	r24, X+
 446:	9c 91       	ld	r25, X
 448:	13 97       	sbiw	r26, 0x03	; 3
 44a:	09 95       	icall
        DISABLE();
 44c:	f8 94       	cli
        enqueue(current, &freeQ);
 44e:	64 e0       	ldi	r22, 0x04	; 4
 450:	71 e0       	ldi	r23, 0x01	; 1
 452:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current>
 456:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <current+0x1>
 45a:	0e 94 ab 01 	call	0x356	; 0x356 <enqueue>
        dispatch(dequeue(&readyQ));
 45e:	8e e1       	ldi	r24, 0x1E	; 30
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 be 01 	call	0x37c	; 0x37c <dequeue>
 466:	0e 94 cb 01 	call	0x396	; 0x396 <dispatch>
    }
    SETSTACK(&newp->context, &newp->stack);
 46a:	e9 81       	ldd	r30, Y+1	; 0x01
 46c:	fa 81       	ldd	r31, Y+2	; 0x02
 46e:	36 96       	adiw	r30, 0x06	; 6
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	9a 81       	ldd	r25, Y+2	; 0x02
 474:	87 59       	subi	r24, 0x97	; 151
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	91 8b       	std	Z+17, r25	; 0x11
 47a:	80 8b       	std	Z+16, r24	; 0x10
 47c:	e9 81       	ldd	r30, Y+1	; 0x01
 47e:	fa 81       	ldd	r31, Y+2	; 0x02
 480:	91 8f       	std	Z+25, r25	; 0x19
 482:	80 8f       	std	Z+24, r24	; 0x18

    enqueue(newp, &readyQ);
 484:	6e e1       	ldi	r22, 0x1E	; 30
 486:	71 e0       	ldi	r23, 0x01	; 1
 488:	cf 01       	movw	r24, r30
 48a:	0e 94 ab 01 	call	0x356	; 0x356 <enqueue>
	ENABLE();
 48e:	78 94       	sei
	dispatch(dequeue(&readyQ));
 490:	8e e1       	ldi	r24, 0x1E	; 30
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 be 01 	call	0x37c	; 0x37c <dequeue>
 498:	0e 94 cb 01 	call	0x396	; 0x396 <dispatch>
}
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	08 95       	ret

000004ae <__vector_3>:

ISR(PCINT1_vect){
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
	//Only spawn on the ricing edge
	if (( PINB & 1<<PB0) == 0){
 4d0:	18 99       	sbic	0x03, 0	; 3
 4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <__vector_3+0x36>
		DISABLE();
 4d4:	f8 94       	cli
		
		spawn(button, 3);
 4d6:	63 e0       	ldi	r22, 0x03	; 3
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	82 e2       	ldi	r24, 0x22	; 34
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <spawn>
		
		ENABLE();
 4e2:	78 94       	sei
	}
}
 4e4:	ff 91       	pop	r31
 4e6:	ef 91       	pop	r30
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	7f 91       	pop	r23
 4f2:	6f 91       	pop	r22
 4f4:	5f 91       	pop	r21
 4f6:	4f 91       	pop	r20
 4f8:	3f 91       	pop	r19
 4fa:	2f 91       	pop	r18
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	3f 93       	push	r19
 514:	4f 93       	push	r20
 516:	5f 93       	push	r21
 518:	6f 93       	push	r22
 51a:	7f 93       	push	r23
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
 520:	af 93       	push	r26
 522:	bf 93       	push	r27
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
	DISABLE();
 528:	f8 94       	cli
	//enqueue(current, &readyQ);
	spawn(blink, 20);
 52a:	64 e1       	ldi	r22, 0x14	; 20
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	8d e4       	ldi	r24, 0x4D	; 77
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <spawn>
	//dispatch(dequeue(&readyQ));
	ENABLE();
 536:	78 94       	sei
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <__divmodsi4>:
 55a:	05 2e       	mov	r0, r21
 55c:	97 fb       	bst	r25, 7
 55e:	1e f4       	brtc	.+6      	; 0x566 <__divmodsi4+0xc>
 560:	00 94       	com	r0
 562:	0e 94 c4 02 	call	0x588	; 0x588 <__negsi2>
 566:	57 fd       	sbrc	r21, 7
 568:	07 d0       	rcall	.+14     	; 0x578 <__divmodsi4_neg2>
 56a:	0e 94 cc 02 	call	0x598	; 0x598 <__udivmodsi4>
 56e:	07 fc       	sbrc	r0, 7
 570:	03 d0       	rcall	.+6      	; 0x578 <__divmodsi4_neg2>
 572:	4e f4       	brtc	.+18     	; 0x586 <__divmodsi4_exit>
 574:	0c 94 c4 02 	jmp	0x588	; 0x588 <__negsi2>

00000578 <__divmodsi4_neg2>:
 578:	50 95       	com	r21
 57a:	40 95       	com	r20
 57c:	30 95       	com	r19
 57e:	21 95       	neg	r18
 580:	3f 4f       	sbci	r19, 0xFF	; 255
 582:	4f 4f       	sbci	r20, 0xFF	; 255
 584:	5f 4f       	sbci	r21, 0xFF	; 255

00000586 <__divmodsi4_exit>:
 586:	08 95       	ret

00000588 <__negsi2>:
 588:	90 95       	com	r25
 58a:	80 95       	com	r24
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	8f 4f       	sbci	r24, 0xFF	; 255
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	08 95       	ret

00000598 <__udivmodsi4>:
 598:	a1 e2       	ldi	r26, 0x21	; 33
 59a:	1a 2e       	mov	r1, r26
 59c:	aa 1b       	sub	r26, r26
 59e:	bb 1b       	sub	r27, r27
 5a0:	fd 01       	movw	r30, r26
 5a2:	0d c0       	rjmp	.+26     	; 0x5be <__udivmodsi4_ep>

000005a4 <__udivmodsi4_loop>:
 5a4:	aa 1f       	adc	r26, r26
 5a6:	bb 1f       	adc	r27, r27
 5a8:	ee 1f       	adc	r30, r30
 5aa:	ff 1f       	adc	r31, r31
 5ac:	a2 17       	cp	r26, r18
 5ae:	b3 07       	cpc	r27, r19
 5b0:	e4 07       	cpc	r30, r20
 5b2:	f5 07       	cpc	r31, r21
 5b4:	20 f0       	brcs	.+8      	; 0x5be <__udivmodsi4_ep>
 5b6:	a2 1b       	sub	r26, r18
 5b8:	b3 0b       	sbc	r27, r19
 5ba:	e4 0b       	sbc	r30, r20
 5bc:	f5 0b       	sbc	r31, r21

000005be <__udivmodsi4_ep>:
 5be:	66 1f       	adc	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	1a 94       	dec	r1
 5c8:	69 f7       	brne	.-38     	; 0x5a4 <__udivmodsi4_loop>
 5ca:	60 95       	com	r22
 5cc:	70 95       	com	r23
 5ce:	80 95       	com	r24
 5d0:	90 95       	com	r25
 5d2:	9b 01       	movw	r18, r22
 5d4:	ac 01       	movw	r20, r24
 5d6:	bd 01       	movw	r22, r26
 5d8:	cf 01       	movw	r24, r30
 5da:	08 95       	ret

000005dc <setjmp>:
 5dc:	dc 01       	movw	r26, r24
 5de:	2d 92       	st	X+, r2
 5e0:	3d 92       	st	X+, r3
 5e2:	4d 92       	st	X+, r4
 5e4:	5d 92       	st	X+, r5
 5e6:	6d 92       	st	X+, r6
 5e8:	7d 92       	st	X+, r7
 5ea:	8d 92       	st	X+, r8
 5ec:	9d 92       	st	X+, r9
 5ee:	ad 92       	st	X+, r10
 5f0:	bd 92       	st	X+, r11
 5f2:	cd 92       	st	X+, r12
 5f4:	dd 92       	st	X+, r13
 5f6:	ed 92       	st	X+, r14
 5f8:	fd 92       	st	X+, r15
 5fa:	0d 93       	st	X+, r16
 5fc:	1d 93       	st	X+, r17
 5fe:	cd 93       	st	X+, r28
 600:	dd 93       	st	X+, r29
 602:	ff 91       	pop	r31
 604:	ef 91       	pop	r30
 606:	8d b7       	in	r24, 0x3d	; 61
 608:	8d 93       	st	X+, r24
 60a:	8e b7       	in	r24, 0x3e	; 62
 60c:	8d 93       	st	X+, r24
 60e:	8f b7       	in	r24, 0x3f	; 63
 610:	8d 93       	st	X+, r24
 612:	ed 93       	st	X+, r30
 614:	fd 93       	st	X+, r31
 616:	88 27       	eor	r24, r24
 618:	99 27       	eor	r25, r25
 61a:	09 94       	ijmp

0000061c <longjmp>:
 61c:	dc 01       	movw	r26, r24
 61e:	cb 01       	movw	r24, r22
 620:	81 30       	cpi	r24, 0x01	; 1
 622:	91 05       	cpc	r25, r1
 624:	81 1d       	adc	r24, r1
 626:	2d 90       	ld	r2, X+
 628:	3d 90       	ld	r3, X+
 62a:	4d 90       	ld	r4, X+
 62c:	5d 90       	ld	r5, X+
 62e:	6d 90       	ld	r6, X+
 630:	7d 90       	ld	r7, X+
 632:	8d 90       	ld	r8, X+
 634:	9d 90       	ld	r9, X+
 636:	ad 90       	ld	r10, X+
 638:	bd 90       	ld	r11, X+
 63a:	cd 90       	ld	r12, X+
 63c:	dd 90       	ld	r13, X+
 63e:	ed 90       	ld	r14, X+
 640:	fd 90       	ld	r15, X+
 642:	0d 91       	ld	r16, X+
 644:	1d 91       	ld	r17, X+
 646:	cd 91       	ld	r28, X+
 648:	dd 91       	ld	r29, X+
 64a:	ed 91       	ld	r30, X+
 64c:	fd 91       	ld	r31, X+
 64e:	0d 90       	ld	r0, X+
 650:	f8 94       	cli
 652:	fe bf       	out	0x3e, r31	; 62
 654:	0f be       	out	0x3f, r0	; 63
 656:	ed bf       	out	0x3d, r30	; 61
 658:	ed 91       	ld	r30, X+
 65a:	fd 91       	ld	r31, X+
 65c:	09 94       	ijmp

0000065e <_exit>:
 65e:	f8 94       	cli

00000660 <__stop_program>:
 660:	ff cf       	rjmp	.-2      	; 0x660 <__stop_program>

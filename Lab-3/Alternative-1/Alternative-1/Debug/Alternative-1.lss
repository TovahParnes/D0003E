
Alternative-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000006ba  0000074e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000227  0080011a  0080011a  00000768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000117a  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af3  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a6  00000000  00000000  000024f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056f  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000987  00000000  00000000  00003353  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003cda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea eb       	ldi	r30, 0xBA	; 186
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a1 34       	cpi	r26, 0x41	; 65
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  92:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCDInit>:
#include "tinythreads.h"

void LCDInit(void){

	//Set drive time to 300 milliseconds and contrast control voltage to 3.35 V
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>

	//Set external clock source, 1/3 bias, 1/4 duty cycle, 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  a0:	87 eb       	ldi	r24, 0xB7	; 183
  a2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>

	

	//Set prescaler setting N=16 and clock divide settings D=8
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>

	

	//Enable low power waveform, no frame interrupt, no blanking, LCD enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
  b2:	08 95       	ret

000000b4 <writeChar>:

}

void writeChar(char ch, int pos){
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	66 97       	sbiw	r28, 0x16	; 22
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
	if (pos < 0 || pos > 5){
  c8:	66 30       	cpi	r22, 0x06	; 6
  ca:	71 05       	cpc	r23, r1
  cc:	e8 f5       	brcc	.+122    	; 0x148 <writeChar+0x94>

	//Initiate number to print;
	uint16_t num = 0x0;

	//Set SCC table to have the correct SCC values for the numbers 0-9 and a special character
	uint16_t tableSCC[11] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51, 0xC028};
  ce:	96 e1       	ldi	r25, 0x16	; 22
  d0:	e4 e0       	ldi	r30, 0x04	; 4
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	9a 95       	dec	r25
  de:	e1 f7       	brne	.-8      	; 0xd8 <writeChar+0x24>

	//Check if the given character is in the interval 0-9 and set the right number value
	if (ch >= '0' && ch <= '9'){
  e0:	90 ed       	ldi	r25, 0xD0	; 208
  e2:	98 0f       	add	r25, r24
  e4:	9a 30       	cpi	r25, 0x0A	; 10
  e6:	50 f4       	brcc	.+20     	; 0xfc <writeChar+0x48>
		//Set the corresponding value from the table to the number
		num = tableSCC[ch - '0'];
  e8:	e8 2f       	mov	r30, r24
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	f0 97       	sbiw	r30, 0x30	; 48
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	21 81       	ldd	r18, Z+1	; 0x01
  f8:	32 81       	ldd	r19, Z+2	; 0x02
  fa:	02 c0       	rjmp	.+4      	; 0x100 <writeChar+0x4c>
		} else {
		//Set the special character from the table to the number
		num = tableSCC[10];
  fc:	28 e2       	ldi	r18, 0x28	; 40
  fe:	30 ec       	ldi	r19, 0xC0	; 192
	}

	//Update the LCD address to the given position
	addrLCD += pos >> 1;
 100:	fb 01       	movw	r30, r22
 102:	f5 95       	asr	r31
 104:	e7 95       	ror	r30
 106:	e4 51       	subi	r30, 0x14	; 20
 108:	ff 4f       	sbci	r31, 0xFF	; 255

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
 10a:	db 01       	movw	r26, r22
 10c:	a1 70       	andi	r26, 0x01	; 1
 10e:	bb 27       	eor	r27, r27
 110:	60 ff       	sbrs	r22, 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <writeChar+0x64>
		mask = 0xF0;
		} else {
		mask = 0x0F;
 114:	6f e0       	ldi	r22, 0x0F	; 15
 116:	01 c0       	rjmp	.+2      	; 0x11a <writeChar+0x66>
	//Update the LCD address to the given position
	addrLCD += pos >> 1;

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
		mask = 0xF0;
 118:	60 ef       	ldi	r22, 0xF0	; 240
 11a:	af 01       	movw	r20, r30
 11c:	4c 5e       	subi	r20, 0xEC	; 236
 11e:	5f 4f       	sbci	r21, 0xFF	; 255

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
		//Masking the smallest number to the current nibble
		nibbleNum = num & 0xF;
 120:	82 2f       	mov	r24, r18
 122:	8f 70       	andi	r24, 0x0F	; 15
		//Remove the used nibble
		num = num >> 4;
 124:	32 95       	swap	r19
 126:	22 95       	swap	r18
 128:	2f 70       	andi	r18, 0x0F	; 15
 12a:	23 27       	eor	r18, r19
 12c:	3f 70       	andi	r19, 0x0F	; 15
 12e:	23 27       	eor	r18, r19

		//Shift the nibble to the right position if the pos is odd
		if (pos % 2 != 0){
 130:	10 97       	sbiw	r26, 0x00	; 0
 132:	11 f0       	breq	.+4      	; 0x138 <writeChar+0x84>
			nibbleNum = nibbleNum << 4;
 134:	82 95       	swap	r24
 136:	80 7f       	andi	r24, 0xF0	; 240
		}

		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
 138:	90 81       	ld	r25, Z
 13a:	96 23       	and	r25, r22
 13c:	89 2b       	or	r24, r25
 13e:	80 83       	st	Z, r24

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
 140:	35 96       	adiw	r30, 0x05	; 5
		mask = 0x0F;
	}

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
 142:	4e 17       	cp	r20, r30
 144:	5f 07       	cpc	r21, r31
 146:	61 f7       	brne	.-40     	; 0x120 <writeChar+0x6c>
		*addrLCD = (*addrLCD & mask) | nibbleNum;

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
	}
}
 148:	66 96       	adiw	r28, 0x16	; 22
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <is_prime>:

int is_prime(long i){
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	6b 01       	movw	r12, r22
 168:	7c 01       	movw	r14, r24
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	c8 16       	cp	r12, r24
 16e:	d1 04       	cpc	r13, r1
 170:	e1 04       	cpc	r14, r1
 172:	f1 04       	cpc	r15, r1
 174:	7c f1       	brlt	.+94     	; 0x1d4 <is_prime+0x7a>
		if (i % n == 0){
 176:	d7 01       	movw	r26, r14
 178:	c6 01       	movw	r24, r12
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	99 27       	eor	r25, r25
 17e:	aa 27       	eor	r26, r26
 180:	b0 78       	andi	r27, 0x80	; 128
 182:	bb 23       	and	r27, r27
 184:	54 f4       	brge	.+20     	; 0x19a <is_prime+0x40>
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	a1 09       	sbc	r26, r1
 18a:	b1 09       	sbc	r27, r1
 18c:	8e 6f       	ori	r24, 0xFE	; 254
 18e:	9f 6f       	ori	r25, 0xFF	; 255
 190:	af 6f       	ori	r26, 0xFF	; 255
 192:	bf 6f       	ori	r27, 0xFF	; 255
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	a1 1d       	adc	r26, r1
 198:	b1 1d       	adc	r27, r1
 19a:	89 2b       	or	r24, r25
 19c:	8a 2b       	or	r24, r26
 19e:	8b 2b       	or	r24, r27
 1a0:	e1 f0       	breq	.+56     	; 0x1da <is_prime+0x80>
 1a2:	c2 e0       	ldi	r28, 0x02	; 2
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <is_prime+0x5e>
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__divmodsi4>
 1b0:	67 2b       	or	r22, r23
 1b2:	68 2b       	or	r22, r24
 1b4:	69 2b       	or	r22, r25
 1b6:	a1 f0       	breq	.+40     	; 0x1e0 <is_prime+0x86>
	}
}

int is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	9e 01       	movw	r18, r28
 1bc:	0d 2e       	mov	r0, r29
 1be:	00 0c       	add	r0, r0
 1c0:	44 0b       	sbc	r20, r20
 1c2:	55 0b       	sbc	r21, r21
 1c4:	2c 15       	cp	r18, r12
 1c6:	3d 05       	cpc	r19, r13
 1c8:	4e 05       	cpc	r20, r14
 1ca:	5f 05       	cpc	r21, r15
 1cc:	6c f3       	brlt	.-38     	; 0x1a8 <is_prime+0x4e>
		if (i % n == 0){
			return 0;
		}
	}
	return 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <is_prime+0x8a>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <is_prime+0x8a>

int is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
		if (i % n == 0){
			return 0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <is_prime+0x8a>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 1;
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	08 95       	ret

000001f2 <printAt>:

void printAt(long num, int pos) {
 1f2:	8f 92       	push	r8
 1f4:	9f 92       	push	r9
 1f6:	af 92       	push	r10
 1f8:	bf 92       	push	r11
 1fa:	cf 92       	push	r12
 1fc:	df 92       	push	r13
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	4b 01       	movw	r8, r22
 208:	5c 01       	movw	r10, r24
 20a:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 20c:	24 e6       	ldi	r18, 0x64	; 100
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__divmodsi4>
 218:	0f 2e       	mov	r0, r31
 21a:	fa e0       	ldi	r31, 0x0A	; 10
 21c:	cf 2e       	mov	r12, r31
 21e:	d1 2c       	mov	r13, r1
 220:	e1 2c       	mov	r14, r1
 222:	f1 2c       	mov	r15, r1
 224:	f0 2d       	mov	r31, r0
 226:	a7 01       	movw	r20, r14
 228:	96 01       	movw	r18, r12
 22a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__divmodsi4>
 22e:	be 01       	movw	r22, r28
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	82 0f       	add	r24, r18
 234:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
 238:	21 96       	adiw	r28, 0x01	; 1
 23a:	c5 01       	movw	r24, r10
 23c:	b4 01       	movw	r22, r8
 23e:	a7 01       	movw	r20, r14
 240:	96 01       	movw	r18, r12
 242:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__divmodsi4>
 246:	86 2f       	mov	r24, r22
 248:	be 01       	movw	r22, r28
 24a:	80 5d       	subi	r24, 0xD0	; 208
 24c:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	cf 90       	pop	r12
 25c:	bf 90       	pop	r11
 25e:	af 90       	pop	r10
 260:	9f 90       	pop	r9
 262:	8f 90       	pop	r8
 264:	08 95       	ret

00000266 <computePrimes>:



void computePrimes(int pos) {
 266:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 268:	c1 2c       	mov	r12, r1
 26a:	d1 2c       	mov	r13, r1
 26c:	76 01       	movw	r14, r12
 26e:	c3 94       	inc	r12
		if (is_prime(n)) {
 270:	c7 01       	movw	r24, r14
 272:	b6 01       	movw	r22, r12
 274:	0e 94 ad 00 	call	0x15a	; 0x15a <is_prime>
 278:	89 2b       	or	r24, r25
 27a:	29 f0       	breq	.+10     	; 0x286 <computePrimes+0x20>
			printAt(n, pos);
 27c:	ae 01       	movw	r20, r28
 27e:	c7 01       	movw	r24, r14
 280:	b6 01       	movw	r22, r12
 282:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <printAt>


void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	c8 1a       	sub	r12, r24
 28a:	d8 0a       	sbc	r13, r24
 28c:	e8 0a       	sbc	r14, r24
 28e:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 290:	ef cf       	rjmp	.-34     	; 0x270 <computePrimes+0xa>

00000292 <button>:
}

void button(int pos){
 292:	8c 01       	movw	r16, r24
	// Activate the pull-up register for bit 7
	PORTB = (1<<PB7) | PORTB;
 294:	2f 9a       	sbi	0x05, 7	; 5
	bool down = false;
	long count = 0;
 296:	c1 2c       	mov	r12, r1
 298:	d1 2c       	mov	r13, r1
 29a:	76 01       	movw	r14, r12
	

	while (true){
		down = false;
 29c:	c0 e0       	ldi	r28, 0x00	; 0
		//Loop for the duration that the joystick is pressed down
		while (( PINB & 1<<PB7) == 0){
			//Run only on the first loop of being pressed down
			if(!down){
				down = true;
 29e:	d1 e0       	ldi	r29, 0x01	; 1
	bool down = false;
	long count = 0;
	

	while (true){
		down = false;
 2a0:	8c 2f       	mov	r24, r28
		//Loop for the duration that the joystick is pressed down
		while (( PINB & 1<<PB7) == 0){
 2a2:	0d c0       	rjmp	.+26     	; 0x2be <button+0x2c>
			//Run only on the first loop of being pressed down
			if(!down){
 2a4:	81 11       	cpse	r24, r1
 2a6:	0b c0       	rjmp	.+22     	; 0x2be <button+0x2c>
				down = true;
				
				count++;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	c8 1a       	sub	r12, r24
 2ac:	d8 0a       	sbc	r13, r24
 2ae:	e8 0a       	sbc	r14, r24
 2b0:	f8 0a       	sbc	r15, r24
				printAt(count, pos);
 2b2:	a8 01       	movw	r20, r16
 2b4:	c7 01       	movw	r24, r14
 2b6:	b6 01       	movw	r22, r12
 2b8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <printAt>
		down = false;
		//Loop for the duration that the joystick is pressed down
		while (( PINB & 1<<PB7) == 0){
			//Run only on the first loop of being pressed down
			if(!down){
				down = true;
 2bc:	8d 2f       	mov	r24, r29
	

	while (true){
		down = false;
		//Loop for the duration that the joystick is pressed down
		while (( PINB & 1<<PB7) == 0){
 2be:	1f 9b       	sbis	0x03, 7	; 3
 2c0:	f1 cf       	rjmp	.-30     	; 0x2a4 <button+0x12>
 2c2:	ee cf       	rjmp	.-36     	; 0x2a0 <button+0xe>

000002c4 <blink>:
void blink(void){
	while (true)
	{
		if (blinkCounter >= 20)
		{
			LCDDR18 ^= 0x1;
 2c4:	ce ef       	ldi	r28, 0xFE	; 254
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
 2c8:	11 e0       	ldi	r17, 0x01	; 1


void blink(void){
	while (true)
	{
		if (blinkCounter >= 20)
 2ca:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 2ce:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 2d2:	84 31       	cpi	r24, 0x14	; 20
 2d4:	91 05       	cpc	r25, r1
 2d6:	ec f3       	brlt	.-6      	; 0x2d2 <blink+0xe>
		{
			LCDDR18 ^= 0x1;
 2d8:	88 81       	ld	r24, Y
 2da:	81 27       	eor	r24, r17
 2dc:	88 83       	st	Y, r24
			printAt(12, 0);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	6c e0       	ldi	r22, 0x0C	; 12
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <printAt>
			blinkCounter = 0;
 2ee:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 2f2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
 2f6:	e9 cf       	rjmp	.-46     	; 0x2ca <blink+0x6>

000002f8 <main>:
}


int main(void)
{
	CLKPR = 0x80;  
 2f8:	e1 e6       	ldi	r30, 0x61	; 97
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 e8       	ldi	r24, 0x80	; 128
 2fe:	80 83       	st	Z, r24
	CLKPR = 0x00;
 300:	10 82       	st	Z, r1

	LCDInit();
 302:	0e 94 4d 00 	call	0x9a	; 0x9a <LCDInit>
	spawn(computePrimes, 0);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	83 e3       	ldi	r24, 0x33	; 51
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 c8 01 	call	0x390	; 0x390 <spawn>
	spawn(button, 3);
 312:	63 e0       	ldi	r22, 0x03	; 3
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	89 e4       	ldi	r24, 0x49	; 73
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 c8 01 	call	0x390	; 0x390 <spawn>
	blink();
 31e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <blink>

00000322 <enqueue>:
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 322:	dc 01       	movw	r26, r24
 324:	15 96       	adiw	r26, 0x05	; 5
 326:	1c 92       	st	X, r1
 328:	1e 92       	st	-X, r1
 32a:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 32c:	db 01       	movw	r26, r22
 32e:	ed 91       	ld	r30, X+
 330:	fc 91       	ld	r31, X
 332:	11 97       	sbiw	r26, 0x01	; 1
 334:	30 97       	sbiw	r30, 0x00	; 0
 336:	21 f4       	brne	.+8      	; 0x340 <enqueue+0x1e>
        *queue = p;
 338:	8d 93       	st	X+, r24
 33a:	9c 93       	st	X, r25
 33c:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 33e:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 340:	24 81       	ldd	r18, Z+4	; 0x04
 342:	35 81       	ldd	r19, Z+5	; 0x05
 344:	21 15       	cp	r18, r1
 346:	31 05       	cpc	r19, r1
 348:	d1 f7       	brne	.-12     	; 0x33e <enqueue+0x1c>
            q = q->next;
        q->next = p;
 34a:	95 83       	std	Z+5, r25	; 0x05
 34c:	84 83       	std	Z+4, r24	; 0x04
 34e:	08 95       	ret

00000350 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	00 d0       	rcall	.+0      	; 0x356 <dispatch+0x6>
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	9a 83       	std	Y+2, r25	; 0x02
 35c:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 35e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 362:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 366:	06 96       	adiw	r24, 0x06	; 6
 368:	0e 94 1a 03 	call	0x634	; 0x634 <setjmp>
 36c:	89 2b       	or	r24, r25
 36e:	59 f4       	brne	.+22     	; 0x386 <dispatch+0x36>
        current = next;
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	9a 81       	ldd	r25, Y+2	; 0x02
 374:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 378:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	06 96       	adiw	r24, 0x06	; 6
 382:	0e 94 3a 03 	call	0x674	; 0x674 <longjmp>
    }
}
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <spawn>:

void spawn(void (* function)(int), int arg) {
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	00 d0       	rcall	.+0      	; 0x396 <spawn+0x6>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 39a:	f8 94       	cli
    if (!initialized) initialize();
 39c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <initialized>
 3a0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <initialized+0x1>
 3a4:	23 2b       	or	r18, r19
 3a6:	e1 f5       	brne	.+120    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
int blinkCounter = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++){
        threads[i].next = &threads[i+1];
 3a8:	2a ef       	ldi	r18, 0xFA	; 250
 3aa:	31 e0       	ldi	r19, 0x01	; 1
 3ac:	30 93 92 01 	sts	0x0192, r19	; 0x800192 <threads+0x5>
 3b0:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <threads+0x4>
 3b4:	27 e6       	ldi	r18, 0x67	; 103
 3b6:	32 e0       	ldi	r19, 0x02	; 2
 3b8:	30 93 ff 01 	sts	0x01FF, r19	; 0x8001ff <threads+0x72>
 3bc:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <threads+0x71>
 3c0:	24 ed       	ldi	r18, 0xD4	; 212
 3c2:	32 e0       	ldi	r19, 0x02	; 2
 3c4:	30 93 6c 02 	sts	0x026C, r19	; 0x80026c <threads+0xdf>
 3c8:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <threads+0xde>
	}
    threads[NTHREADS-1].next = NULL;
 3cc:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <threads+0x14c>
 3d0:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <threads+0x14b>


    initialized = 1;
 3d4:	21 e0       	ldi	r18, 0x01	; 1
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <initialized+0x1>
 3dc:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <initialized>
	
	// Initialize for butterfly joystick
	EIMSK = (1<<PCIE1) | EIMSK;
 3e0:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 = (1<<PCINT15) | PCMSK1;
 3e2:	ec e6       	ldi	r30, 0x6C	; 108
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	20 81       	ld	r18, Z
 3e8:	20 68       	ori	r18, 0x80	; 128
 3ea:	20 83       	st	Z, r18
	PORTB = (1<<PB7) | PORTB;
 3ec:	2f 9a       	sbi	0x05, 7	; 5
	
	// Initialize for timer 
	
	// Enable timer output compare A interrupts 
	TIMSK1 = (1<<OCIE1A) | TIMSK1;
 3ee:	ef e6       	ldi	r30, 0x6F	; 111
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	20 81       	ld	r18, Z
 3f4:	22 60       	ori	r18, 0x02	; 2
 3f6:	20 83       	st	Z, r18
	// Turn on OC1A compare match
	TCCR1A = (1<<COM1A0) | (1<<COM1A1) | TCCR1A;
 3f8:	e0 e8       	ldi	r30, 0x80	; 128
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	20 81       	ld	r18, Z
 3fe:	20 6c       	ori	r18, 0xC0	; 192
 400:	20 83       	st	Z, r18
	// Set timer to clear on timer compare (CTC) and timer prescaling factor 1024 
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10) | TCCR1B;
 402:	e1 e8       	ldi	r30, 0x81	; 129
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	20 81       	ld	r18, Z
 408:	2d 60       	ori	r18, 0x0D	; 13
 40a:	20 83       	st	Z, r18
	
	// 20 intervals of 50 ms per second 
	// 1 second = 8 000 000 / 1024 = 7812.5 
	// 1 second divided by 20 intervals = 7812.5/ 20 = 390.625 = 0x187
	OCR1A = 0x187;	
 40c:	27 e8       	ldi	r18, 0x87	; 135
 40e:	31 e0       	ldi	r19, 0x01	; 1
 410:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 414:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCNT1 = 0x0;
 418:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 41c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 420:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 424:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 428:	3a 83       	std	Y+2, r19	; 0x02
 42a:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 42c:	23 2b       	or	r18, r19
 42e:	a9 f0       	breq	.+42     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
        *queue = (*queue)->next;
 430:	e9 81       	ldd	r30, Y+1	; 0x01
 432:	fa 81       	ldd	r31, Y+2	; 0x02
 434:	44 81       	ldd	r20, Z+4	; 0x04
 436:	55 81       	ldd	r21, Z+5	; 0x05
 438:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 43c:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 440:	91 83       	std	Z+1, r25	; 0x01
 442:	80 83       	st	Z, r24
    newp->arg = arg;
 444:	73 83       	std	Z+3, r23	; 0x03
 446:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 448:	15 82       	std	Z+5, r1	; 0x05
 44a:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 44c:	cf 01       	movw	r24, r30
 44e:	06 96       	adiw	r24, 0x06	; 6
 450:	0e 94 1a 03 	call	0x634	; 0x634 <setjmp>
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	49 f5       	brne	.+82     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 458:	01 c0       	rjmp	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
        ENABLE();
 45c:	78 94       	sei
        current->function(current->arg);
 45e:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 462:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 466:	ed 91       	ld	r30, X+
 468:	fc 91       	ld	r31, X
 46a:	11 97       	sbiw	r26, 0x01	; 1
 46c:	12 96       	adiw	r26, 0x02	; 2
 46e:	8d 91       	ld	r24, X+
 470:	9c 91       	ld	r25, X
 472:	13 97       	sbiw	r26, 0x03	; 3
 474:	09 95       	icall
        DISABLE();
 476:	f8 94       	cli
        enqueue(current, &freeQ);
 478:	62 e0       	ldi	r22, 0x02	; 2
 47a:	71 e0       	ldi	r23, 0x01	; 1
 47c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 480:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 484:	0e 94 91 01 	call	0x322	; 0x322 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 488:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 48c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 490:	00 97       	sbiw	r24, 0x00	; 0
 492:	51 f0       	breq	.+20     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
        *queue = (*queue)->next;
 494:	fc 01       	movw	r30, r24
 496:	24 81       	ldd	r18, Z+4	; 0x04
 498:	35 81       	ldd	r19, Z+5	; 0x05
 49a:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 49e:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 4a2:	0e 94 a8 01 	call	0x350	; 0x350 <dispatch>
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
    }
    SETSTACK(&newp->context, &newp->stack);
 4aa:	e9 81       	ldd	r30, Y+1	; 0x01
 4ac:	fa 81       	ldd	r31, Y+2	; 0x02
 4ae:	36 96       	adiw	r30, 0x06	; 6
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	9a 81       	ldd	r25, Y+2	; 0x02
 4b4:	87 59       	subi	r24, 0x97	; 151
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	91 8b       	std	Z+17, r25	; 0x11
 4ba:	80 8b       	std	Z+16, r24	; 0x10
 4bc:	93 8b       	std	Z+19, r25	; 0x13
 4be:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 4c0:	6e e1       	ldi	r22, 0x1E	; 30
 4c2:	71 e0       	ldi	r23, 0x01	; 1
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	9a 81       	ldd	r25, Y+2	; 0x02
 4c8:	0e 94 91 01 	call	0x322	; 0x322 <enqueue>
    ENABLE();
 4cc:	78 94       	sei
}
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <yield>:

void yield(void) {
	DISABLE();
 4d8:	f8 94       	cli
	enqueue(current, &readyQ);
 4da:	6e e1       	ldi	r22, 0x1E	; 30
 4dc:	71 e0       	ldi	r23, 0x01	; 1
 4de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4e6:	0e 94 91 01 	call	0x322	; 0x322 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4ea:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 4ee:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	59 f0       	breq	.+22     	; 0x50c <__stack+0xd>
        *queue = (*queue)->next;
 4f6:	fc 01       	movw	r30, r24
 4f8:	24 81       	ldd	r18, Z+4	; 0x04
 4fa:	35 81       	ldd	r19, Z+5	; 0x05
 4fc:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 500:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 504:	0e 94 a8 01 	call	0x350	; 0x350 <dispatch>
	ENABLE();
 508:	78 94       	sei
}
 50a:	08 95       	ret
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stack+0xd>

0000050e <__vector_3>:

ISR(PCINT1_vect){
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	4f 93       	push	r20
 51e:	5f 93       	push	r21
 520:	6f 93       	push	r22
 522:	7f 93       	push	r23
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
 528:	af 93       	push	r26
 52a:	bf 93       	push	r27
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
	if (!pressed && down){
		yield();
		pressed = true;
	}
	*/
	if (( PINB & 1<<PB7) == 0){
 530:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 532:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <yield>
	}
	
}
 536:	ff 91       	pop	r31
 538:	ef 91       	pop	r30
 53a:	bf 91       	pop	r27
 53c:	af 91       	pop	r26
 53e:	9f 91       	pop	r25
 540:	8f 91       	pop	r24
 542:	7f 91       	pop	r23
 544:	6f 91       	pop	r22
 546:	5f 91       	pop	r21
 548:	4f 91       	pop	r20
 54a:	3f 91       	pop	r19
 54c:	2f 91       	pop	r18
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	2f 93       	push	r18
 564:	3f 93       	push	r19
 566:	4f 93       	push	r20
 568:	5f 93       	push	r21
 56a:	6f 93       	push	r22
 56c:	7f 93       	push	r23
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
 576:	ef 93       	push	r30
 578:	ff 93       	push	r31
	yield();
 57a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <yield>
	blinkCounter++;
 57e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 582:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 58c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
}
 590:	ff 91       	pop	r31
 592:	ef 91       	pop	r30
 594:	bf 91       	pop	r27
 596:	af 91       	pop	r26
 598:	9f 91       	pop	r25
 59a:	8f 91       	pop	r24
 59c:	7f 91       	pop	r23
 59e:	6f 91       	pop	r22
 5a0:	5f 91       	pop	r21
 5a2:	4f 91       	pop	r20
 5a4:	3f 91       	pop	r19
 5a6:	2f 91       	pop	r18
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <__divmodsi4>:
 5b2:	05 2e       	mov	r0, r21
 5b4:	97 fb       	bst	r25, 7
 5b6:	1e f4       	brtc	.+6      	; 0x5be <__divmodsi4+0xc>
 5b8:	00 94       	com	r0
 5ba:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__negsi2>
 5be:	57 fd       	sbrc	r21, 7
 5c0:	07 d0       	rcall	.+14     	; 0x5d0 <__divmodsi4_neg2>
 5c2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__udivmodsi4>
 5c6:	07 fc       	sbrc	r0, 7
 5c8:	03 d0       	rcall	.+6      	; 0x5d0 <__divmodsi4_neg2>
 5ca:	4e f4       	brtc	.+18     	; 0x5de <__divmodsi4_exit>
 5cc:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__negsi2>

000005d0 <__divmodsi4_neg2>:
 5d0:	50 95       	com	r21
 5d2:	40 95       	com	r20
 5d4:	30 95       	com	r19
 5d6:	21 95       	neg	r18
 5d8:	3f 4f       	sbci	r19, 0xFF	; 255
 5da:	4f 4f       	sbci	r20, 0xFF	; 255
 5dc:	5f 4f       	sbci	r21, 0xFF	; 255

000005de <__divmodsi4_exit>:
 5de:	08 95       	ret

000005e0 <__negsi2>:
 5e0:	90 95       	com	r25
 5e2:	80 95       	com	r24
 5e4:	70 95       	com	r23
 5e6:	61 95       	neg	r22
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	08 95       	ret

000005f0 <__udivmodsi4>:
 5f0:	a1 e2       	ldi	r26, 0x21	; 33
 5f2:	1a 2e       	mov	r1, r26
 5f4:	aa 1b       	sub	r26, r26
 5f6:	bb 1b       	sub	r27, r27
 5f8:	fd 01       	movw	r30, r26
 5fa:	0d c0       	rjmp	.+26     	; 0x616 <__udivmodsi4_ep>

000005fc <__udivmodsi4_loop>:
 5fc:	aa 1f       	adc	r26, r26
 5fe:	bb 1f       	adc	r27, r27
 600:	ee 1f       	adc	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	a2 17       	cp	r26, r18
 606:	b3 07       	cpc	r27, r19
 608:	e4 07       	cpc	r30, r20
 60a:	f5 07       	cpc	r31, r21
 60c:	20 f0       	brcs	.+8      	; 0x616 <__udivmodsi4_ep>
 60e:	a2 1b       	sub	r26, r18
 610:	b3 0b       	sbc	r27, r19
 612:	e4 0b       	sbc	r30, r20
 614:	f5 0b       	sbc	r31, r21

00000616 <__udivmodsi4_ep>:
 616:	66 1f       	adc	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	1a 94       	dec	r1
 620:	69 f7       	brne	.-38     	; 0x5fc <__udivmodsi4_loop>
 622:	60 95       	com	r22
 624:	70 95       	com	r23
 626:	80 95       	com	r24
 628:	90 95       	com	r25
 62a:	9b 01       	movw	r18, r22
 62c:	ac 01       	movw	r20, r24
 62e:	bd 01       	movw	r22, r26
 630:	cf 01       	movw	r24, r30
 632:	08 95       	ret

00000634 <setjmp>:
 634:	dc 01       	movw	r26, r24
 636:	2d 92       	st	X+, r2
 638:	3d 92       	st	X+, r3
 63a:	4d 92       	st	X+, r4
 63c:	5d 92       	st	X+, r5
 63e:	6d 92       	st	X+, r6
 640:	7d 92       	st	X+, r7
 642:	8d 92       	st	X+, r8
 644:	9d 92       	st	X+, r9
 646:	ad 92       	st	X+, r10
 648:	bd 92       	st	X+, r11
 64a:	cd 92       	st	X+, r12
 64c:	dd 92       	st	X+, r13
 64e:	ed 92       	st	X+, r14
 650:	fd 92       	st	X+, r15
 652:	0d 93       	st	X+, r16
 654:	1d 93       	st	X+, r17
 656:	cd 93       	st	X+, r28
 658:	dd 93       	st	X+, r29
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	8d b7       	in	r24, 0x3d	; 61
 660:	8d 93       	st	X+, r24
 662:	8e b7       	in	r24, 0x3e	; 62
 664:	8d 93       	st	X+, r24
 666:	8f b7       	in	r24, 0x3f	; 63
 668:	8d 93       	st	X+, r24
 66a:	ed 93       	st	X+, r30
 66c:	fd 93       	st	X+, r31
 66e:	88 27       	eor	r24, r24
 670:	99 27       	eor	r25, r25
 672:	09 94       	ijmp

00000674 <longjmp>:
 674:	dc 01       	movw	r26, r24
 676:	cb 01       	movw	r24, r22
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	91 05       	cpc	r25, r1
 67c:	81 1d       	adc	r24, r1
 67e:	2d 90       	ld	r2, X+
 680:	3d 90       	ld	r3, X+
 682:	4d 90       	ld	r4, X+
 684:	5d 90       	ld	r5, X+
 686:	6d 90       	ld	r6, X+
 688:	7d 90       	ld	r7, X+
 68a:	8d 90       	ld	r8, X+
 68c:	9d 90       	ld	r9, X+
 68e:	ad 90       	ld	r10, X+
 690:	bd 90       	ld	r11, X+
 692:	cd 90       	ld	r12, X+
 694:	dd 90       	ld	r13, X+
 696:	ed 90       	ld	r14, X+
 698:	fd 90       	ld	r15, X+
 69a:	0d 91       	ld	r16, X+
 69c:	1d 91       	ld	r17, X+
 69e:	cd 91       	ld	r28, X+
 6a0:	dd 91       	ld	r29, X+
 6a2:	ed 91       	ld	r30, X+
 6a4:	fd 91       	ld	r31, X+
 6a6:	0d 90       	ld	r0, X+
 6a8:	f8 94       	cli
 6aa:	fe bf       	out	0x3e, r31	; 62
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	ed bf       	out	0x3d, r30	; 61
 6b0:	ed 91       	ld	r30, X+
 6b2:	fd 91       	ld	r31, X+
 6b4:	09 94       	ijmp

000006b6 <_exit>:
 6b6:	f8 94       	cli

000006b8 <__stop_program>:
 6b8:	ff cf       	rjmp	.-2      	; 0x6b8 <__stop_program>

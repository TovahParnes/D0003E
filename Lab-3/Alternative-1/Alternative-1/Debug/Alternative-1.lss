
Alternative-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000752  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  0080011a  0080011a  00000800  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001250  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b52  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006aa  00000000  00000000  000026c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057a  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000903  00000000  00000000  000034f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e5       	ldi	r30, 0x52	; 82
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a5 34       	cpi	r26, 0x45	; 69
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  92:	0c 94 a7 03 	jmp	0x74e	; 0x74e <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCDInit>:
mutex m = MUTEX_INIT;

void LCDInit(void){

	//Set drive time to 300 milliseconds and contrast control voltage to 3.35 V
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>

	//Set external clock source, 1/3 bias, 1/4 duty cycle, 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  a0:	87 eb       	ldi	r24, 0xB7	; 183
  a2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>

	

	//Set prescaler setting N=16 and clock divide settings D=8
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>

	

	//Enable low power waveform, no frame interrupt, no blanking, LCD enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
  b2:	08 95       	ret

000000b4 <writeChar>:

}

void writeChar(char ch, int pos){
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	66 97       	sbiw	r28, 0x16	; 22
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61

	if (pos < 0 || pos > 5){
  c8:	66 30       	cpi	r22, 0x06	; 6
  ca:	71 05       	cpc	r23, r1
  cc:	e8 f5       	brcc	.+122    	; 0x148 <writeChar+0x94>

	//Initiate number to print;
	uint16_t num = 0x0;

	//Set SCC table to have the correct SCC values for the numbers 0-9 and a special character
	uint16_t tableSCC[11] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51, 0xC028};
  ce:	96 e1       	ldi	r25, 0x16	; 22
  d0:	e4 e0       	ldi	r30, 0x04	; 4
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	9a 95       	dec	r25
  de:	e1 f7       	brne	.-8      	; 0xd8 <writeChar+0x24>

	//Check if the given character is in the interval 0-9 and set the right number value
	if (ch >= '0' && ch <= '9'){
  e0:	90 ed       	ldi	r25, 0xD0	; 208
  e2:	98 0f       	add	r25, r24
  e4:	9a 30       	cpi	r25, 0x0A	; 10
  e6:	50 f4       	brcc	.+20     	; 0xfc <writeChar+0x48>
		//Set the corresponding value from the table to the number
		num = tableSCC[ch - '0'];
  e8:	e8 2f       	mov	r30, r24
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	f0 97       	sbiw	r30, 0x30	; 48
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	21 81       	ldd	r18, Z+1	; 0x01
  f8:	32 81       	ldd	r19, Z+2	; 0x02
  fa:	02 c0       	rjmp	.+4      	; 0x100 <writeChar+0x4c>
		} else {
		//Set the special character from the table to the number
		num = tableSCC[10];
  fc:	28 e2       	ldi	r18, 0x28	; 40
  fe:	30 ec       	ldi	r19, 0xC0	; 192
	}

	//Update the LCD address to the given position
	addrLCD += pos >> 1;
 100:	fb 01       	movw	r30, r22
 102:	f5 95       	asr	r31
 104:	e7 95       	ror	r30
 106:	e4 51       	subi	r30, 0x14	; 20
 108:	ff 4f       	sbci	r31, 0xFF	; 255

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
 10a:	db 01       	movw	r26, r22
 10c:	a1 70       	andi	r26, 0x01	; 1
 10e:	bb 27       	eor	r27, r27
 110:	60 ff       	sbrs	r22, 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <writeChar+0x64>
		mask = 0xF0;
		} else {
		mask = 0x0F;
 114:	6f e0       	ldi	r22, 0x0F	; 15
 116:	01 c0       	rjmp	.+2      	; 0x11a <writeChar+0x66>
	//Update the LCD address to the given position
	addrLCD += pos >> 1;

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
		mask = 0xF0;
 118:	60 ef       	ldi	r22, 0xF0	; 240
 11a:	af 01       	movw	r20, r30
 11c:	4c 5e       	subi	r20, 0xEC	; 236
 11e:	5f 4f       	sbci	r21, 0xFF	; 255

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
		//Masking the smallest number to the current nibble
		nibbleNum = num & 0xF;
 120:	82 2f       	mov	r24, r18
 122:	8f 70       	andi	r24, 0x0F	; 15
		//Remove the used nibble
		num = num >> 4;
 124:	32 95       	swap	r19
 126:	22 95       	swap	r18
 128:	2f 70       	andi	r18, 0x0F	; 15
 12a:	23 27       	eor	r18, r19
 12c:	3f 70       	andi	r19, 0x0F	; 15
 12e:	23 27       	eor	r18, r19

		//Shift the nibble to the right position if the pos is odd
		if (pos % 2 != 0){
 130:	10 97       	sbiw	r26, 0x00	; 0
 132:	11 f0       	breq	.+4      	; 0x138 <writeChar+0x84>
			nibbleNum = nibbleNum << 4;
 134:	82 95       	swap	r24
 136:	80 7f       	andi	r24, 0xF0	; 240
		}

		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
 138:	90 81       	ld	r25, Z
 13a:	96 23       	and	r25, r22
 13c:	89 2b       	or	r24, r25
 13e:	80 83       	st	Z, r24

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
 140:	35 96       	adiw	r30, 0x05	; 5
		mask = 0x0F;
	}

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
 142:	4e 17       	cp	r20, r30
 144:	5f 07       	cpc	r21, r31
 146:	61 f7       	brne	.-40     	; 0x120 <writeChar+0x6c>
		*addrLCD = (*addrLCD & mask) | nibbleNum;

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
	}
}
 148:	66 96       	adiw	r28, 0x16	; 22
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <is_prime>:

int is_prime(long i){
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	6b 01       	movw	r12, r22
 168:	7c 01       	movw	r14, r24
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	c8 16       	cp	r12, r24
 16e:	d1 04       	cpc	r13, r1
 170:	e1 04       	cpc	r14, r1
 172:	f1 04       	cpc	r15, r1
 174:	7c f1       	brlt	.+94     	; 0x1d4 <is_prime+0x7a>
		if (i % n == 0){
 176:	d7 01       	movw	r26, r14
 178:	c6 01       	movw	r24, r12
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	99 27       	eor	r25, r25
 17e:	aa 27       	eor	r26, r26
 180:	b0 78       	andi	r27, 0x80	; 128
 182:	bb 23       	and	r27, r27
 184:	54 f4       	brge	.+20     	; 0x19a <is_prime+0x40>
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	a1 09       	sbc	r26, r1
 18a:	b1 09       	sbc	r27, r1
 18c:	8e 6f       	ori	r24, 0xFE	; 254
 18e:	9f 6f       	ori	r25, 0xFF	; 255
 190:	af 6f       	ori	r26, 0xFF	; 255
 192:	bf 6f       	ori	r27, 0xFF	; 255
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	a1 1d       	adc	r26, r1
 198:	b1 1d       	adc	r27, r1
 19a:	89 2b       	or	r24, r25
 19c:	8a 2b       	or	r24, r26
 19e:	8b 2b       	or	r24, r27
 1a0:	e1 f0       	breq	.+56     	; 0x1da <is_prime+0x80>
 1a2:	c2 e0       	ldi	r28, 0x02	; 2
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <is_prime+0x5e>
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	0e 94 25 03 	call	0x64a	; 0x64a <__divmodsi4>
 1b0:	67 2b       	or	r22, r23
 1b2:	68 2b       	or	r22, r24
 1b4:	69 2b       	or	r22, r25
 1b6:	a1 f0       	breq	.+40     	; 0x1e0 <is_prime+0x86>
	}
}

int is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	9e 01       	movw	r18, r28
 1bc:	0d 2e       	mov	r0, r29
 1be:	00 0c       	add	r0, r0
 1c0:	44 0b       	sbc	r20, r20
 1c2:	55 0b       	sbc	r21, r21
 1c4:	2c 15       	cp	r18, r12
 1c6:	3d 05       	cpc	r19, r13
 1c8:	4e 05       	cpc	r20, r14
 1ca:	5f 05       	cpc	r21, r15
 1cc:	6c f3       	brlt	.-38     	; 0x1a8 <is_prime+0x4e>
		if (i % n == 0){
			return 0;
		}
	}
	return 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <is_prime+0x8a>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <is_prime+0x8a>

int is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
		if (i % n == 0){
			return 0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <is_prime+0x8a>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 1;
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	08 95       	ret

000001f2 <printAt>:

void printAt(long num, int pos) {
 1f2:	8f 92       	push	r8
 1f4:	9f 92       	push	r9
 1f6:	af 92       	push	r10
 1f8:	bf 92       	push	r11
 1fa:	cf 92       	push	r12
 1fc:	df 92       	push	r13
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	4b 01       	movw	r8, r22
 208:	5c 01       	movw	r10, r24
 20a:	ea 01       	movw	r28, r20
	lock(&m);
 20c:	8a e1       	ldi	r24, 0x1A	; 26
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lock>
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 214:	c5 01       	movw	r24, r10
 216:	b4 01       	movw	r22, r8
 218:	24 e6       	ldi	r18, 0x64	; 100
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	0e 94 25 03 	call	0x64a	; 0x64a <__divmodsi4>
 224:	0f 2e       	mov	r0, r31
 226:	fa e0       	ldi	r31, 0x0A	; 10
 228:	cf 2e       	mov	r12, r31
 22a:	d1 2c       	mov	r13, r1
 22c:	e1 2c       	mov	r14, r1
 22e:	f1 2c       	mov	r15, r1
 230:	f0 2d       	mov	r31, r0
 232:	a7 01       	movw	r20, r14
 234:	96 01       	movw	r18, r12
 236:	0e 94 25 03 	call	0x64a	; 0x64a <__divmodsi4>
 23a:	be 01       	movw	r22, r28
 23c:	80 e3       	ldi	r24, 0x30	; 48
 23e:	82 0f       	add	r24, r18
 240:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
 244:	21 96       	adiw	r28, 0x01	; 1
 246:	c5 01       	movw	r24, r10
 248:	b4 01       	movw	r22, r8
 24a:	a7 01       	movw	r20, r14
 24c:	96 01       	movw	r18, r12
 24e:	0e 94 25 03 	call	0x64a	; 0x64a <__divmodsi4>
 252:	86 2f       	mov	r24, r22
 254:	be 01       	movw	r22, r28
 256:	80 5d       	subi	r24, 0xD0	; 208
 258:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	unlock(&m);
 25c:	8a e1       	ldi	r24, 0x1A	; 26
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 00 03 	call	0x600	; 0x600 <unlock>
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	df 90       	pop	r13
 26e:	cf 90       	pop	r12
 270:	bf 90       	pop	r11
 272:	af 90       	pop	r10
 274:	9f 90       	pop	r9
 276:	8f 90       	pop	r8
 278:	08 95       	ret

0000027a <computePrimes>:



void computePrimes(int pos) {
 27a:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 27c:	c1 2c       	mov	r12, r1
 27e:	d1 2c       	mov	r13, r1
 280:	76 01       	movw	r14, r12
 282:	c3 94       	inc	r12
		if (is_prime(n)) {
 284:	c7 01       	movw	r24, r14
 286:	b6 01       	movw	r22, r12
 288:	0e 94 ad 00 	call	0x15a	; 0x15a <is_prime>
 28c:	89 2b       	or	r24, r25
 28e:	29 f0       	breq	.+10     	; 0x29a <computePrimes+0x20>
			printAt(n, pos);
 290:	ae 01       	movw	r20, r28
 292:	c7 01       	movw	r24, r14
 294:	b6 01       	movw	r22, r12
 296:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <printAt>


void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	c8 1a       	sub	r12, r24
 29e:	d8 0a       	sbc	r13, r24
 2a0:	e8 0a       	sbc	r14, r24
 2a2:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 2a4:	ef cf       	rjmp	.-34     	; 0x284 <computePrimes+0xa>

000002a6 <button>:
}

void button(int pos){
 2a6:	8c 01       	movw	r16, r24
	// Activate the pull-up register for bit 7
	PORTB = (1<<PB7) | PORTB;
 2a8:	2f 9a       	sbi	0x05, 7	; 5
	bool down = false;
	long count = 0;
 2aa:	c1 2c       	mov	r12, r1
 2ac:	d1 2c       	mov	r13, r1
 2ae:	76 01       	movw	r14, r12
	

	while (true){
		down = false;
 2b0:	c0 e0       	ldi	r28, 0x00	; 0
		//Loop for the duration that the joystick is pressed down
		while (( PINB & 1<<PB7) == 0){
			//Run only on the first loop of being pressed down
			if(!down){
				down = true;
 2b2:	d1 e0       	ldi	r29, 0x01	; 1
	bool down = false;
	long count = 0;
	

	while (true){
		down = false;
 2b4:	8c 2f       	mov	r24, r28
		//Loop for the duration that the joystick is pressed down
		while (( PINB & 1<<PB7) == 0){
 2b6:	0d c0       	rjmp	.+26     	; 0x2d2 <button+0x2c>
			//Run only on the first loop of being pressed down
			if(!down){
 2b8:	81 11       	cpse	r24, r1
 2ba:	0b c0       	rjmp	.+22     	; 0x2d2 <button+0x2c>
				down = true;
				
				count++;
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	c8 1a       	sub	r12, r24
 2c0:	d8 0a       	sbc	r13, r24
 2c2:	e8 0a       	sbc	r14, r24
 2c4:	f8 0a       	sbc	r15, r24
				printAt(count, pos);
 2c6:	a8 01       	movw	r20, r16
 2c8:	c7 01       	movw	r24, r14
 2ca:	b6 01       	movw	r22, r12
 2cc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <printAt>
		down = false;
		//Loop for the duration that the joystick is pressed down
		while (( PINB & 1<<PB7) == 0){
			//Run only on the first loop of being pressed down
			if(!down){
				down = true;
 2d0:	8d 2f       	mov	r24, r29
	

	while (true){
		down = false;
		//Loop for the duration that the joystick is pressed down
		while (( PINB & 1<<PB7) == 0){
 2d2:	1f 9b       	sbis	0x03, 7	; 3
 2d4:	f1 cf       	rjmp	.-30     	; 0x2b8 <button+0x12>
 2d6:	ee cf       	rjmp	.-36     	; 0x2b4 <button+0xe>

000002d8 <blink>:
		}
	}
}


void blink(int counterMax){
 2d8:	ec 01       	movw	r28, r24
	while (true)
	{
		//Only works with this line of code!!!
		printAt(blinkCounter, 9);
		if (blinkCounter >= counterMax){
			LCDDR18 ^= 0x1;
 2da:	0e ef       	ldi	r16, 0xFE	; 254
 2dc:	10 e0       	ldi	r17, 0x00	; 0
 2de:	ff 24       	eor	r15, r15
 2e0:	f3 94       	inc	r15

void blink(int counterMax){
	while (true)
	{
		//Only works with this line of code!!!
		printAt(blinkCounter, 9);
 2e2:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <blinkCounter>
 2e6:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <blinkCounter+0x1>
 2ea:	07 2e       	mov	r0, r23
 2ec:	00 0c       	add	r0, r0
 2ee:	88 0b       	sbc	r24, r24
 2f0:	99 0b       	sbc	r25, r25
 2f2:	49 e0       	ldi	r20, 0x09	; 9
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <printAt>
		if (blinkCounter >= counterMax){
 2fa:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <blinkCounter>
 2fe:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <blinkCounter+0x1>
 302:	8c 17       	cp	r24, r28
 304:	9d 07       	cpc	r25, r29
 306:	6c f3       	brlt	.-38     	; 0x2e2 <blink+0xa>
			LCDDR18 ^= 0x1;
 308:	f8 01       	movw	r30, r16
 30a:	80 81       	ld	r24, Z
 30c:	8f 25       	eor	r24, r15
 30e:	80 83       	st	Z, r24
			printAt(12, 0);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	6c e0       	ldi	r22, 0x0C	; 12
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <printAt>
			blinkCounter = 0;
 320:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <blinkCounter+0x1>
 324:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <blinkCounter>
 328:	dc cf       	rjmp	.-72     	; 0x2e2 <blink+0xa>

0000032a <main>:
}


int main(void)
{
	CLKPR = 0x80;  
 32a:	e1 e6       	ldi	r30, 0x61	; 97
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 e8       	ldi	r24, 0x80	; 128
 330:	80 83       	st	Z, r24
	CLKPR = 0x00;
 332:	10 82       	st	Z, r1

	LCDInit();
 334:	0e 94 4d 00 	call	0x9a	; 0x9a <LCDInit>
	spawn(computePrimes, 0);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	8d e3       	ldi	r24, 0x3D	; 61
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <spawn>
	spawn(button, 3);
 344:	63 e0       	ldi	r22, 0x03	; 3
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	83 e5       	ldi	r24, 0x53	; 83
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <spawn>
	blink(20);
 350:	84 e1       	ldi	r24, 0x14	; 20
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <blink>

00000358 <enqueue>:
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 358:	dc 01       	movw	r26, r24
 35a:	15 96       	adiw	r26, 0x05	; 5
 35c:	1c 92       	st	X, r1
 35e:	1e 92       	st	-X, r1
 360:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 362:	db 01       	movw	r26, r22
 364:	ed 91       	ld	r30, X+
 366:	fc 91       	ld	r31, X
 368:	11 97       	sbiw	r26, 0x01	; 1
 36a:	30 97       	sbiw	r30, 0x00	; 0
 36c:	21 f4       	brne	.+8      	; 0x376 <enqueue+0x1e>
        *queue = p;
 36e:	8d 93       	st	X+, r24
 370:	9c 93       	st	X, r25
 372:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 374:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 376:	24 81       	ldd	r18, Z+4	; 0x04
 378:	35 81       	ldd	r19, Z+5	; 0x05
 37a:	21 15       	cp	r18, r1
 37c:	31 05       	cpc	r19, r1
 37e:	d1 f7       	brne	.-12     	; 0x374 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 380:	95 83       	std	Z+5, r25	; 0x05
 382:	84 83       	std	Z+4, r24	; 0x04
 384:	08 95       	ret

00000386 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	00 d0       	rcall	.+0      	; 0x38c <dispatch+0x6>
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	9a 83       	std	Y+2, r25	; 0x02
 392:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 394:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 398:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 39c:	06 96       	adiw	r24, 0x06	; 6
 39e:	0e 94 66 03 	call	0x6cc	; 0x6cc <setjmp>
 3a2:	89 2b       	or	r24, r25
 3a4:	59 f4       	brne	.+22     	; 0x3bc <dispatch+0x36>
        current = next;
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	9a 81       	ldd	r25, Y+2	; 0x02
 3aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	06 96       	adiw	r24, 0x06	; 6
 3b8:	0e 94 86 03 	call	0x70c	; 0x70c <longjmp>
    }
}
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <spawn>:

void spawn(void (* function)(int), int arg) {
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <spawn+0x6>
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 3d0:	f8 94       	cli
    if (!initialized) initialize();
 3d2:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <initialized>
 3d6:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <initialized+0x1>
 3da:	23 2b       	or	r18, r19
 3dc:	e1 f5       	brne	.+120    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
int blinkCounter = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++){
        threads[i].next = &threads[i+1];
 3de:	2e ef       	ldi	r18, 0xFE	; 254
 3e0:	31 e0       	ldi	r19, 0x01	; 1
 3e2:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <threads+0x5>
 3e6:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <threads+0x4>
 3ea:	2b e6       	ldi	r18, 0x6B	; 107
 3ec:	32 e0       	ldi	r19, 0x02	; 2
 3ee:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <threads+0x72>
 3f2:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <threads+0x71>
 3f6:	28 ed       	ldi	r18, 0xD8	; 216
 3f8:	32 e0       	ldi	r19, 0x02	; 2
 3fa:	30 93 70 02 	sts	0x0270, r19	; 0x800270 <threads+0xdf>
 3fe:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <threads+0xde>
	}
    threads[NTHREADS-1].next = NULL;
 402:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <threads+0x14c>
 406:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <threads+0x14b>


    initialized = 1;
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <initialized+0x1>
 412:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <initialized>
	
	// Initialize for butterfly joystick
	EIMSK = (1<<PCIE1) | EIMSK;
 416:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 = (1<<PCINT15) | PCMSK1;
 418:	ec e6       	ldi	r30, 0x6C	; 108
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	20 81       	ld	r18, Z
 41e:	20 68       	ori	r18, 0x80	; 128
 420:	20 83       	st	Z, r18
	PORTB = (1<<PB7) | PORTB;
 422:	2f 9a       	sbi	0x05, 7	; 5
	
	// Initialize for timer 
	
	// Enable timer output compare A interrupts 
	TIMSK1 = (1<<OCIE1A) | TIMSK1;
 424:	ef e6       	ldi	r30, 0x6F	; 111
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	20 81       	ld	r18, Z
 42a:	22 60       	ori	r18, 0x02	; 2
 42c:	20 83       	st	Z, r18
	// Turn on OC1A compare match
	TCCR1A = (1<<COM1A0) | (1<<COM1A1) | TCCR1A;
 42e:	e0 e8       	ldi	r30, 0x80	; 128
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	20 81       	ld	r18, Z
 434:	20 6c       	ori	r18, 0xC0	; 192
 436:	20 83       	st	Z, r18
	// Set timer to clear on timer compare (CTC) and timer prescaling factor 1024 
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10) | TCCR1B;
 438:	e1 e8       	ldi	r30, 0x81	; 129
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	20 81       	ld	r18, Z
 43e:	2d 60       	ori	r18, 0x0D	; 13
 440:	20 83       	st	Z, r18
	
	// 20 intervals of 50 ms per second 
	// 1 second = 8 000 000 / 1024 = 7812.5 
	// 1 second divided by 20 intervals = 7812.5/ 20 = 390.625 = 0x187
	OCR1A = 0x187;	
 442:	27 e8       	ldi	r18, 0x87	; 135
 444:	31 e0       	ldi	r19, 0x01	; 1
 446:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 44a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCNT1 = 0x0;
 44e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 452:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 456:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 45a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 45e:	3a 83       	std	Y+2, r19	; 0x02
 460:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 462:	23 2b       	or	r18, r19
 464:	a9 f0       	breq	.+42     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        *queue = (*queue)->next;
 466:	e9 81       	ldd	r30, Y+1	; 0x01
 468:	fa 81       	ldd	r31, Y+2	; 0x02
 46a:	44 81       	ldd	r20, Z+4	; 0x04
 46c:	55 81       	ldd	r21, Z+5	; 0x05
 46e:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 472:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 476:	91 83       	std	Z+1, r25	; 0x01
 478:	80 83       	st	Z, r24
    newp->arg = arg;
 47a:	73 83       	std	Z+3, r23	; 0x03
 47c:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 47e:	15 82       	std	Z+5, r1	; 0x05
 480:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 482:	cf 01       	movw	r24, r30
 484:	06 96       	adiw	r24, 0x06	; 6
 486:	0e 94 66 03 	call	0x6cc	; 0x6cc <setjmp>
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	49 f5       	brne	.+82     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 48e:	01 c0       	rjmp	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	ff cf       	rjmp	.-2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        ENABLE();
 492:	78 94       	sei
        current->function(current->arg);
 494:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 498:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 49c:	ed 91       	ld	r30, X+
 49e:	fc 91       	ld	r31, X
 4a0:	11 97       	sbiw	r26, 0x01	; 1
 4a2:	12 96       	adiw	r26, 0x02	; 2
 4a4:	8d 91       	ld	r24, X+
 4a6:	9c 91       	ld	r25, X
 4a8:	13 97       	sbiw	r26, 0x03	; 3
 4aa:	09 95       	icall
        DISABLE();
 4ac:	f8 94       	cli
        enqueue(current, &freeQ);
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	71 e0       	ldi	r23, 0x01	; 1
 4b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4ba:	0e 94 ac 01 	call	0x358	; 0x358 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4c2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	51 f0       	breq	.+20     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
        *queue = (*queue)->next;
 4ca:	fc 01       	movw	r30, r24
 4cc:	24 81       	ldd	r18, Z+4	; 0x04
 4ce:	35 81       	ldd	r19, Z+5	; 0x05
 4d0:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 4d4:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 4d8:	0e 94 c3 01 	call	0x386	; 0x386 <dispatch>
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
    }
    SETSTACK(&newp->context, &newp->stack);
 4e0:	e9 81       	ldd	r30, Y+1	; 0x01
 4e2:	fa 81       	ldd	r31, Y+2	; 0x02
 4e4:	36 96       	adiw	r30, 0x06	; 6
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ea:	87 59       	subi	r24, 0x97	; 151
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	91 8b       	std	Z+17, r25	; 0x11
 4f0:	80 8b       	std	Z+16, r24	; 0x10
 4f2:	93 8b       	std	Z+19, r25	; 0x13
 4f4:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 4f6:	60 e2       	ldi	r22, 0x20	; 32
 4f8:	71 e0       	ldi	r23, 0x01	; 1
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	9a 81       	ldd	r25, Y+2	; 0x02
 4fe:	0e 94 ac 01 	call	0x358	; 0x358 <enqueue>
    ENABLE();
 502:	78 94       	sei
}
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <yield>:

void yield(void) {
	DISABLE();
 50e:	f8 94       	cli
	enqueue(current, &readyQ);
 510:	60 e2       	ldi	r22, 0x20	; 32
 512:	71 e0       	ldi	r23, 0x01	; 1
 514:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 518:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 51c:	0e 94 ac 01 	call	0x358	; 0x358 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 520:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 524:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 528:	00 97       	sbiw	r24, 0x00	; 0
 52a:	59 f0       	breq	.+22     	; 0x542 <yield+0x34>
        *queue = (*queue)->next;
 52c:	fc 01       	movw	r30, r24
 52e:	24 81       	ldd	r18, Z+4	; 0x04
 530:	35 81       	ldd	r19, Z+5	; 0x05
 532:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 536:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 53a:	0e 94 c3 01 	call	0x386	; 0x386 <dispatch>
	ENABLE();
 53e:	78 94       	sei
}
 540:	08 95       	ret
 542:	ff cf       	rjmp	.-2      	; 0x542 <yield+0x34>

00000544 <__vector_3>:

ISR(PCINT1_vect){
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
}
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	2f 93       	push	r18
 564:	3f 93       	push	r19
 566:	4f 93       	push	r20
 568:	5f 93       	push	r21
 56a:	6f 93       	push	r22
 56c:	7f 93       	push	r23
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
 576:	ef 93       	push	r30
 578:	ff 93       	push	r31
	blinkCounter++;
 57a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <blinkCounter>
 57e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <blinkCounter+0x1>
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <blinkCounter+0x1>
 588:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <blinkCounter>
	yield();
 58c:	0e 94 87 02 	call	0x50e	; 0x50e <yield>
}
 590:	ff 91       	pop	r31
 592:	ef 91       	pop	r30
 594:	bf 91       	pop	r27
 596:	af 91       	pop	r26
 598:	9f 91       	pop	r25
 59a:	8f 91       	pop	r24
 59c:	7f 91       	pop	r23
 59e:	6f 91       	pop	r22
 5a0:	5f 91       	pop	r21
 5a2:	4f 91       	pop	r20
 5a4:	3f 91       	pop	r19
 5a6:	2f 91       	pop	r18
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <lock>:


void lock(mutex *m) {
	DISABLE();
 5b2:	f8 94       	cli
	//If the mutex isn't locked, lock it
	if ((m->locked) == 0){
 5b4:	fc 01       	movw	r30, r24
 5b6:	20 81       	ld	r18, Z
 5b8:	31 81       	ldd	r19, Z+1	; 0x01
 5ba:	23 2b       	or	r18, r19
 5bc:	29 f4       	brne	.+10     	; 0x5c8 <lock+0x16>
		m->locked = 1;
 5be:	21 e0       	ldi	r18, 0x01	; 1
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	31 83       	std	Z+1, r19	; 0x01
 5c4:	20 83       	st	Z, r18
 5c6:	1a c0       	rjmp	.+52     	; 0x5fc <lock+0x4a>
	}
	//if the mutex is locked, add the thread to the wait queue and change to the next thread in the ready queue
	else {
		enqueue(current, &(m->waitQ));
 5c8:	bc 01       	movw	r22, r24
 5ca:	6e 5f       	subi	r22, 0xFE	; 254
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5d6:	0e 94 ac 01 	call	0x358	; 0x358 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5da:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 5de:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 5e2:	00 97       	sbiw	r24, 0x00	; 0
 5e4:	51 f0       	breq	.+20     	; 0x5fa <lock+0x48>
        *queue = (*queue)->next;
 5e6:	fc 01       	movw	r30, r24
 5e8:	24 81       	ldd	r18, Z+4	; 0x04
 5ea:	35 81       	ldd	r19, Z+5	; 0x05
 5ec:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 5f0:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
		m->locked = 1;
	}
	//if the mutex is locked, add the thread to the wait queue and change to the next thread in the ready queue
	else {
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 5f4:	0e 94 c3 01 	call	0x386	; 0x386 <dispatch>
 5f8:	01 c0       	rjmp	.+2      	; 0x5fc <lock+0x4a>
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <lock+0x48>
	}
	ENABLE();
 5fc:	78 94       	sei
 5fe:	08 95       	ret

00000600 <unlock>:
	
}

void unlock(mutex *m) {
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
	DISABLE();
 604:	f8 94       	cli
	//If the wait queue isn't empty, add the current thread to the ready queue and go ot the next thread in the wait queue
	if (m->waitQ != NULL){
 606:	fc 01       	movw	r30, r24
 608:	22 81       	ldd	r18, Z+2	; 0x02
 60a:	33 81       	ldd	r19, Z+3	; 0x03
 60c:	23 2b       	or	r18, r19
 60e:	b1 f0       	breq	.+44     	; 0x63c <unlock+0x3c>
 610:	ec 01       	movw	r28, r24
		enqueue(current, &readyQ);
 612:	60 e2       	ldi	r22, 0x20	; 32
 614:	71 e0       	ldi	r23, 0x01	; 1
 616:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 61a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 61e:	0e 94 ac 01 	call	0x358	; 0x358 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 622:	8a 81       	ldd	r24, Y+2	; 0x02
 624:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 626:	00 97       	sbiw	r24, 0x00	; 0
 628:	41 f0       	breq	.+16     	; 0x63a <unlock+0x3a>
        *queue = (*queue)->next;
 62a:	fc 01       	movw	r30, r24
 62c:	24 81       	ldd	r18, Z+4	; 0x04
 62e:	35 81       	ldd	r19, Z+5	; 0x05
 630:	3b 83       	std	Y+3, r19	; 0x03
 632:	2a 83       	std	Y+2, r18	; 0x02
void unlock(mutex *m) {
	DISABLE();
	//If the wait queue isn't empty, add the current thread to the ready queue and go ot the next thread in the wait queue
	if (m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 634:	0e 94 c3 01 	call	0x386	; 0x386 <dispatch>
 638:	04 c0       	rjmp	.+8      	; 0x642 <unlock+0x42>
 63a:	ff cf       	rjmp	.-2      	; 0x63a <unlock+0x3a>
	}
	//If the wait queue is empty, unlock the mutex and continue in the current thread
	else  {
		m->locked = 0;
 63c:	fc 01       	movw	r30, r24
 63e:	11 82       	std	Z+1, r1	; 0x01
 640:	10 82       	st	Z, r1
	}
	ENABLE();
 642:	78 94       	sei
	
}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <__divmodsi4>:
 64a:	05 2e       	mov	r0, r21
 64c:	97 fb       	bst	r25, 7
 64e:	1e f4       	brtc	.+6      	; 0x656 <__divmodsi4+0xc>
 650:	00 94       	com	r0
 652:	0e 94 3c 03 	call	0x678	; 0x678 <__negsi2>
 656:	57 fd       	sbrc	r21, 7
 658:	07 d0       	rcall	.+14     	; 0x668 <__divmodsi4_neg2>
 65a:	0e 94 44 03 	call	0x688	; 0x688 <__udivmodsi4>
 65e:	07 fc       	sbrc	r0, 7
 660:	03 d0       	rcall	.+6      	; 0x668 <__divmodsi4_neg2>
 662:	4e f4       	brtc	.+18     	; 0x676 <__divmodsi4_exit>
 664:	0c 94 3c 03 	jmp	0x678	; 0x678 <__negsi2>

00000668 <__divmodsi4_neg2>:
 668:	50 95       	com	r21
 66a:	40 95       	com	r20
 66c:	30 95       	com	r19
 66e:	21 95       	neg	r18
 670:	3f 4f       	sbci	r19, 0xFF	; 255
 672:	4f 4f       	sbci	r20, 0xFF	; 255
 674:	5f 4f       	sbci	r21, 0xFF	; 255

00000676 <__divmodsi4_exit>:
 676:	08 95       	ret

00000678 <__negsi2>:
 678:	90 95       	com	r25
 67a:	80 95       	com	r24
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	08 95       	ret

00000688 <__udivmodsi4>:
 688:	a1 e2       	ldi	r26, 0x21	; 33
 68a:	1a 2e       	mov	r1, r26
 68c:	aa 1b       	sub	r26, r26
 68e:	bb 1b       	sub	r27, r27
 690:	fd 01       	movw	r30, r26
 692:	0d c0       	rjmp	.+26     	; 0x6ae <__udivmodsi4_ep>

00000694 <__udivmodsi4_loop>:
 694:	aa 1f       	adc	r26, r26
 696:	bb 1f       	adc	r27, r27
 698:	ee 1f       	adc	r30, r30
 69a:	ff 1f       	adc	r31, r31
 69c:	a2 17       	cp	r26, r18
 69e:	b3 07       	cpc	r27, r19
 6a0:	e4 07       	cpc	r30, r20
 6a2:	f5 07       	cpc	r31, r21
 6a4:	20 f0       	brcs	.+8      	; 0x6ae <__udivmodsi4_ep>
 6a6:	a2 1b       	sub	r26, r18
 6a8:	b3 0b       	sbc	r27, r19
 6aa:	e4 0b       	sbc	r30, r20
 6ac:	f5 0b       	sbc	r31, r21

000006ae <__udivmodsi4_ep>:
 6ae:	66 1f       	adc	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	88 1f       	adc	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	1a 94       	dec	r1
 6b8:	69 f7       	brne	.-38     	; 0x694 <__udivmodsi4_loop>
 6ba:	60 95       	com	r22
 6bc:	70 95       	com	r23
 6be:	80 95       	com	r24
 6c0:	90 95       	com	r25
 6c2:	9b 01       	movw	r18, r22
 6c4:	ac 01       	movw	r20, r24
 6c6:	bd 01       	movw	r22, r26
 6c8:	cf 01       	movw	r24, r30
 6ca:	08 95       	ret

000006cc <setjmp>:
 6cc:	dc 01       	movw	r26, r24
 6ce:	2d 92       	st	X+, r2
 6d0:	3d 92       	st	X+, r3
 6d2:	4d 92       	st	X+, r4
 6d4:	5d 92       	st	X+, r5
 6d6:	6d 92       	st	X+, r6
 6d8:	7d 92       	st	X+, r7
 6da:	8d 92       	st	X+, r8
 6dc:	9d 92       	st	X+, r9
 6de:	ad 92       	st	X+, r10
 6e0:	bd 92       	st	X+, r11
 6e2:	cd 92       	st	X+, r12
 6e4:	dd 92       	st	X+, r13
 6e6:	ed 92       	st	X+, r14
 6e8:	fd 92       	st	X+, r15
 6ea:	0d 93       	st	X+, r16
 6ec:	1d 93       	st	X+, r17
 6ee:	cd 93       	st	X+, r28
 6f0:	dd 93       	st	X+, r29
 6f2:	ff 91       	pop	r31
 6f4:	ef 91       	pop	r30
 6f6:	8d b7       	in	r24, 0x3d	; 61
 6f8:	8d 93       	st	X+, r24
 6fa:	8e b7       	in	r24, 0x3e	; 62
 6fc:	8d 93       	st	X+, r24
 6fe:	8f b7       	in	r24, 0x3f	; 63
 700:	8d 93       	st	X+, r24
 702:	ed 93       	st	X+, r30
 704:	fd 93       	st	X+, r31
 706:	88 27       	eor	r24, r24
 708:	99 27       	eor	r25, r25
 70a:	09 94       	ijmp

0000070c <longjmp>:
 70c:	dc 01       	movw	r26, r24
 70e:	cb 01       	movw	r24, r22
 710:	81 30       	cpi	r24, 0x01	; 1
 712:	91 05       	cpc	r25, r1
 714:	81 1d       	adc	r24, r1
 716:	2d 90       	ld	r2, X+
 718:	3d 90       	ld	r3, X+
 71a:	4d 90       	ld	r4, X+
 71c:	5d 90       	ld	r5, X+
 71e:	6d 90       	ld	r6, X+
 720:	7d 90       	ld	r7, X+
 722:	8d 90       	ld	r8, X+
 724:	9d 90       	ld	r9, X+
 726:	ad 90       	ld	r10, X+
 728:	bd 90       	ld	r11, X+
 72a:	cd 90       	ld	r12, X+
 72c:	dd 90       	ld	r13, X+
 72e:	ed 90       	ld	r14, X+
 730:	fd 90       	ld	r15, X+
 732:	0d 91       	ld	r16, X+
 734:	1d 91       	ld	r17, X+
 736:	cd 91       	ld	r28, X+
 738:	dd 91       	ld	r29, X+
 73a:	ed 91       	ld	r30, X+
 73c:	fd 91       	ld	r31, X+
 73e:	0d 90       	ld	r0, X+
 740:	f8 94       	cli
 742:	fe bf       	out	0x3e, r31	; 62
 744:	0f be       	out	0x3f, r0	; 63
 746:	ed bf       	out	0x3d, r30	; 61
 748:	ed 91       	ld	r30, X+
 74a:	fd 91       	ld	r31, X+
 74c:	09 94       	ijmp

0000074e <_exit>:
 74e:	f8 94       	cli

00000750 <__stop_program>:
 750:	ff cf       	rjmp	.-2      	; 0x750 <__stop_program>

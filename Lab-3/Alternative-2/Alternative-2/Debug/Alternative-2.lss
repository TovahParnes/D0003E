
Alternative-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000077a  0000080e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022d  0080011a  0080011a  00000828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126d  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0e  00000000  00000000  00001ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ad  00000000  00000000  000026b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000581  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a79  00000000  00000000  000034fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003f76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea e7       	ldi	r30, 0x7A	; 122
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a7 34       	cpi	r26, 0x47	; 71
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <main>
  92:	0c 94 bb 03 	jmp	0x776	; 0x776 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:


void blink(int t){
	while(1){
		lock(&mutexBlink);
		LCDDR18 ^= 0x1;
  9a:	ce ef       	ldi	r28, 0xFE	; 254
  9c:	d0 e0       	ldi	r29, 0x00	; 0
  9e:	11 e0       	ldi	r17, 0x01	; 1
}


void blink(int t){
	while(1){
		lock(&mutexBlink);
  a0:	8e e1       	ldi	r24, 0x1E	; 30
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lock>
		LCDDR18 ^= 0x1;
  a8:	88 81       	ld	r24, Y
  aa:	81 27       	eor	r24, r17
  ac:	88 83       	st	Y, r24
  ae:	f8 cf       	rjmp	.-16     	; 0xa0 <blink+0x6>

000000b0 <LCDInit>:


void LCDInit(void){

	//Set drive time to 300 milliseconds and contrast control voltage to 3.35 V
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>

	//Set external clock source, 1/3 bias, 1/4 duty cycle, 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  b6:	87 eb       	ldi	r24, 0xB7	; 183
  b8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

	

	//Set prescaler setting N=16 and clock divide settings D=8
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  bc:	87 e0       	ldi	r24, 0x07	; 7
  be:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>

	

	//Enable low power waveform, no frame interrupt, no blanking, LCD enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
  c2:	80 ec       	ldi	r24, 0xC0	; 192
  c4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  c8:	08 95       	ret

000000ca <writeChar>:

}

void writeChar(char ch, int pos){
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	66 97       	sbiw	r28, 0x16	; 22
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
	if (pos < 0 || pos > 5){
  de:	66 30       	cpi	r22, 0x06	; 6
  e0:	71 05       	cpc	r23, r1
  e2:	e8 f5       	brcc	.+122    	; 0x15e <writeChar+0x94>

	//Initiate number to print;
	uint16_t num = 0x0;

	//Set SCC table to have the correct SCC values for the numbers 0-9 and a special character
	uint16_t tableSCC[11] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51, 0xC028};
  e4:	96 e1       	ldi	r25, 0x16	; 22
  e6:	e4 e0       	ldi	r30, 0x04	; 4
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	de 01       	movw	r26, r28
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	01 90       	ld	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	9a 95       	dec	r25
  f4:	e1 f7       	brne	.-8      	; 0xee <writeChar+0x24>

	//Check if the given character is in the interval 0-9 and set the right number value
	if (ch >= '0' && ch <= '9'){
  f6:	90 ed       	ldi	r25, 0xD0	; 208
  f8:	98 0f       	add	r25, r24
  fa:	9a 30       	cpi	r25, 0x0A	; 10
  fc:	50 f4       	brcc	.+20     	; 0x112 <writeChar+0x48>
		//Set the corresponding value from the table to the number
		num = tableSCC[ch - '0'];
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	f0 97       	sbiw	r30, 0x30	; 48
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	21 81       	ldd	r18, Z+1	; 0x01
 10e:	32 81       	ldd	r19, Z+2	; 0x02
 110:	02 c0       	rjmp	.+4      	; 0x116 <writeChar+0x4c>
		} else {
		//Set the special character from the table to the number
		num = tableSCC[10];
 112:	28 e2       	ldi	r18, 0x28	; 40
 114:	30 ec       	ldi	r19, 0xC0	; 192
	}

	//Update the LCD address to the given position
	addrLCD += pos >> 1;
 116:	fb 01       	movw	r30, r22
 118:	f5 95       	asr	r31
 11a:	e7 95       	ror	r30
 11c:	e4 51       	subi	r30, 0x14	; 20
 11e:	ff 4f       	sbci	r31, 0xFF	; 255

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
 120:	db 01       	movw	r26, r22
 122:	a1 70       	andi	r26, 0x01	; 1
 124:	bb 27       	eor	r27, r27
 126:	60 ff       	sbrs	r22, 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <writeChar+0x64>
		mask = 0xF0;
		} else {
		mask = 0x0F;
 12a:	6f e0       	ldi	r22, 0x0F	; 15
 12c:	01 c0       	rjmp	.+2      	; 0x130 <writeChar+0x66>
	//Update the LCD address to the given position
	addrLCD += pos >> 1;

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
		mask = 0xF0;
 12e:	60 ef       	ldi	r22, 0xF0	; 240
 130:	af 01       	movw	r20, r30
 132:	4c 5e       	subi	r20, 0xEC	; 236
 134:	5f 4f       	sbci	r21, 0xFF	; 255

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
		//Masking the smallest number to the current nibble
		nibbleNum = num & 0xF;
 136:	82 2f       	mov	r24, r18
 138:	8f 70       	andi	r24, 0x0F	; 15
		//Remove the used nibble
		num = num >> 4;
 13a:	32 95       	swap	r19
 13c:	22 95       	swap	r18
 13e:	2f 70       	andi	r18, 0x0F	; 15
 140:	23 27       	eor	r18, r19
 142:	3f 70       	andi	r19, 0x0F	; 15
 144:	23 27       	eor	r18, r19

		//Shift the nibble to the right position if the pos is odd
		if (pos % 2 != 0){
 146:	10 97       	sbiw	r26, 0x00	; 0
 148:	11 f0       	breq	.+4      	; 0x14e <writeChar+0x84>
			nibbleNum = nibbleNum << 4;
 14a:	82 95       	swap	r24
 14c:	80 7f       	andi	r24, 0xF0	; 240
		}

		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
 14e:	90 81       	ld	r25, Z
 150:	96 23       	and	r25, r22
 152:	89 2b       	or	r24, r25
 154:	80 83       	st	Z, r24

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
 156:	35 96       	adiw	r30, 0x05	; 5
		mask = 0x0F;
	}

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
 158:	4e 17       	cp	r20, r30
 15a:	5f 07       	cpc	r21, r31
 15c:	61 f7       	brne	.-40     	; 0x136 <writeChar+0x6c>
		*addrLCD = (*addrLCD & mask) | nibbleNum;

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
	}
}
 15e:	66 96       	adiw	r28, 0x16	; 22
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <is_prime>:

int is_prime(long i){
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	6b 01       	movw	r12, r22
 17e:	7c 01       	movw	r14, r24
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	c8 16       	cp	r12, r24
 184:	d1 04       	cpc	r13, r1
 186:	e1 04       	cpc	r14, r1
 188:	f1 04       	cpc	r15, r1
 18a:	7c f1       	brlt	.+94     	; 0x1ea <is_prime+0x7a>
		if (i % n == 0){
 18c:	d7 01       	movw	r26, r14
 18e:	c6 01       	movw	r24, r12
 190:	81 70       	andi	r24, 0x01	; 1
 192:	99 27       	eor	r25, r25
 194:	aa 27       	eor	r26, r26
 196:	b0 78       	andi	r27, 0x80	; 128
 198:	bb 23       	and	r27, r27
 19a:	54 f4       	brge	.+20     	; 0x1b0 <is_prime+0x40>
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	a1 09       	sbc	r26, r1
 1a0:	b1 09       	sbc	r27, r1
 1a2:	8e 6f       	ori	r24, 0xFE	; 254
 1a4:	9f 6f       	ori	r25, 0xFF	; 255
 1a6:	af 6f       	ori	r26, 0xFF	; 255
 1a8:	bf 6f       	ori	r27, 0xFF	; 255
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	a1 1d       	adc	r26, r1
 1ae:	b1 1d       	adc	r27, r1
 1b0:	89 2b       	or	r24, r25
 1b2:	8a 2b       	or	r24, r26
 1b4:	8b 2b       	or	r24, r27
 1b6:	e1 f0       	breq	.+56     	; 0x1f0 <is_prime+0x80>
 1b8:	c2 e0       	ldi	r28, 0x02	; 2
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <is_prime+0x5e>
 1be:	c7 01       	movw	r24, r14
 1c0:	b6 01       	movw	r22, r12
 1c2:	0e 94 39 03 	call	0x672	; 0x672 <__divmodsi4>
 1c6:	67 2b       	or	r22, r23
 1c8:	68 2b       	or	r22, r24
 1ca:	69 2b       	or	r22, r25
 1cc:	a1 f0       	breq	.+40     	; 0x1f6 <is_prime+0x86>
	}
}

int is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	9e 01       	movw	r18, r28
 1d2:	0d 2e       	mov	r0, r29
 1d4:	00 0c       	add	r0, r0
 1d6:	44 0b       	sbc	r20, r20
 1d8:	55 0b       	sbc	r21, r21
 1da:	2c 15       	cp	r18, r12
 1dc:	3d 05       	cpc	r19, r13
 1de:	4e 05       	cpc	r20, r14
 1e0:	5f 05       	cpc	r21, r15
 1e2:	6c f3       	brlt	.-38     	; 0x1be <is_prime+0x4e>
		if (i % n == 0){
			return 0;
		}
	}
	return 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <is_prime+0x8a>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <is_prime+0x8a>

int is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
		if (i % n == 0){
			return 0;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <is_prime+0x8a>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 1;
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	ff 90       	pop	r15
 200:	ef 90       	pop	r14
 202:	df 90       	pop	r13
 204:	cf 90       	pop	r12
 206:	08 95       	ret

00000208 <printAt>:

void printAt(long num, int pos) {
 208:	8f 92       	push	r8
 20a:	9f 92       	push	r9
 20c:	af 92       	push	r10
 20e:	bf 92       	push	r11
 210:	cf 92       	push	r12
 212:	df 92       	push	r13
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	4b 01       	movw	r8, r22
 21e:	5c 01       	movw	r10, r24
 220:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 222:	24 e6       	ldi	r18, 0x64	; 100
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	0e 94 39 03 	call	0x672	; 0x672 <__divmodsi4>
 22e:	0f 2e       	mov	r0, r31
 230:	fa e0       	ldi	r31, 0x0A	; 10
 232:	cf 2e       	mov	r12, r31
 234:	d1 2c       	mov	r13, r1
 236:	e1 2c       	mov	r14, r1
 238:	f1 2c       	mov	r15, r1
 23a:	f0 2d       	mov	r31, r0
 23c:	a7 01       	movw	r20, r14
 23e:	96 01       	movw	r18, r12
 240:	0e 94 39 03 	call	0x672	; 0x672 <__divmodsi4>
 244:	be 01       	movw	r22, r28
 246:	80 e3       	ldi	r24, 0x30	; 48
 248:	82 0f       	add	r24, r18
 24a:	0e 94 65 00 	call	0xca	; 0xca <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
 24e:	21 96       	adiw	r28, 0x01	; 1
 250:	c5 01       	movw	r24, r10
 252:	b4 01       	movw	r22, r8
 254:	a7 01       	movw	r20, r14
 256:	96 01       	movw	r18, r12
 258:	0e 94 39 03 	call	0x672	; 0x672 <__divmodsi4>
 25c:	86 2f       	mov	r24, r22
 25e:	be 01       	movw	r22, r28
 260:	80 5d       	subi	r24, 0xD0	; 208
 262:	0e 94 65 00 	call	0xca	; 0xca <writeChar>
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	9f 90       	pop	r9
 278:	8f 90       	pop	r8
 27a:	08 95       	ret

0000027c <button>:
			printAt(n, pos);
		}
	}
}

void button(int pos){
 27c:	ec 01       	movw	r28, r24
	// Activate the pull-up register for bit 7
	PORTB = (1<<PB7) | PORTB;
 27e:	2f 9a       	sbi	0x05, 7	; 5
	
	long count = 0;
 280:	c1 2c       	mov	r12, r1
 282:	d1 2c       	mov	r13, r1
 284:	76 01       	movw	r14, r12
	bool down = false;
	
	while (1){
		lock(&mutexButton);
 286:	82 e2       	ldi	r24, 0x22	; 34
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lock>
		count++;
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	c8 1a       	sub	r12, r24
 292:	d8 0a       	sbc	r13, r24
 294:	e8 0a       	sbc	r14, r24
 296:	f8 0a       	sbc	r15, r24
		printAt(count, pos);
 298:	ae 01       	movw	r20, r28
 29a:	c7 01       	movw	r24, r14
 29c:	b6 01       	movw	r22, r12
 29e:	0e 94 04 01 	call	0x208	; 0x208 <printAt>
 2a2:	f1 cf       	rjmp	.-30     	; 0x286 <button+0xa>

000002a4 <computePrimes>:
	writeChar( num % 10 + '0', pp);
}



void computePrimes(int pos) {
 2a4:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 2a6:	c1 2c       	mov	r12, r1
 2a8:	d1 2c       	mov	r13, r1
 2aa:	76 01       	movw	r14, r12
 2ac:	c3 94       	inc	r12
		if (is_prime(n)) {
 2ae:	c7 01       	movw	r24, r14
 2b0:	b6 01       	movw	r22, r12
 2b2:	0e 94 b8 00 	call	0x170	; 0x170 <is_prime>
 2b6:	89 2b       	or	r24, r25
 2b8:	29 f0       	breq	.+10     	; 0x2c4 <computePrimes+0x20>
			printAt(n, pos);
 2ba:	ae 01       	movw	r20, r28
 2bc:	c7 01       	movw	r24, r14
 2be:	b6 01       	movw	r22, r12
 2c0:	0e 94 04 01 	call	0x208	; 0x208 <printAt>


void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	c8 1a       	sub	r12, r24
 2c8:	d8 0a       	sbc	r13, r24
 2ca:	e8 0a       	sbc	r14, r24
 2cc:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 2ce:	ef cf       	rjmp	.-34     	; 0x2ae <computePrimes+0xa>

000002d0 <main>:
}


int main(void)
{
	CLKPR = 0x80;  
 2d0:	e1 e6       	ldi	r30, 0x61	; 97
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 e8       	ldi	r24, 0x80	; 128
 2d6:	80 83       	st	Z, r24
	CLKPR = 0x00;
 2d8:	10 82       	st	Z, r1

	LCDInit();
 2da:	0e 94 58 00 	call	0xb0	; 0xb0 <LCDInit>
	
	lock(&mutexButton);
 2de:	82 e2       	ldi	r24, 0x22	; 34
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lock>
	lock(&mutexBlink);
 2e6:	8e e1       	ldi	r24, 0x1E	; 30
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lock>
	
	spawn(button, 3);
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	8e e3       	ldi	r24, 0x3E	; 62
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 a7 01 	call	0x34e	; 0x34e <spawn>
	spawn(blink, 20);
 2fa:	64 e1       	ldi	r22, 0x14	; 20
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	8d e4       	ldi	r24, 0x4D	; 77
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 a7 01 	call	0x34e	; 0x34e <spawn>
	computePrimes(0);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <computePrimes>

0000030e <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	00 d0       	rcall	.+0      	; 0x314 <dispatch+0x6>
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	9a 83       	std	Y+2, r25	; 0x02
 31a:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 31c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 320:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 324:	06 96       	adiw	r24, 0x06	; 6
 326:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <setjmp>
 32a:	89 2b       	or	r24, r25
 32c:	59 f4       	brne	.+22     	; 0x344 <dispatch+0x36>
        current = next;
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	06 96       	adiw	r24, 0x06	; 6
 340:	0e 94 9a 03 	call	0x734	; 0x734 <longjmp>
    }
}
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <spawn>:

void spawn(void (* function)(int), int arg) {
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	00 d0       	rcall	.+0      	; 0x354 <spawn+0x6>
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 358:	f8 94       	cli
    if (!initialized) initialize();
 35a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 35e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 362:	23 2b       	or	r18, r19
 364:	e1 f5       	brne	.+120    	; 0x3de <spawn+0x90>
mutex mutexBlink = MUTEX_INIT;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++){
        threads[i].next = &threads[i+1];
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	32 e0       	ldi	r19, 0x02	; 2
 36a:	30 93 98 01 	sts	0x0198, r19	; 0x800198 <threads+0x5>
 36e:	20 93 97 01 	sts	0x0197, r18	; 0x800197 <threads+0x4>
 372:	2d e6       	ldi	r18, 0x6D	; 109
 374:	32 e0       	ldi	r19, 0x02	; 2
 376:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <threads+0x72>
 37a:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <threads+0x71>
 37e:	2a ed       	ldi	r18, 0xDA	; 218
 380:	32 e0       	ldi	r19, 0x02	; 2
 382:	30 93 72 02 	sts	0x0272, r19	; 0x800272 <threads+0xdf>
 386:	20 93 71 02 	sts	0x0271, r18	; 0x800271 <threads+0xde>
	}
    threads[NTHREADS-1].next = NULL;
 38a:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <threads+0x14c>
 38e:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <threads+0x14b>


    initialized = 1;
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x1>
 39a:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
	
	// Initialize for butterfly joystick
	EIMSK = (1<<PCIE1) | EIMSK;
 39e:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 = (1<<PCINT15) | PCMSK1;
 3a0:	ec e6       	ldi	r30, 0x6C	; 108
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	20 81       	ld	r18, Z
 3a6:	20 68       	ori	r18, 0x80	; 128
 3a8:	20 83       	st	Z, r18
	PORTB = (1<<PB7) | PORTB;
 3aa:	2f 9a       	sbi	0x05, 7	; 5
	
	// Initialize for timer 
	
	// Enable timer output compare A interrupts 
	TIMSK1 = (1<<OCIE1A) | TIMSK1;
 3ac:	ef e6       	ldi	r30, 0x6F	; 111
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	20 81       	ld	r18, Z
 3b2:	22 60       	ori	r18, 0x02	; 2
 3b4:	20 83       	st	Z, r18
	// Turn on OC1A compare match
	TCCR1A = (1<<COM1A0) | (1<<COM1A1) | TCCR1A;
 3b6:	e0 e8       	ldi	r30, 0x80	; 128
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	20 81       	ld	r18, Z
 3bc:	20 6c       	ori	r18, 0xC0	; 192
 3be:	20 83       	st	Z, r18
	// Set timer to clear on timer compare (CTC) and timer prescaling factor 1024 
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10) | TCCR1B;
 3c0:	e1 e8       	ldi	r30, 0x81	; 129
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	20 81       	ld	r18, Z
 3c6:	2d 60       	ori	r18, 0x0D	; 13
 3c8:	20 83       	st	Z, r18
	
	// 20 intervals of 50 ms per second 
	// 1 second = 8 000 000 / 1024 = 7812.5 
	// 1 second divided by 2 intervals = 7812.5/2 = 3906,25 = 0xF42
	OCR1A = 0xF42;	
 3ca:	22 e4       	ldi	r18, 0x42	; 66
 3cc:	3f e0       	ldi	r19, 0x0F	; 15
 3ce:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 3d2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCNT1 = 0x0;
 3d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
        *queue = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3de:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 3e2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 3e6:	3a 83       	std	Y+2, r19	; 0x02
 3e8:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 3ea:	23 2b       	or	r18, r19
 3ec:	a9 f0       	breq	.+42     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
        *queue = (*queue)->next;
 3ee:	e9 81       	ldd	r30, Y+1	; 0x01
 3f0:	fa 81       	ldd	r31, Y+2	; 0x02
 3f2:	44 81       	ldd	r20, Z+4	; 0x04
 3f4:	55 81       	ldd	r21, Z+5	; 0x05
 3f6:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 3fa:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 3fe:	91 83       	std	Z+1, r25	; 0x01
 400:	80 83       	st	Z, r24
    newp->arg = arg;
 402:	73 83       	std	Z+3, r23	; 0x03
 404:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 406:	15 82       	std	Z+5, r1	; 0x05
 408:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 40a:	cf 01       	movw	r24, r30
 40c:	06 96       	adiw	r24, 0x06	; 6
 40e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <setjmp>
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	c1 f5       	brne	.+112    	; 0x486 <__DATA_REGION_LENGTH__+0x86>
 416:	01 c0       	rjmp	.+2      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 418:	ff cf       	rjmp	.-2      	; 0x418 <__DATA_REGION_LENGTH__+0x18>
        ENABLE();
 41a:	78 94       	sei
        current->function(current->arg);
 41c:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 420:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 424:	ed 91       	ld	r30, X+
 426:	fc 91       	ld	r31, X
 428:	11 97       	sbiw	r26, 0x01	; 1
 42a:	12 96       	adiw	r26, 0x02	; 2
 42c:	8d 91       	ld	r24, X+
 42e:	9c 91       	ld	r25, X
 430:	13 97       	sbiw	r26, 0x03	; 3
 432:	09 95       	icall
        DISABLE();
 434:	f8 94       	cli
        enqueue(current, &freeQ);
 436:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 43e:	15 82       	std	Z+5, r1	; 0x05
 440:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 442:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 446:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 44a:	00 97       	sbiw	r24, 0x00	; 0
 44c:	29 f4       	brne	.+10     	; 0x458 <__DATA_REGION_LENGTH__+0x58>
        *queue = p;
 44e:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 452:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
 456:	06 c0       	rjmp	.+12     	; 0x464 <__DATA_REGION_LENGTH__+0x64>
    } else {
        thread q = *queue;
		p->next = q;
 458:	95 83       	std	Z+5, r25	; 0x05
 45a:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 45c:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 460:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 464:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 468:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 46c:	00 97       	sbiw	r24, 0x00	; 0
 46e:	51 f0       	breq	.+20     	; 0x484 <__DATA_REGION_LENGTH__+0x84>
        *queue = (*queue)->next;
 470:	fc 01       	movw	r30, r24
 472:	24 81       	ldd	r18, Z+4	; 0x04
 474:	35 81       	ldd	r19, Z+5	; 0x05
 476:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 47a:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 47e:	0e 94 87 01 	call	0x30e	; 0x30e <dispatch>
 482:	01 c0       	rjmp	.+2      	; 0x486 <__DATA_REGION_LENGTH__+0x86>
 484:	ff cf       	rjmp	.-2      	; 0x484 <__DATA_REGION_LENGTH__+0x84>
    }
    SETSTACK(&newp->context, &newp->stack);
 486:	e9 81       	ldd	r30, Y+1	; 0x01
 488:	fa 81       	ldd	r31, Y+2	; 0x02
 48a:	36 96       	adiw	r30, 0x06	; 6
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	9a 81       	ldd	r25, Y+2	; 0x02
 490:	87 59       	subi	r24, 0x97	; 151
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	91 8b       	std	Z+17, r25	; 0x11
 496:	80 8b       	std	Z+16, r24	; 0x10
 498:	93 8b       	std	Z+19, r25	; 0x13
 49a:	82 8b       	std	Z+18, r24	; 0x12
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 49c:	e9 81       	ldd	r30, Y+1	; 0x01
 49e:	fa 81       	ldd	r31, Y+2	; 0x02
 4a0:	15 82       	std	Z+5, r1	; 0x05
 4a2:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 4a4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 4a8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
 4ac:	00 97       	sbiw	r24, 0x00	; 0
 4ae:	29 f4       	brne	.+10     	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
        *queue = p;
 4b0:	f0 93 1d 01 	sts	0x011D, r31	; 0x80011d <readyQ+0x1>
 4b4:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <readyQ>
 4b8:	08 c0       	rjmp	.+16     	; 0x4ca <__DATA_REGION_LENGTH__+0xca>
    } else {
        thread q = *queue;
		p->next = q;
 4ba:	e9 81       	ldd	r30, Y+1	; 0x01
 4bc:	fa 81       	ldd	r31, Y+2	; 0x02
 4be:	95 83       	std	Z+5, r25	; 0x05
 4c0:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 4c2:	f0 93 1d 01 	sts	0x011D, r31	; 0x80011d <readyQ+0x1>
 4c6:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
	ENABLE();
 4ca:	78 94       	sei
}
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <lock>:

ISR(TIMER1_COMPA_vect){
	unlock(&mutexBlink);
}

void lock(mutex *m) {
 4d6:	fc 01       	movw	r30, r24
	DISABLE();
 4d8:	f8 94       	cli
	//if the mutex is locked, add the thread to the wait queue and change to the next thread in the ready queue
	if (m->locked){
 4da:	80 81       	ld	r24, Z
 4dc:	91 81       	ldd	r25, Z+1	; 0x01
 4de:	89 2b       	or	r24, r25
 4e0:	31 f1       	breq	.+76     	; 0x52e <__stack+0x2f>
		enqueue(current, &(m->waitQ));
 4e2:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4e6:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 4ea:	15 96       	adiw	r26, 0x05	; 5
 4ec:	1c 92       	st	X, r1
 4ee:	1e 92       	st	-X, r1
 4f0:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 4f2:	82 81       	ldd	r24, Z+2	; 0x02
 4f4:	93 81       	ldd	r25, Z+3	; 0x03
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	19 f4       	brne	.+6      	; 0x500 <__stack+0x1>
        *queue = p;
 4fa:	b3 83       	std	Z+3, r27	; 0x03
 4fc:	a2 83       	std	Z+2, r26	; 0x02
 4fe:	06 c0       	rjmp	.+12     	; 0x50c <__stack+0xd>
    } else {
        thread q = *queue;
		p->next = q;
 500:	15 96       	adiw	r26, 0x05	; 5
 502:	9c 93       	st	X, r25
 504:	8e 93       	st	-X, r24
 506:	14 97       	sbiw	r26, 0x04	; 4
        *queue = p;
 508:	b3 83       	std	Z+3, r27	; 0x03
 50a:	a2 83       	std	Z+2, r26	; 0x02
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 50c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 510:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 514:	00 97       	sbiw	r24, 0x00	; 0
 516:	51 f0       	breq	.+20     	; 0x52c <__stack+0x2d>
        *queue = (*queue)->next;
 518:	fc 01       	movw	r30, r24
 51a:	24 81       	ldd	r18, Z+4	; 0x04
 51c:	35 81       	ldd	r19, Z+5	; 0x05
 51e:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 522:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
void lock(mutex *m) {
	DISABLE();
	//if the mutex is locked, add the thread to the wait queue and change to the next thread in the ready queue
	if (m->locked){
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 526:	0e 94 87 01 	call	0x30e	; 0x30e <dispatch>
 52a:	20 c0       	rjmp	.+64     	; 0x56c <__stack+0x6d>
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stack+0x2d>
	}
	//If the mutex isn't locked, lock it, and add the current thread to the ready queue
	else {
		enqueue (current, &readyQ);
 52e:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 532:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 536:	15 96       	adiw	r26, 0x05	; 5
 538:	1c 92       	st	X, r1
 53a:	1e 92       	st	-X, r1
 53c:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 53e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 542:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
 546:	00 97       	sbiw	r24, 0x00	; 0
 548:	29 f4       	brne	.+10     	; 0x554 <__stack+0x55>
        *queue = p;
 54a:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <readyQ+0x1>
 54e:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <readyQ>
 552:	08 c0       	rjmp	.+16     	; 0x564 <__stack+0x65>
    } else {
        thread q = *queue;
		p->next = q;
 554:	15 96       	adiw	r26, 0x05	; 5
 556:	9c 93       	st	X, r25
 558:	8e 93       	st	-X, r24
 55a:	14 97       	sbiw	r26, 0x04	; 4
        *queue = p;
 55c:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <readyQ+0x1>
 560:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <readyQ>
		dispatch(dequeue(&readyQ));
	}
	//If the mutex isn't locked, lock it, and add the current thread to the ready queue
	else {
		enqueue (current, &readyQ);
		m->locked = 1;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	91 83       	std	Z+1, r25	; 0x01
 56a:	80 83       	st	Z, r24
	}
	ENABLE();
 56c:	78 94       	sei
 56e:	08 95       	ret

00000570 <unlock>:
}

void unlock(mutex *m) {
	DISABLE();
 570:	f8 94       	cli
	//If the wait queue isn't empty, add the current thread to the ready queue
	if (m->waitQ != NULL){
 572:	dc 01       	movw	r26, r24
 574:	12 96       	adiw	r26, 0x02	; 2
 576:	ed 91       	ld	r30, X+
 578:	fc 91       	ld	r31, X
 57a:	13 97       	sbiw	r26, 0x03	; 3
 57c:	30 97       	sbiw	r30, 0x00	; 0
 57e:	a1 f0       	breq	.+40     	; 0x5a8 <unlock+0x38>
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 580:	15 82       	std	Z+5, r1	; 0x05
 582:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 584:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 588:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
 58c:	00 97       	sbiw	r24, 0x00	; 0
 58e:	29 f4       	brne	.+10     	; 0x59a <unlock+0x2a>
        *queue = p;
 590:	f0 93 1d 01 	sts	0x011D, r31	; 0x80011d <readyQ+0x1>
 594:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <readyQ>
 598:	19 c0       	rjmp	.+50     	; 0x5cc <unlock+0x5c>
    } else {
        thread q = *queue;
		p->next = q;
 59a:	95 83       	std	Z+5, r25	; 0x05
 59c:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 59e:	f0 93 1d 01 	sts	0x011D, r31	; 0x80011d <readyQ+0x1>
 5a2:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <readyQ>
 5a6:	12 c0       	rjmp	.+36     	; 0x5cc <unlock+0x5c>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5a8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 5ac:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 5b0:	00 97       	sbiw	r24, 0x00	; 0
 5b2:	59 f0       	breq	.+22     	; 0x5ca <unlock+0x5a>
        *queue = (*queue)->next;
 5b4:	fc 01       	movw	r30, r24
 5b6:	24 81       	ldd	r18, Z+4	; 0x04
 5b8:	35 81       	ldd	r19, Z+5	; 0x05
 5ba:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 5be:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
	//If the wait queue isn't empty, add the current thread to the ready queue
	if (m->waitQ != NULL){
		enqueue(m->waitQ, &readyQ);
	}
	//Go to the next thread in the ready queue
	dispatch(dequeue(&readyQ));
 5c2:	0e 94 87 01 	call	0x30e	; 0x30e <dispatch>
	ENABLE();
 5c6:	78 94       	sei
}
 5c8:	08 95       	ret
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <unlock+0x5a>
        *queue = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5cc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 5d0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
 5d4:	ef cf       	rjmp	.-34     	; 0x5b4 <unlock+0x44>

000005d6 <__vector_3>:

    enqueue(newp, &readyQ);
	ENABLE();
}

ISR(PCINT1_vect){
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	2f 93       	push	r18
 5e2:	3f 93       	push	r19
 5e4:	4f 93       	push	r20
 5e6:	5f 93       	push	r21
 5e8:	6f 93       	push	r22
 5ea:	7f 93       	push	r23
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
 5f0:	af 93       	push	r26
 5f2:	bf 93       	push	r27
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31
	if (( PINB & 1<<PB7) == 0){
 5f8:	1f 99       	sbic	0x03, 7	; 3
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <__vector_3+0x2e>
		unlock(&mutexButton);
 5fc:	82 e2       	ldi	r24, 0x22	; 34
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	0e 94 b8 02 	call	0x570	; 0x570 <unlock>
	}
}
 604:	ff 91       	pop	r31
 606:	ef 91       	pop	r30
 608:	bf 91       	pop	r27
 60a:	af 91       	pop	r26
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	7f 91       	pop	r23
 612:	6f 91       	pop	r22
 614:	5f 91       	pop	r21
 616:	4f 91       	pop	r20
 618:	3f 91       	pop	r19
 61a:	2f 91       	pop	r18
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	4f 93       	push	r20
 636:	5f 93       	push	r21
 638:	6f 93       	push	r22
 63a:	7f 93       	push	r23
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	af 93       	push	r26
 642:	bf 93       	push	r27
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
	unlock(&mutexBlink);
 648:	8e e1       	ldi	r24, 0x1E	; 30
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 b8 02 	call	0x570	; 0x570 <unlock>
}
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	7f 91       	pop	r23
 65e:	6f 91       	pop	r22
 660:	5f 91       	pop	r21
 662:	4f 91       	pop	r20
 664:	3f 91       	pop	r19
 666:	2f 91       	pop	r18
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <__divmodsi4>:
 672:	05 2e       	mov	r0, r21
 674:	97 fb       	bst	r25, 7
 676:	1e f4       	brtc	.+6      	; 0x67e <__divmodsi4+0xc>
 678:	00 94       	com	r0
 67a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__negsi2>
 67e:	57 fd       	sbrc	r21, 7
 680:	07 d0       	rcall	.+14     	; 0x690 <__divmodsi4_neg2>
 682:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__udivmodsi4>
 686:	07 fc       	sbrc	r0, 7
 688:	03 d0       	rcall	.+6      	; 0x690 <__divmodsi4_neg2>
 68a:	4e f4       	brtc	.+18     	; 0x69e <__divmodsi4_exit>
 68c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__negsi2>

00000690 <__divmodsi4_neg2>:
 690:	50 95       	com	r21
 692:	40 95       	com	r20
 694:	30 95       	com	r19
 696:	21 95       	neg	r18
 698:	3f 4f       	sbci	r19, 0xFF	; 255
 69a:	4f 4f       	sbci	r20, 0xFF	; 255
 69c:	5f 4f       	sbci	r21, 0xFF	; 255

0000069e <__divmodsi4_exit>:
 69e:	08 95       	ret

000006a0 <__negsi2>:
 6a0:	90 95       	com	r25
 6a2:	80 95       	com	r24
 6a4:	70 95       	com	r23
 6a6:	61 95       	neg	r22
 6a8:	7f 4f       	sbci	r23, 0xFF	; 255
 6aa:	8f 4f       	sbci	r24, 0xFF	; 255
 6ac:	9f 4f       	sbci	r25, 0xFF	; 255
 6ae:	08 95       	ret

000006b0 <__udivmodsi4>:
 6b0:	a1 e2       	ldi	r26, 0x21	; 33
 6b2:	1a 2e       	mov	r1, r26
 6b4:	aa 1b       	sub	r26, r26
 6b6:	bb 1b       	sub	r27, r27
 6b8:	fd 01       	movw	r30, r26
 6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <__udivmodsi4_ep>

000006bc <__udivmodsi4_loop>:
 6bc:	aa 1f       	adc	r26, r26
 6be:	bb 1f       	adc	r27, r27
 6c0:	ee 1f       	adc	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	a2 17       	cp	r26, r18
 6c6:	b3 07       	cpc	r27, r19
 6c8:	e4 07       	cpc	r30, r20
 6ca:	f5 07       	cpc	r31, r21
 6cc:	20 f0       	brcs	.+8      	; 0x6d6 <__udivmodsi4_ep>
 6ce:	a2 1b       	sub	r26, r18
 6d0:	b3 0b       	sbc	r27, r19
 6d2:	e4 0b       	sbc	r30, r20
 6d4:	f5 0b       	sbc	r31, r21

000006d6 <__udivmodsi4_ep>:
 6d6:	66 1f       	adc	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	1a 94       	dec	r1
 6e0:	69 f7       	brne	.-38     	; 0x6bc <__udivmodsi4_loop>
 6e2:	60 95       	com	r22
 6e4:	70 95       	com	r23
 6e6:	80 95       	com	r24
 6e8:	90 95       	com	r25
 6ea:	9b 01       	movw	r18, r22
 6ec:	ac 01       	movw	r20, r24
 6ee:	bd 01       	movw	r22, r26
 6f0:	cf 01       	movw	r24, r30
 6f2:	08 95       	ret

000006f4 <setjmp>:
 6f4:	dc 01       	movw	r26, r24
 6f6:	2d 92       	st	X+, r2
 6f8:	3d 92       	st	X+, r3
 6fa:	4d 92       	st	X+, r4
 6fc:	5d 92       	st	X+, r5
 6fe:	6d 92       	st	X+, r6
 700:	7d 92       	st	X+, r7
 702:	8d 92       	st	X+, r8
 704:	9d 92       	st	X+, r9
 706:	ad 92       	st	X+, r10
 708:	bd 92       	st	X+, r11
 70a:	cd 92       	st	X+, r12
 70c:	dd 92       	st	X+, r13
 70e:	ed 92       	st	X+, r14
 710:	fd 92       	st	X+, r15
 712:	0d 93       	st	X+, r16
 714:	1d 93       	st	X+, r17
 716:	cd 93       	st	X+, r28
 718:	dd 93       	st	X+, r29
 71a:	ff 91       	pop	r31
 71c:	ef 91       	pop	r30
 71e:	8d b7       	in	r24, 0x3d	; 61
 720:	8d 93       	st	X+, r24
 722:	8e b7       	in	r24, 0x3e	; 62
 724:	8d 93       	st	X+, r24
 726:	8f b7       	in	r24, 0x3f	; 63
 728:	8d 93       	st	X+, r24
 72a:	ed 93       	st	X+, r30
 72c:	fd 93       	st	X+, r31
 72e:	88 27       	eor	r24, r24
 730:	99 27       	eor	r25, r25
 732:	09 94       	ijmp

00000734 <longjmp>:
 734:	dc 01       	movw	r26, r24
 736:	cb 01       	movw	r24, r22
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	91 05       	cpc	r25, r1
 73c:	81 1d       	adc	r24, r1
 73e:	2d 90       	ld	r2, X+
 740:	3d 90       	ld	r3, X+
 742:	4d 90       	ld	r4, X+
 744:	5d 90       	ld	r5, X+
 746:	6d 90       	ld	r6, X+
 748:	7d 90       	ld	r7, X+
 74a:	8d 90       	ld	r8, X+
 74c:	9d 90       	ld	r9, X+
 74e:	ad 90       	ld	r10, X+
 750:	bd 90       	ld	r11, X+
 752:	cd 90       	ld	r12, X+
 754:	dd 90       	ld	r13, X+
 756:	ed 90       	ld	r14, X+
 758:	fd 90       	ld	r15, X+
 75a:	0d 91       	ld	r16, X+
 75c:	1d 91       	ld	r17, X+
 75e:	cd 91       	ld	r28, X+
 760:	dd 91       	ld	r29, X+
 762:	ed 91       	ld	r30, X+
 764:	fd 91       	ld	r31, X+
 766:	0d 90       	ld	r0, X+
 768:	f8 94       	cli
 76a:	fe bf       	out	0x3e, r31	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	ed bf       	out	0x3d, r30	; 61
 770:	ed 91       	ld	r30, X+
 772:	fd 91       	ld	r31, X+
 774:	09 94       	ijmp

00000776 <_exit>:
 776:	f8 94       	cli

00000778 <__stop_program>:
 778:	ff cf       	rjmp	.-2      	; 0x778 <__stop_program>

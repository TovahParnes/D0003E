
Alternative-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000762  000007f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000231  0080011a  0080011a  00000810  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001299  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af8  00000000  00000000  00001bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000596  00000000  00000000  000026b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000568  00000000  00000000  00002e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a11  00000000  00000000  000033cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003ddd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e6       	ldi	r30, 0x62	; 98
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ab 34       	cpi	r26, 0x4B	; 75
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  92:	0c 94 af 03 	jmp	0x75e	; 0x75e <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:


void blink(int t){
	while(1){
		lock(&mutexBlink);
		LCDDR18 ^= 0x1;
  9a:	ce ef       	ldi	r28, 0xFE	; 254
  9c:	d0 e0       	ldi	r29, 0x00	; 0
  9e:	11 e0       	ldi	r17, 0x01	; 1
}


void blink(int t){
	while(1){
		lock(&mutexBlink);
  a0:	82 e2       	ldi	r24, 0x22	; 34
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lock>
		LCDDR18 ^= 0x1;
  a8:	88 81       	ld	r24, Y
  aa:	81 27       	eor	r24, r17
  ac:	88 83       	st	Y, r24
  ae:	f8 cf       	rjmp	.-16     	; 0xa0 <blink+0x6>

000000b0 <LCDInit>:
mutex m = MUTEX_INIT;

void LCDInit(void){

	//Set drive time to 300 milliseconds and contrast control voltage to 3.35 V
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>

	//Set external clock source, 1/3 bias, 1/4 duty cycle, 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  b6:	87 eb       	ldi	r24, 0xB7	; 183
  b8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

	

	//Set prescaler setting N=16 and clock divide settings D=8
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  bc:	87 e0       	ldi	r24, 0x07	; 7
  be:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>

	

	//Enable low power waveform, no frame interrupt, no blanking, LCD enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
  c2:	80 ec       	ldi	r24, 0xC0	; 192
  c4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  c8:	08 95       	ret

000000ca <writeChar>:

}

void writeChar(char ch, int pos){
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	66 97       	sbiw	r28, 0x16	; 22
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
	if (pos < 0 || pos > 5){
  de:	66 30       	cpi	r22, 0x06	; 6
  e0:	71 05       	cpc	r23, r1
  e2:	e8 f5       	brcc	.+122    	; 0x15e <writeChar+0x94>

	//Initiate number to print;
	uint16_t num = 0x0;

	//Set SCC table to have the correct SCC values for the numbers 0-9 and a special character
	uint16_t tableSCC[11] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51, 0xC028};
  e4:	96 e1       	ldi	r25, 0x16	; 22
  e6:	e4 e0       	ldi	r30, 0x04	; 4
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	de 01       	movw	r26, r28
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	01 90       	ld	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	9a 95       	dec	r25
  f4:	e1 f7       	brne	.-8      	; 0xee <writeChar+0x24>

	//Check if the given character is in the interval 0-9 and set the right number value
	if (ch >= '0' && ch <= '9'){
  f6:	90 ed       	ldi	r25, 0xD0	; 208
  f8:	98 0f       	add	r25, r24
  fa:	9a 30       	cpi	r25, 0x0A	; 10
  fc:	50 f4       	brcc	.+20     	; 0x112 <writeChar+0x48>
		//Set the corresponding value from the table to the number
		num = tableSCC[ch - '0'];
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	f0 97       	sbiw	r30, 0x30	; 48
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	21 81       	ldd	r18, Z+1	; 0x01
 10e:	32 81       	ldd	r19, Z+2	; 0x02
 110:	02 c0       	rjmp	.+4      	; 0x116 <writeChar+0x4c>
		} else {
		//Set the special character from the table to the number
		num = tableSCC[10];
 112:	28 e2       	ldi	r18, 0x28	; 40
 114:	30 ec       	ldi	r19, 0xC0	; 192
	}

	//Update the LCD address to the given position
	addrLCD += pos >> 1;
 116:	fb 01       	movw	r30, r22
 118:	f5 95       	asr	r31
 11a:	e7 95       	ror	r30
 11c:	e4 51       	subi	r30, 0x14	; 20
 11e:	ff 4f       	sbci	r31, 0xFF	; 255

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
 120:	db 01       	movw	r26, r22
 122:	a1 70       	andi	r26, 0x01	; 1
 124:	bb 27       	eor	r27, r27
 126:	60 ff       	sbrs	r22, 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <writeChar+0x64>
		mask = 0xF0;
		} else {
		mask = 0x0F;
 12a:	6f e0       	ldi	r22, 0x0F	; 15
 12c:	01 c0       	rjmp	.+2      	; 0x130 <writeChar+0x66>
	//Update the LCD address to the given position
	addrLCD += pos >> 1;

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
		mask = 0xF0;
 12e:	60 ef       	ldi	r22, 0xF0	; 240
 130:	af 01       	movw	r20, r30
 132:	4c 5e       	subi	r20, 0xEC	; 236
 134:	5f 4f       	sbci	r21, 0xFF	; 255

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
		//Masking the smallest number to the current nibble
		nibbleNum = num & 0xF;
 136:	82 2f       	mov	r24, r18
 138:	8f 70       	andi	r24, 0x0F	; 15
		//Remove the used nibble
		num = num >> 4;
 13a:	32 95       	swap	r19
 13c:	22 95       	swap	r18
 13e:	2f 70       	andi	r18, 0x0F	; 15
 140:	23 27       	eor	r18, r19
 142:	3f 70       	andi	r19, 0x0F	; 15
 144:	23 27       	eor	r18, r19

		//Shift the nibble to the right position if the pos is odd
		if (pos % 2 != 0){
 146:	10 97       	sbiw	r26, 0x00	; 0
 148:	11 f0       	breq	.+4      	; 0x14e <writeChar+0x84>
			nibbleNum = nibbleNum << 4;
 14a:	82 95       	swap	r24
 14c:	80 7f       	andi	r24, 0xF0	; 240
		}

		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
 14e:	90 81       	ld	r25, Z
 150:	96 23       	and	r25, r22
 152:	89 2b       	or	r24, r25
 154:	80 83       	st	Z, r24
		

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
 156:	35 96       	adiw	r30, 0x05	; 5
		mask = 0x0F;
	}

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
 158:	4e 17       	cp	r20, r30
 15a:	5f 07       	cpc	r21, r31
 15c:	61 f7       	brne	.-40     	; 0x136 <writeChar+0x6c>
		

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
	}
}
 15e:	66 96       	adiw	r28, 0x16	; 22
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <is_prime>:

int is_prime(long i){
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	6b 01       	movw	r12, r22
 17e:	7c 01       	movw	r14, r24
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	c8 16       	cp	r12, r24
 184:	d1 04       	cpc	r13, r1
 186:	e1 04       	cpc	r14, r1
 188:	f1 04       	cpc	r15, r1
 18a:	7c f1       	brlt	.+94     	; 0x1ea <is_prime+0x7a>
		if (i % n == 0){
 18c:	d7 01       	movw	r26, r14
 18e:	c6 01       	movw	r24, r12
 190:	81 70       	andi	r24, 0x01	; 1
 192:	99 27       	eor	r25, r25
 194:	aa 27       	eor	r26, r26
 196:	b0 78       	andi	r27, 0x80	; 128
 198:	bb 23       	and	r27, r27
 19a:	54 f4       	brge	.+20     	; 0x1b0 <is_prime+0x40>
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	a1 09       	sbc	r26, r1
 1a0:	b1 09       	sbc	r27, r1
 1a2:	8e 6f       	ori	r24, 0xFE	; 254
 1a4:	9f 6f       	ori	r25, 0xFF	; 255
 1a6:	af 6f       	ori	r26, 0xFF	; 255
 1a8:	bf 6f       	ori	r27, 0xFF	; 255
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	a1 1d       	adc	r26, r1
 1ae:	b1 1d       	adc	r27, r1
 1b0:	89 2b       	or	r24, r25
 1b2:	8a 2b       	or	r24, r26
 1b4:	8b 2b       	or	r24, r27
 1b6:	e1 f0       	breq	.+56     	; 0x1f0 <is_prime+0x80>
 1b8:	c2 e0       	ldi	r28, 0x02	; 2
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <is_prime+0x5e>
 1be:	c7 01       	movw	r24, r14
 1c0:	b6 01       	movw	r22, r12
 1c2:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 1c6:	67 2b       	or	r22, r23
 1c8:	68 2b       	or	r22, r24
 1ca:	69 2b       	or	r22, r25
 1cc:	a1 f0       	breq	.+40     	; 0x1f6 <is_prime+0x86>
	}
}

int is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	9e 01       	movw	r18, r28
 1d2:	0d 2e       	mov	r0, r29
 1d4:	00 0c       	add	r0, r0
 1d6:	44 0b       	sbc	r20, r20
 1d8:	55 0b       	sbc	r21, r21
 1da:	2c 15       	cp	r18, r12
 1dc:	3d 05       	cpc	r19, r13
 1de:	4e 05       	cpc	r20, r14
 1e0:	5f 05       	cpc	r21, r15
 1e2:	6c f3       	brlt	.-38     	; 0x1be <is_prime+0x4e>
		if (i % n == 0){
			return 0;
		}
	}
	return 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <is_prime+0x8a>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <is_prime+0x8a>

int is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
		if (i % n == 0){
			return 0;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <is_prime+0x8a>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 1;
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	ff 90       	pop	r15
 200:	ef 90       	pop	r14
 202:	df 90       	pop	r13
 204:	cf 90       	pop	r12
 206:	08 95       	ret

00000208 <printAt>:

void printAt(long num, int pos) {
 208:	8f 92       	push	r8
 20a:	9f 92       	push	r9
 20c:	af 92       	push	r10
 20e:	bf 92       	push	r11
 210:	cf 92       	push	r12
 212:	df 92       	push	r13
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	4b 01       	movw	r8, r22
 21e:	5c 01       	movw	r10, r24
 220:	ea 01       	movw	r28, r20
	lock(&m);
 222:	8a e1       	ldi	r24, 0x1A	; 26
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lock>
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 22a:	c5 01       	movw	r24, r10
 22c:	b4 01       	movw	r22, r8
 22e:	24 e6       	ldi	r18, 0x64	; 100
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 23a:	0f 2e       	mov	r0, r31
 23c:	fa e0       	ldi	r31, 0x0A	; 10
 23e:	cf 2e       	mov	r12, r31
 240:	d1 2c       	mov	r13, r1
 242:	e1 2c       	mov	r14, r1
 244:	f1 2c       	mov	r15, r1
 246:	f0 2d       	mov	r31, r0
 248:	a7 01       	movw	r20, r14
 24a:	96 01       	movw	r18, r12
 24c:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 250:	be 01       	movw	r22, r28
 252:	80 e3       	ldi	r24, 0x30	; 48
 254:	82 0f       	add	r24, r18
 256:	0e 94 65 00 	call	0xca	; 0xca <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	c5 01       	movw	r24, r10
 25e:	b4 01       	movw	r22, r8
 260:	a7 01       	movw	r20, r14
 262:	96 01       	movw	r18, r12
 264:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 268:	86 2f       	mov	r24, r22
 26a:	be 01       	movw	r22, r28
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	0e 94 65 00 	call	0xca	; 0xca <writeChar>
	unlock(&m);
 272:	8a e1       	ldi	r24, 0x1A	; 26
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 ab 02 	call	0x556	; 0x556 <unlock>
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	bf 90       	pop	r11
 288:	af 90       	pop	r10
 28a:	9f 90       	pop	r9
 28c:	8f 90       	pop	r8
 28e:	08 95       	ret

00000290 <button>:
			printAt(n, pos);
		}
	}
}

void button(int pos){
 290:	ec 01       	movw	r28, r24
	// Activate the pull-up register for bit 7
	PORTB = (1<<PB7) | PORTB;
 292:	2f 9a       	sbi	0x05, 7	; 5
	
	long count = 0;
 294:	c1 2c       	mov	r12, r1
 296:	d1 2c       	mov	r13, r1
 298:	76 01       	movw	r14, r12
	
	while (1){
		lock(&mutexButton);
 29a:	86 e2       	ldi	r24, 0x26	; 38
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lock>
		count++;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	c8 1a       	sub	r12, r24
 2a6:	d8 0a       	sbc	r13, r24
 2a8:	e8 0a       	sbc	r14, r24
 2aa:	f8 0a       	sbc	r15, r24
		printAt(count, pos);
 2ac:	ae 01       	movw	r20, r28
 2ae:	c7 01       	movw	r24, r14
 2b0:	b6 01       	movw	r22, r12
 2b2:	0e 94 04 01 	call	0x208	; 0x208 <printAt>
 2b6:	f1 cf       	rjmp	.-30     	; 0x29a <button+0xa>

000002b8 <computePrimes>:
	unlock(&m);
}



void computePrimes(int pos) {
 2b8:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 2ba:	c1 2c       	mov	r12, r1
 2bc:	d1 2c       	mov	r13, r1
 2be:	76 01       	movw	r14, r12
 2c0:	c3 94       	inc	r12
		if (is_prime(n)) {
 2c2:	c7 01       	movw	r24, r14
 2c4:	b6 01       	movw	r22, r12
 2c6:	0e 94 b8 00 	call	0x170	; 0x170 <is_prime>
 2ca:	89 2b       	or	r24, r25
 2cc:	29 f0       	breq	.+10     	; 0x2d8 <computePrimes+0x20>
			printAt(n, pos);
 2ce:	ae 01       	movw	r20, r28
 2d0:	c7 01       	movw	r24, r14
 2d2:	b6 01       	movw	r22, r12
 2d4:	0e 94 04 01 	call	0x208	; 0x208 <printAt>


void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	c8 1a       	sub	r12, r24
 2dc:	d8 0a       	sbc	r13, r24
 2de:	e8 0a       	sbc	r14, r24
 2e0:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 2e2:	ef cf       	rjmp	.-34     	; 0x2c2 <computePrimes+0xa>

000002e4 <main>:
}


int main(void)
{
	CLKPR = 0x80;  
 2e4:	e1 e6       	ldi	r30, 0x61	; 97
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	80 83       	st	Z, r24
	CLKPR = 0x00;
 2ec:	10 82       	st	Z, r1

	LCDInit();
 2ee:	0e 94 58 00 	call	0xb0	; 0xb0 <LCDInit>
	
	lock(&mutexButton);
 2f2:	86 e2       	ldi	r24, 0x26	; 38
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lock>
	lock(&mutexBlink);
 2fa:	82 e2       	ldi	r24, 0x22	; 34
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lock>
	
	spawn(button, 3);
 302:	63 e0       	ldi	r22, 0x03	; 3
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	88 e4       	ldi	r24, 0x48	; 72
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 b1 01 	call	0x362	; 0x362 <spawn>
	spawn(blink, 20);
 30e:	64 e1       	ldi	r22, 0x14	; 20
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	8d e4       	ldi	r24, 0x4D	; 77
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 b1 01 	call	0x362	; 0x362 <spawn>
	computePrimes(0);
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <computePrimes>

00000322 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	00 d0       	rcall	.+0      	; 0x328 <dispatch+0x6>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	9a 83       	std	Y+2, r25	; 0x02
 32e:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 330:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 334:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 338:	06 96       	adiw	r24, 0x06	; 6
 33a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <setjmp>
 33e:	89 2b       	or	r24, r25
 340:	59 f4       	brne	.+22     	; 0x358 <dispatch+0x36>
        current = next;
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 34a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	06 96       	adiw	r24, 0x06	; 6
 354:	0e 94 8e 03 	call	0x71c	; 0x71c <longjmp>
    }
}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <spawn>:

void spawn(void (* function)(int), int arg) {
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	00 d0       	rcall	.+0      	; 0x368 <spawn+0x6>
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 36c:	f8 94       	cli
    if (!initialized) initialize();
 36e:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <initialized>
 372:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <initialized+0x1>
 376:	23 2b       	or	r18, r19
 378:	e1 f5       	brne	.+120    	; 0x3f2 <spawn+0x90>
mutex mutexBlink = MUTEX_INIT;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++){
        threads[i].next = &threads[i+1];
 37a:	24 e0       	ldi	r18, 0x04	; 4
 37c:	32 e0       	ldi	r19, 0x02	; 2
 37e:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <threads+0x5>
 382:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <threads+0x4>
 386:	21 e7       	ldi	r18, 0x71	; 113
 388:	32 e0       	ldi	r19, 0x02	; 2
 38a:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <threads+0x72>
 38e:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <threads+0x71>
 392:	2e ed       	ldi	r18, 0xDE	; 222
 394:	32 e0       	ldi	r19, 0x02	; 2
 396:	30 93 76 02 	sts	0x0276, r19	; 0x800276 <threads+0xdf>
 39a:	20 93 75 02 	sts	0x0275, r18	; 0x800275 <threads+0xde>
	}
    threads[NTHREADS-1].next = NULL;
 39e:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <threads+0x14c>
 3a2:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <threads+0x14b>


    initialized = 1;
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <initialized+0x1>
 3ae:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <initialized>
	
	// Initialize for butterfly joystick
	EIMSK = (1<<PCIE1) | EIMSK;
 3b2:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 = (1<<PCINT15) | PCMSK1;
 3b4:	ec e6       	ldi	r30, 0x6C	; 108
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	20 81       	ld	r18, Z
 3ba:	20 68       	ori	r18, 0x80	; 128
 3bc:	20 83       	st	Z, r18
	PORTB = (1<<PB7) | PORTB;
 3be:	2f 9a       	sbi	0x05, 7	; 5
	
	// Initialize for timer 
	
	// Enable timer output compare A interrupts 
	TIMSK1 = (1<<OCIE1A) | TIMSK1;
 3c0:	ef e6       	ldi	r30, 0x6F	; 111
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	20 81       	ld	r18, Z
 3c6:	22 60       	ori	r18, 0x02	; 2
 3c8:	20 83       	st	Z, r18
	// Turn on OC1A compare match
	TCCR1A = (1<<COM1A0) | (1<<COM1A1) | TCCR1A;
 3ca:	e0 e8       	ldi	r30, 0x80	; 128
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	20 81       	ld	r18, Z
 3d0:	20 6c       	ori	r18, 0xC0	; 192
 3d2:	20 83       	st	Z, r18
	// Set timer to clear on timer compare (CTC) and timer prescaling factor 1024 
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10) | TCCR1B;
 3d4:	e1 e8       	ldi	r30, 0x81	; 129
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	20 81       	ld	r18, Z
 3da:	2d 60       	ori	r18, 0x0D	; 13
 3dc:	20 83       	st	Z, r18
	
	// 20 intervals of 50 ms per second 
	// 1 second = 8 000 000 / 1024 = 7812.5 
	// 1 second divided by 2 intervals = 7812.5/2 = 3906,25 = 0xF42
	OCR1A = 0xF42;	
 3de:	22 e4       	ldi	r18, 0x42	; 66
 3e0:	3f e0       	ldi	r19, 0x0F	; 15
 3e2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 3e6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCNT1 = 0x0;
 3ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
        *queue = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3f2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 3f6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 3fa:	3a 83       	std	Y+2, r19	; 0x02
 3fc:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 3fe:	23 2b       	or	r18, r19
 400:	a9 f0       	breq	.+42     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
        *queue = (*queue)->next;
 402:	e9 81       	ldd	r30, Y+1	; 0x01
 404:	fa 81       	ldd	r31, Y+2	; 0x02
 406:	44 81       	ldd	r20, Z+4	; 0x04
 408:	55 81       	ldd	r21, Z+5	; 0x05
 40a:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 40e:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 412:	91 83       	std	Z+1, r25	; 0x01
 414:	80 83       	st	Z, r24
    newp->arg = arg;
 416:	73 83       	std	Z+3, r23	; 0x03
 418:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 41a:	15 82       	std	Z+5, r1	; 0x05
 41c:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 41e:	cf 01       	movw	r24, r30
 420:	06 96       	adiw	r24, 0x06	; 6
 422:	0e 94 6e 03 	call	0x6dc	; 0x6dc <setjmp>
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	c1 f5       	brne	.+112    	; 0x49a <__DATA_REGION_LENGTH__+0x9a>
 42a:	01 c0       	rjmp	.+2      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
        ENABLE();
 42e:	78 94       	sei
        current->function(current->arg);
 430:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 434:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 438:	ed 91       	ld	r30, X+
 43a:	fc 91       	ld	r31, X
 43c:	11 97       	sbiw	r26, 0x01	; 1
 43e:	12 96       	adiw	r26, 0x02	; 2
 440:	8d 91       	ld	r24, X+
 442:	9c 91       	ld	r25, X
 444:	13 97       	sbiw	r26, 0x03	; 3
 446:	09 95       	icall
        DISABLE();
 448:	f8 94       	cli
        enqueue(current, &freeQ);
 44a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 44e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 452:	15 82       	std	Z+5, r1	; 0x05
 454:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 456:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 45a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 45e:	00 97       	sbiw	r24, 0x00	; 0
 460:	29 f4       	brne	.+10     	; 0x46c <__DATA_REGION_LENGTH__+0x6c>
        *queue = p;
 462:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 466:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
 46a:	06 c0       	rjmp	.+12     	; 0x478 <__DATA_REGION_LENGTH__+0x78>
    } else {
        thread q = *queue;
		p->next = q;
 46c:	95 83       	std	Z+5, r25	; 0x05
 46e:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 470:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 474:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 478:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 47c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 480:	00 97       	sbiw	r24, 0x00	; 0
 482:	51 f0       	breq	.+20     	; 0x498 <__DATA_REGION_LENGTH__+0x98>
        *queue = (*queue)->next;
 484:	fc 01       	movw	r30, r24
 486:	24 81       	ldd	r18, Z+4	; 0x04
 488:	35 81       	ldd	r19, Z+5	; 0x05
 48a:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 48e:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 492:	0e 94 91 01 	call	0x322	; 0x322 <dispatch>
 496:	01 c0       	rjmp	.+2      	; 0x49a <__DATA_REGION_LENGTH__+0x9a>
 498:	ff cf       	rjmp	.-2      	; 0x498 <__DATA_REGION_LENGTH__+0x98>
    }
    SETSTACK(&newp->context, &newp->stack);
 49a:	e9 81       	ldd	r30, Y+1	; 0x01
 49c:	fa 81       	ldd	r31, Y+2	; 0x02
 49e:	36 96       	adiw	r30, 0x06	; 6
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	9a 81       	ldd	r25, Y+2	; 0x02
 4a4:	87 59       	subi	r24, 0x97	; 151
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	91 8b       	std	Z+17, r25	; 0x11
 4aa:	80 8b       	std	Z+16, r24	; 0x10
 4ac:	93 8b       	std	Z+19, r25	; 0x13
 4ae:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(current, &readyQ);
 4b0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4b4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 4b8:	15 82       	std	Z+5, r1	; 0x05
 4ba:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 4bc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4c0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
 4c4:	00 97       	sbiw	r24, 0x00	; 0
 4c6:	29 f4       	brne	.+10     	; 0x4d2 <__DATA_REGION_LENGTH__+0xd2>
        *queue = p;
 4c8:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <readyQ+0x1>
 4cc:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <readyQ>
 4d0:	06 c0       	rjmp	.+12     	; 0x4de <__DATA_REGION_LENGTH__+0xde>
    } else {
        thread q = *queue;
		p->next = q;
 4d2:	95 83       	std	Z+5, r25	; 0x05
 4d4:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 4d6:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <readyQ+0x1>
 4da:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(current, &readyQ);
	dispatch(newp);
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	9a 81       	ldd	r25, Y+2	; 0x02
 4e2:	0e 94 91 01 	call	0x322	; 0x322 <dispatch>
	ENABLE();
 4e6:	78 94       	sei
}
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <lock>:

ISR(TIMER1_COMPA_vect){
	unlock(&mutexBlink);
}

void lock(mutex *m) {
 4f2:	fc 01       	movw	r30, r24
	DISABLE();
 4f4:	f8 94       	cli
	//if the mutex is locked, add the thread to the wait queue and change to the next thread in the ready queue
	if (m->locked){
 4f6:	80 81       	ld	r24, Z
 4f8:	91 81       	ldd	r25, Z+1	; 0x01
 4fa:	89 2b       	or	r24, r25
 4fc:	31 f1       	breq	.+76     	; 0x54a <__stack+0x4b>
		enqueue(current, &(m->waitQ));
 4fe:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 502:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 506:	15 96       	adiw	r26, 0x05	; 5
 508:	1c 92       	st	X, r1
 50a:	1e 92       	st	-X, r1
 50c:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 50e:	82 81       	ldd	r24, Z+2	; 0x02
 510:	93 81       	ldd	r25, Z+3	; 0x03
 512:	00 97       	sbiw	r24, 0x00	; 0
 514:	19 f4       	brne	.+6      	; 0x51c <__stack+0x1d>
        *queue = p;
 516:	b3 83       	std	Z+3, r27	; 0x03
 518:	a2 83       	std	Z+2, r26	; 0x02
 51a:	06 c0       	rjmp	.+12     	; 0x528 <__stack+0x29>
    } else {
        thread q = *queue;
		p->next = q;
 51c:	15 96       	adiw	r26, 0x05	; 5
 51e:	9c 93       	st	X, r25
 520:	8e 93       	st	-X, r24
 522:	14 97       	sbiw	r26, 0x04	; 4
        *queue = p;
 524:	b3 83       	std	Z+3, r27	; 0x03
 526:	a2 83       	std	Z+2, r26	; 0x02
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 528:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 52c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 530:	00 97       	sbiw	r24, 0x00	; 0
 532:	51 f0       	breq	.+20     	; 0x548 <__stack+0x49>
        *queue = (*queue)->next;
 534:	fc 01       	movw	r30, r24
 536:	24 81       	ldd	r18, Z+4	; 0x04
 538:	35 81       	ldd	r19, Z+5	; 0x05
 53a:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 53e:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
void lock(mutex *m) {
	DISABLE();
	//if the mutex is locked, add the thread to the wait queue and change to the next thread in the ready queue
	if (m->locked){
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 542:	0e 94 91 01 	call	0x322	; 0x322 <dispatch>
 546:	05 c0       	rjmp	.+10     	; 0x552 <__stack+0x53>
 548:	ff cf       	rjmp	.-2      	; 0x548 <__stack+0x49>
	}
	//If the mutex isn't locked, lock it, and add the current thread to the ready queue
	else {
		//enqueue (current, &readyQ);
		m->locked = 1;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	91 83       	std	Z+1, r25	; 0x01
 550:	80 83       	st	Z, r24
	}
	ENABLE();
 552:	78 94       	sei
 554:	08 95       	ret

00000556 <unlock>:
}

void unlock(mutex *m) {
 556:	fc 01       	movw	r30, r24
	DISABLE();
 558:	f8 94       	cli
	//If the wait queue isn't empty, add the current thread to the ready queue
	if (m->waitQ != NULL){
 55a:	82 81       	ldd	r24, Z+2	; 0x02
 55c:	93 81       	ldd	r25, Z+3	; 0x03
 55e:	89 2b       	or	r24, r25
 560:	51 f1       	breq	.+84     	; 0x5b6 <unlock+0x60>
		enqueue(current, &readyQ);
 562:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 566:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 56a:	15 96       	adiw	r26, 0x05	; 5
 56c:	1c 92       	st	X, r1
 56e:	1e 92       	st	-X, r1
 570:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 572:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 576:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	29 f4       	brne	.+10     	; 0x588 <unlock+0x32>
        *queue = p;
 57e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <readyQ+0x1>
 582:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <readyQ>
 586:	08 c0       	rjmp	.+16     	; 0x598 <unlock+0x42>
    } else {
        thread q = *queue;
		p->next = q;
 588:	15 96       	adiw	r26, 0x05	; 5
 58a:	9c 93       	st	X, r25
 58c:	8e 93       	st	-X, r24
 58e:	14 97       	sbiw	r26, 0x04	; 4
        *queue = p;
 590:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <readyQ+0x1>
 594:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <readyQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 598:	82 81       	ldd	r24, Z+2	; 0x02
 59a:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 59c:	00 97       	sbiw	r24, 0x00	; 0
 59e:	51 f0       	breq	.+20     	; 0x5b4 <unlock+0x5e>
        *queue = (*queue)->next;
 5a0:	dc 01       	movw	r26, r24
 5a2:	14 96       	adiw	r26, 0x04	; 4
 5a4:	2d 91       	ld	r18, X+
 5a6:	3c 91       	ld	r19, X
 5a8:	15 97       	sbiw	r26, 0x05	; 5
 5aa:	33 83       	std	Z+3, r19	; 0x03
 5ac:	22 83       	std	Z+2, r18	; 0x02
void unlock(mutex *m) {
	DISABLE();
	//If the wait queue isn't empty, add the current thread to the ready queue
	if (m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 5ae:	0e 94 91 01 	call	0x322	; 0x322 <dispatch>
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <unlock+0x64>
 5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <unlock+0x5e>
	} else {
		m->locked = 0;
 5b6:	11 82       	std	Z+1, r1	; 0x01
 5b8:	10 82       	st	Z, r1
	}
	//Go to the next thread in the ready queue
	
	ENABLE();
 5ba:	78 94       	sei
 5bc:	08 95       	ret

000005be <__vector_3>:
    enqueue(current, &readyQ);
	dispatch(newp);
	ENABLE();
}

ISR(PCINT1_vect){
 5be:	1f 92       	push	r1
 5c0:	0f 92       	push	r0
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
 5c8:	2f 93       	push	r18
 5ca:	3f 93       	push	r19
 5cc:	4f 93       	push	r20
 5ce:	5f 93       	push	r21
 5d0:	6f 93       	push	r22
 5d2:	7f 93       	push	r23
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
 5d8:	af 93       	push	r26
 5da:	bf 93       	push	r27
 5dc:	ef 93       	push	r30
 5de:	ff 93       	push	r31
	if (( PINB & 1<<PB7) == 0){
 5e0:	1f 99       	sbic	0x03, 7	; 3
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <__vector_3+0x2e>
		unlock(&mutexButton);
 5e4:	86 e2       	ldi	r24, 0x26	; 38
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	0e 94 ab 02 	call	0x556	; 0x556 <unlock>
	}
}
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <__vector_7>:

ISR(TIMER1_COMPA_vect){
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	2f 93       	push	r18
 61a:	3f 93       	push	r19
 61c:	4f 93       	push	r20
 61e:	5f 93       	push	r21
 620:	6f 93       	push	r22
 622:	7f 93       	push	r23
 624:	8f 93       	push	r24
 626:	9f 93       	push	r25
 628:	af 93       	push	r26
 62a:	bf 93       	push	r27
 62c:	ef 93       	push	r30
 62e:	ff 93       	push	r31
	unlock(&mutexBlink);
 630:	82 e2       	ldi	r24, 0x22	; 34
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	0e 94 ab 02 	call	0x556	; 0x556 <unlock>
}
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	bf 91       	pop	r27
 63e:	af 91       	pop	r26
 640:	9f 91       	pop	r25
 642:	8f 91       	pop	r24
 644:	7f 91       	pop	r23
 646:	6f 91       	pop	r22
 648:	5f 91       	pop	r21
 64a:	4f 91       	pop	r20
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <__divmodsi4>:
 65a:	05 2e       	mov	r0, r21
 65c:	97 fb       	bst	r25, 7
 65e:	1e f4       	brtc	.+6      	; 0x666 <__divmodsi4+0xc>
 660:	00 94       	com	r0
 662:	0e 94 44 03 	call	0x688	; 0x688 <__negsi2>
 666:	57 fd       	sbrc	r21, 7
 668:	07 d0       	rcall	.+14     	; 0x678 <__divmodsi4_neg2>
 66a:	0e 94 4c 03 	call	0x698	; 0x698 <__udivmodsi4>
 66e:	07 fc       	sbrc	r0, 7
 670:	03 d0       	rcall	.+6      	; 0x678 <__divmodsi4_neg2>
 672:	4e f4       	brtc	.+18     	; 0x686 <__divmodsi4_exit>
 674:	0c 94 44 03 	jmp	0x688	; 0x688 <__negsi2>

00000678 <__divmodsi4_neg2>:
 678:	50 95       	com	r21
 67a:	40 95       	com	r20
 67c:	30 95       	com	r19
 67e:	21 95       	neg	r18
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	4f 4f       	sbci	r20, 0xFF	; 255
 684:	5f 4f       	sbci	r21, 0xFF	; 255

00000686 <__divmodsi4_exit>:
 686:	08 95       	ret

00000688 <__negsi2>:
 688:	90 95       	com	r25
 68a:	80 95       	com	r24
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	08 95       	ret

00000698 <__udivmodsi4>:
 698:	a1 e2       	ldi	r26, 0x21	; 33
 69a:	1a 2e       	mov	r1, r26
 69c:	aa 1b       	sub	r26, r26
 69e:	bb 1b       	sub	r27, r27
 6a0:	fd 01       	movw	r30, r26
 6a2:	0d c0       	rjmp	.+26     	; 0x6be <__udivmodsi4_ep>

000006a4 <__udivmodsi4_loop>:
 6a4:	aa 1f       	adc	r26, r26
 6a6:	bb 1f       	adc	r27, r27
 6a8:	ee 1f       	adc	r30, r30
 6aa:	ff 1f       	adc	r31, r31
 6ac:	a2 17       	cp	r26, r18
 6ae:	b3 07       	cpc	r27, r19
 6b0:	e4 07       	cpc	r30, r20
 6b2:	f5 07       	cpc	r31, r21
 6b4:	20 f0       	brcs	.+8      	; 0x6be <__udivmodsi4_ep>
 6b6:	a2 1b       	sub	r26, r18
 6b8:	b3 0b       	sbc	r27, r19
 6ba:	e4 0b       	sbc	r30, r20
 6bc:	f5 0b       	sbc	r31, r21

000006be <__udivmodsi4_ep>:
 6be:	66 1f       	adc	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	1a 94       	dec	r1
 6c8:	69 f7       	brne	.-38     	; 0x6a4 <__udivmodsi4_loop>
 6ca:	60 95       	com	r22
 6cc:	70 95       	com	r23
 6ce:	80 95       	com	r24
 6d0:	90 95       	com	r25
 6d2:	9b 01       	movw	r18, r22
 6d4:	ac 01       	movw	r20, r24
 6d6:	bd 01       	movw	r22, r26
 6d8:	cf 01       	movw	r24, r30
 6da:	08 95       	ret

000006dc <setjmp>:
 6dc:	dc 01       	movw	r26, r24
 6de:	2d 92       	st	X+, r2
 6e0:	3d 92       	st	X+, r3
 6e2:	4d 92       	st	X+, r4
 6e4:	5d 92       	st	X+, r5
 6e6:	6d 92       	st	X+, r6
 6e8:	7d 92       	st	X+, r7
 6ea:	8d 92       	st	X+, r8
 6ec:	9d 92       	st	X+, r9
 6ee:	ad 92       	st	X+, r10
 6f0:	bd 92       	st	X+, r11
 6f2:	cd 92       	st	X+, r12
 6f4:	dd 92       	st	X+, r13
 6f6:	ed 92       	st	X+, r14
 6f8:	fd 92       	st	X+, r15
 6fa:	0d 93       	st	X+, r16
 6fc:	1d 93       	st	X+, r17
 6fe:	cd 93       	st	X+, r28
 700:	dd 93       	st	X+, r29
 702:	ff 91       	pop	r31
 704:	ef 91       	pop	r30
 706:	8d b7       	in	r24, 0x3d	; 61
 708:	8d 93       	st	X+, r24
 70a:	8e b7       	in	r24, 0x3e	; 62
 70c:	8d 93       	st	X+, r24
 70e:	8f b7       	in	r24, 0x3f	; 63
 710:	8d 93       	st	X+, r24
 712:	ed 93       	st	X+, r30
 714:	fd 93       	st	X+, r31
 716:	88 27       	eor	r24, r24
 718:	99 27       	eor	r25, r25
 71a:	09 94       	ijmp

0000071c <longjmp>:
 71c:	dc 01       	movw	r26, r24
 71e:	cb 01       	movw	r24, r22
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	91 05       	cpc	r25, r1
 724:	81 1d       	adc	r24, r1
 726:	2d 90       	ld	r2, X+
 728:	3d 90       	ld	r3, X+
 72a:	4d 90       	ld	r4, X+
 72c:	5d 90       	ld	r5, X+
 72e:	6d 90       	ld	r6, X+
 730:	7d 90       	ld	r7, X+
 732:	8d 90       	ld	r8, X+
 734:	9d 90       	ld	r9, X+
 736:	ad 90       	ld	r10, X+
 738:	bd 90       	ld	r11, X+
 73a:	cd 90       	ld	r12, X+
 73c:	dd 90       	ld	r13, X+
 73e:	ed 90       	ld	r14, X+
 740:	fd 90       	ld	r15, X+
 742:	0d 91       	ld	r16, X+
 744:	1d 91       	ld	r17, X+
 746:	cd 91       	ld	r28, X+
 748:	dd 91       	ld	r29, X+
 74a:	ed 91       	ld	r30, X+
 74c:	fd 91       	ld	r31, X+
 74e:	0d 90       	ld	r0, X+
 750:	f8 94       	cli
 752:	fe bf       	out	0x3e, r31	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	ed bf       	out	0x3d, r30	; 61
 758:	ed 91       	ld	r30, X+
 75a:	fd 91       	ld	r31, X+
 75c:	09 94       	ijmp

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>

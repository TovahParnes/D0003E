
Lab-4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000021f8  0000228c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011e  0080011e  000022aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bc9  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000105d  00000000  00000000  0000514d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001543  00000000  00000000  000061aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cc4  00000000  00000000  000076f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000971  00000000  00000000  000083b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002864  00000000  00000000  00008d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000b589  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__vector_1>
       8:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__vector_2>
       c:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__vector_3>
      10:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__vector_4>
      14:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_9>
      28:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__vector_10>
      2c:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__vector_11>
      30:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__vector_12>
      34:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_13>
      38:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_14>
      3c:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_15>
      40:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_16>
      44:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_17>
      48:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__vector_18>
      4c:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__vector_19>
      50:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__vector_20>
      54:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__vector_21>
      58:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e8 ef       	ldi	r30, 0xF8	; 248
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ae 31       	cpi	r26, 0x1E	; 30
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ae e1       	ldi	r26, 0x1E	; 30
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a1 37       	cpi	r26, 0x71	; 113
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 36 02 	call	0x46c	; 0x46c <main>
      92:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <initialize>:


#include "InputHandler.h"
#include <avr/io.h>

void initialize(InputHandler *self){
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	SYNC(self->gui, init, NULL);
      ac:	40 e0       	ldi	r20, 0x00	; 0
      ae:	50 e0       	ldi	r21, 0x00	; 0
      b0:	6f e2       	ldi	r22, 0x2F	; 47
      b2:	72 e0       	ldi	r23, 0x02	; 2
      b4:	88 85       	ldd	r24, Y+8	; 0x08
      b6:	99 85       	ldd	r25, Y+9	; 0x09
      b8:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sync>
	ASYNC(self->pG[0], generatePulse, NULL);
      bc:	0c 81       	ldd	r16, Y+4	; 0x04
      be:	1d 81       	ldd	r17, Y+5	; 0x05
      c0:	c1 2c       	mov	r12, r1
      c2:	d1 2c       	mov	r13, r1
      c4:	0f 2e       	mov	r0, r31
      c6:	f0 ea       	ldi	r31, 0xA0	; 160
      c8:	ef 2e       	mov	r14, r31
      ca:	f2 e0       	ldi	r31, 0x02	; 2
      cc:	ff 2e       	mov	r15, r31
      ce:	f0 2d       	mov	r31, r0
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	a9 01       	movw	r20, r18
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	cb 01       	movw	r24, r22
      dc:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
	ASYNC(self->pG[1], generatePulse, NULL);
      e0:	0e 81       	ldd	r16, Y+6	; 0x06
      e2:	1f 81       	ldd	r17, Y+7	; 0x07
      e4:	20 e0       	ldi	r18, 0x00	; 0
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	a9 01       	movw	r20, r18
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	cb 01       	movw	r24, r22
      f0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
}
      f4:	df 91       	pop	r29
      f6:	cf 91       	pop	r28
      f8:	1f 91       	pop	r17
      fa:	0f 91       	pop	r16
      fc:	ff 90       	pop	r15
      fe:	ef 90       	pop	r14
     100:	df 90       	pop	r13
     102:	cf 90       	pop	r12
     104:	08 95       	ret

00000106 <joystickHorizontal>:

void joystickHorizontal(InputHandler *self){
     106:	af 92       	push	r10
     108:	bf 92       	push	r11
     10a:	cf 92       	push	r12
     10c:	df 92       	push	r13
     10e:	ef 92       	push	r14
     110:	ff 92       	push	r15
     112:	0f 93       	push	r16
     114:	1f 93       	push	r17
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	ec 01       	movw	r28, r24
	int current = self->gui->current;
     11c:	e8 85       	ldd	r30, Y+8	; 0x08
     11e:	f9 85       	ldd	r31, Y+9	; 0x09
     120:	a4 80       	ldd	r10, Z+4	; 0x04
     122:	b5 80       	ldd	r11, Z+5	; 0x05

	//Left
	if ((PINE & leftMask) == 0){
     124:	62 99       	sbic	0x0c, 2	; 12
     126:	14 c0       	rjmp	.+40     	; 0x150 <joystickHorizontal+0x4a>
		if (current != 0){
     128:	a1 14       	cp	r10, r1
     12a:	b1 04       	cpc	r11, r1
     12c:	89 f0       	breq	.+34     	; 0x150 <joystickHorizontal+0x4a>
			ASYNC(self->gui, changeCurrent, 0);
     12e:	c1 2c       	mov	r12, r1
     130:	d1 2c       	mov	r13, r1
     132:	0f 2e       	mov	r0, r31
     134:	f8 ec       	ldi	r31, 0xC8	; 200
     136:	ef 2e       	mov	r14, r31
     138:	f1 e0       	ldi	r31, 0x01	; 1
     13a:	ff 2e       	mov	r15, r31
     13c:	f0 2d       	mov	r31, r0
     13e:	8f 01       	movw	r16, r30
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	a9 01       	movw	r20, r18
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	cb 01       	movw	r24, r22
     14c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
		}
	}
	
	//Right
	if ((PINE & rightMask) == 0){
     150:	63 99       	sbic	0x0c, 3	; 12
     152:	16 c0       	rjmp	.+44     	; 0x180 <joystickHorizontal+0x7a>
		if (current != 1){
     154:	aa 94       	dec	r10
     156:	ab 28       	or	r10, r11
     158:	99 f0       	breq	.+38     	; 0x180 <joystickHorizontal+0x7a>
			ASYNC(self->gui, changeCurrent, 1);
     15a:	08 85       	ldd	r16, Y+8	; 0x08
     15c:	19 85       	ldd	r17, Y+9	; 0x09
     15e:	cc 24       	eor	r12, r12
     160:	c3 94       	inc	r12
     162:	d1 2c       	mov	r13, r1
     164:	0f 2e       	mov	r0, r31
     166:	f8 ec       	ldi	r31, 0xC8	; 200
     168:	ef 2e       	mov	r14, r31
     16a:	f1 e0       	ldi	r31, 0x01	; 1
     16c:	ff 2e       	mov	r15, r31
     16e:	f0 2d       	mov	r31, r0
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	a9 01       	movw	r20, r18
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	cb 01       	movw	r24, r22
     17c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
		}
	}
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	ff 90       	pop	r15
     18a:	ef 90       	pop	r14
     18c:	df 90       	pop	r13
     18e:	cf 90       	pop	r12
     190:	bf 90       	pop	r11
     192:	af 90       	pop	r10
     194:	08 95       	ret

00000196 <joystickVerticalPressed>:

void joystickVerticalPressed(InputHandler *self){
     196:	cf 92       	push	r12
     198:	df 92       	push	r13
     19a:	ef 92       	push	r14
     19c:	ff 92       	push	r15
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	ec 01       	movw	r28, r24
	#define currentPG self->pG[self->gui->current]
	//Up
	if ((PINB & upMask) == 0){
     1a8:	1e 99       	sbic	0x03, 6	; 3
     1aa:	1d c0       	rjmp	.+58     	; 0x1e6 <joystickVerticalPressed+0x50>
		ASYNC(currentPG, changeFreq, 1);
     1ac:	e8 85       	ldd	r30, Y+8	; 0x08
     1ae:	f9 85       	ldd	r31, Y+9	; 0x09
     1b0:	04 80       	ldd	r0, Z+4	; 0x04
     1b2:	f5 81       	ldd	r31, Z+5	; 0x05
     1b4:	e0 2d       	mov	r30, r0
     1b6:	32 96       	adiw	r30, 0x02	; 2
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e8 0f       	add	r30, r24
     1be:	f9 1f       	adc	r31, r25
     1c0:	00 81       	ld	r16, Z
     1c2:	11 81       	ldd	r17, Z+1	; 0x01
     1c4:	cc 24       	eor	r12, r12
     1c6:	c3 94       	inc	r12
     1c8:	d1 2c       	mov	r13, r1
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f8 e4       	ldi	r31, 0x48	; 72
     1ce:	ef 2e       	mov	r14, r31
     1d0:	f3 e0       	ldi	r31, 0x03	; 3
     1d2:	ff 2e       	mov	r15, r31
     1d4:	f0 2d       	mov	r31, r0
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	a9 01       	movw	r20, r18
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	cb 01       	movw	r24, r22
     1e2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
	}
	
	//Down
	if ((PINB & downMask) == 0){
     1e6:	1f 99       	sbic	0x03, 7	; 3
     1e8:	1d c0       	rjmp	.+58     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
		ASYNC(currentPG, changeFreq, -1);
     1ea:	e8 85       	ldd	r30, Y+8	; 0x08
     1ec:	f9 85       	ldd	r31, Y+9	; 0x09
     1ee:	04 80       	ldd	r0, Z+4	; 0x04
     1f0:	f5 81       	ldd	r31, Z+5	; 0x05
     1f2:	e0 2d       	mov	r30, r0
     1f4:	32 96       	adiw	r30, 0x02	; 2
     1f6:	ee 0f       	add	r30, r30
     1f8:	ff 1f       	adc	r31, r31
     1fa:	ec 0f       	add	r30, r28
     1fc:	fd 1f       	adc	r31, r29
     1fe:	00 81       	ld	r16, Z
     200:	11 81       	ldd	r17, Z+1	; 0x01
     202:	cc 24       	eor	r12, r12
     204:	ca 94       	dec	r12
     206:	dc 2c       	mov	r13, r12
     208:	0f 2e       	mov	r0, r31
     20a:	f8 e4       	ldi	r31, 0x48	; 72
     20c:	ef 2e       	mov	r14, r31
     20e:	f3 e0       	ldi	r31, 0x03	; 3
     210:	ff 2e       	mov	r15, r31
     212:	f0 2d       	mov	r31, r0
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	a9 01       	movw	r20, r18
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	cb 01       	movw	r24, r22
     220:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
	}
	
	//Pressing
	if ((PINB & pressMask) == 0){
     224:	1c 99       	sbic	0x03, 4	; 3
     226:	1b c0       	rjmp	.+54     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
		ASYNC(currentPG, saveLoadFreq, NULL);
     228:	e8 85       	ldd	r30, Y+8	; 0x08
     22a:	f9 85       	ldd	r31, Y+9	; 0x09
     22c:	84 81       	ldd	r24, Z+4	; 0x04
     22e:	95 81       	ldd	r25, Z+5	; 0x05
     230:	02 96       	adiw	r24, 0x02	; 2
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	c8 0f       	add	r28, r24
     238:	d9 1f       	adc	r29, r25
     23a:	08 81       	ld	r16, Y
     23c:	19 81       	ldd	r17, Y+1	; 0x01
     23e:	c1 2c       	mov	r12, r1
     240:	d1 2c       	mov	r13, r1
     242:	0f 2e       	mov	r0, r31
     244:	fb e8       	ldi	r31, 0x8B	; 139
     246:	ef 2e       	mov	r14, r31
     248:	f3 e0       	ldi	r31, 0x03	; 3
     24a:	ff 2e       	mov	r15, r31
     24c:	f0 2d       	mov	r31, r0
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	a9 01       	movw	r20, r18
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	cb 01       	movw	r24, r22
     25a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
	}
	
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	ff 90       	pop	r15
     268:	ef 90       	pop	r14
     26a:	df 90       	pop	r13
     26c:	cf 90       	pop	r12
     26e:	08 95       	ret

00000270 <writeChar>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdbool.h>
#include "GUI.h"

void writeChar(char ch, int pos){
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	66 97       	sbiw	r28, 0x16	; 22
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
	if (pos < 0 || pos > 5){
     284:	66 30       	cpi	r22, 0x06	; 6
     286:	71 05       	cpc	r23, r1
     288:	08 f0       	brcs	.+2      	; 0x28c <writeChar+0x1c>
     28a:	43 c0       	rjmp	.+134    	; 0x312 <writeChar+0xa2>

	//Initiate number to print;
	uint16_t num = 0x0;

	//Set SCC table to have the correct SCC values for the numbers 0-9 and a special character
	uint16_t tableSCC[11] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51, 0xC028};
     28c:	96 e1       	ldi	r25, 0x16	; 22
     28e:	e8 e0       	ldi	r30, 0x08	; 8
     290:	f1 e0       	ldi	r31, 0x01	; 1
     292:	de 01       	movw	r26, r28
     294:	11 96       	adiw	r26, 0x01	; 1
     296:	01 90       	ld	r0, Z+
     298:	0d 92       	st	X+, r0
     29a:	9a 95       	dec	r25
     29c:	e1 f7       	brne	.-8      	; 0x296 <writeChar+0x26>

	//Check if the given character is in the interval 0-9 and set the right number value
	if (ch >= '0' && ch <= '9'){
     29e:	90 ed       	ldi	r25, 0xD0	; 208
     2a0:	98 0f       	add	r25, r24
     2a2:	9a 30       	cpi	r25, 0x0A	; 10
     2a4:	70 f4       	brcc	.+28     	; 0x2c2 <writeChar+0x52>
		//Set the corresponding value from the table to the number
		num = tableSCC[ch - '0'];
     2a6:	e8 2f       	mov	r30, r24
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	f0 97       	sbiw	r30, 0x30	; 48
     2ac:	ee 0f       	add	r30, r30
     2ae:	ff 1f       	adc	r31, r31
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8c 0f       	add	r24, r28
     2b6:	9d 1f       	adc	r25, r29
     2b8:	e8 0f       	add	r30, r24
     2ba:	f9 1f       	adc	r31, r25
     2bc:	40 81       	ld	r20, Z
     2be:	51 81       	ldd	r21, Z+1	; 0x01
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <writeChar+0x56>
		} else {
		//Set the special character from the table to the number
		num = tableSCC[10];
     2c2:	48 e2       	ldi	r20, 0x28	; 40
     2c4:	50 ec       	ldi	r21, 0xC0	; 192
	}

	//Update the LCD address to the given position
	addrLCD += pos >> 1;
     2c6:	fb 01       	movw	r30, r22
     2c8:	f5 95       	asr	r31
     2ca:	e7 95       	ror	r30
     2cc:	e4 51       	subi	r30, 0x14	; 20
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255

	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
     2d0:	db 01       	movw	r26, r22
     2d2:	a1 70       	andi	r26, 0x01	; 1
     2d4:	bb 27       	eor	r27, r27
     2d6:	60 fd       	sbrc	r22, 0
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <writeChar+0x6e>
		mask = 0xF0;
     2da:	60 ef       	ldi	r22, 0xF0	; 240
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <writeChar+0x70>
		} else {
		mask = 0x0F;
     2de:	6f e0       	ldi	r22, 0x0F	; 15
	}

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	13 c0       	rjmp	.+38     	; 0x30c <writeChar+0x9c>
		//Masking the smallest number to the current nibble
		nibbleNum = num & 0xF;
     2e6:	84 2f       	mov	r24, r20
     2e8:	8f 70       	andi	r24, 0x0F	; 15
		//Remove the used nibble
		num = num >> 4;
     2ea:	52 95       	swap	r21
     2ec:	42 95       	swap	r20
     2ee:	4f 70       	andi	r20, 0x0F	; 15
     2f0:	45 27       	eor	r20, r21
     2f2:	5f 70       	andi	r21, 0x0F	; 15
     2f4:	45 27       	eor	r20, r21

		//Shift the nibble to the right position if the pos is odd
		if (pos % 2 != 0){
     2f6:	10 97       	sbiw	r26, 0x00	; 0
     2f8:	11 f0       	breq	.+4      	; 0x2fe <writeChar+0x8e>
			nibbleNum = nibbleNum << 4;
     2fa:	82 95       	swap	r24
     2fc:	80 7f       	andi	r24, 0xF0	; 240
		}

		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
     2fe:	90 81       	ld	r25, Z
     300:	96 23       	and	r25, r22
     302:	89 2b       	or	r24, r25
     304:	80 83       	st	Z, r24

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
     306:	35 96       	adiw	r30, 0x05	; 5
		mask = 0x0F;
	}

	//Place each of the four nibbles of the number on the LCD

	for (int i = 0; i < 4; i++){
     308:	2f 5f       	subi	r18, 0xFF	; 255
     30a:	3f 4f       	sbci	r19, 0xFF	; 255
     30c:	24 30       	cpi	r18, 0x04	; 4
     30e:	31 05       	cpc	r19, r1
     310:	54 f3       	brlt	.-44     	; 0x2e6 <writeChar+0x76>
		*addrLCD = (*addrLCD & mask) | nibbleNum;

		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
	}
}
     312:	66 96       	adiw	r28, 0x16	; 22
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <printAt>:

void printAt(int pos, int num) {
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	ec 01       	movw	r28, r24
     332:	7b 01       	movw	r14, r22
	writeChar( (num % 100) / 10 + '0', pos);
     334:	cb 01       	movw	r24, r22
     336:	64 e6       	ldi	r22, 0x64	; 100
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	0e 94 36 10 	call	0x206c	; 0x206c <__divmodhi4>
     33e:	0a e0       	ldi	r16, 0x0A	; 10
     340:	10 e0       	ldi	r17, 0x00	; 0
     342:	b8 01       	movw	r22, r16
     344:	0e 94 36 10 	call	0x206c	; 0x206c <__divmodhi4>
     348:	86 2f       	mov	r24, r22
     34a:	be 01       	movw	r22, r28
     34c:	80 5d       	subi	r24, 0xD0	; 208
     34e:	0e 94 38 01 	call	0x270	; 0x270 <writeChar>
	pos++;
     352:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pos);
     354:	c7 01       	movw	r24, r14
     356:	b8 01       	movw	r22, r16
     358:	0e 94 36 10 	call	0x206c	; 0x206c <__divmodhi4>
     35c:	be 01       	movw	r22, r28
     35e:	80 5d       	subi	r24, 0xD0	; 208
     360:	0e 94 38 01 	call	0x270	; 0x270 <writeChar>
}
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	08 95       	ret

00000372 <printCurrent>:
	self->current = arg;
	printCurrent(self);
}

void printCurrent(GUI *self){
	if (self->current == 0){
     372:	fc 01       	movw	r30, r24
     374:	84 81       	ldd	r24, Z+4	; 0x04
     376:	95 81       	ldd	r25, Z+5	; 0x05
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	21 f4       	brne	.+8      	; 0x384 <printCurrent+0x12>
		LCDDR1 = (1 << 0);
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     382:	08 95       	ret
	} else if (self->current == 1){
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	19 f4       	brne	.+6      	; 0x38e <printCurrent+0x1c>
		LCDDR1 = (1 << 4);
     388:	80 e1       	ldi	r24, 0x10	; 16
     38a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     38e:	08 95       	ret

00000390 <changeCurrent>:
	pos++;
	writeChar( num % 10 + '0', pos);
}

void changeCurrent(GUI *self, int arg){
	self->current = arg;
     390:	fc 01       	movw	r30, r24
     392:	75 83       	std	Z+5, r23	; 0x05
     394:	64 83       	std	Z+4, r22	; 0x04
	printCurrent(self);
     396:	0e 94 b9 01 	call	0x372	; 0x372 <printCurrent>
     39a:	08 95       	ret

0000039c <updateDisplayedFreq>:
		LCDDR1 = (1 << 4);
	}
}

void updateDisplayedFreq(GUI *self, int freq){
	int current = self->current;
     39c:	fc 01       	movw	r30, r24
     39e:	84 81       	ldd	r24, Z+4	; 0x04
     3a0:	95 81       	ldd	r25, Z+5	; 0x05
	
	int pos = 2;
	if (current == 0){
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	29 f0       	breq	.+10     	; 0x3b0 <updateDisplayedFreq+0x14>
		pos = 0;
	} else if (current == 1) {
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	31 f0       	breq	.+12     	; 0x3b6 <updateDisplayedFreq+0x1a>
}

void updateDisplayedFreq(GUI *self, int freq){
	int current = self->current;
	
	int pos = 2;
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	05 c0       	rjmp	.+10     	; 0x3ba <updateDisplayedFreq+0x1e>
	if (current == 0){
		pos = 0;
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <updateDisplayedFreq+0x1e>
	} else if (current == 1) {
		pos = 4;
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	90 e0       	ldi	r25, 0x00	; 0
	}
	printAt(pos, freq);
     3ba:	0e 94 92 01 	call	0x324	; 0x324 <printAt>
     3be:	08 95       	ret

000003c0 <initLCD>:
}

 void initLCD(void){
	 // LCD
	 CLKPR = 0x80;
     3c0:	e1 e6       	ldi	r30, 0x61	; 97
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	80 83       	st	Z, r24
	 CLKPR = 0x00;
     3c8:	10 82       	st	Z, r1
	 
	 //Set drive time to 300 milliseconds and contrast control voltage to 3.35 V
	 LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     3ca:	8f e0       	ldi	r24, 0x0F	; 15
     3cc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	 
	 //Set external clock source, 1/3 bias, 1/4 duty cycle, 25 segments
	 LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     3d0:	87 eb       	ldi	r24, 0xB7	; 183
     3d2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

	 //Set prescaler setting N=16 and clock divide settings D=8
	 LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     3d6:	87 e0       	ldi	r24, 0x07	; 7
     3d8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>

	 //Enable low power waveform, no frame interrupt, no blanking, LCD enable
	 LCDCRA = (1 << LCDAB) | (1 << LCDEN);
     3dc:	80 ec       	ldi	r24, 0xC0	; 192
     3de:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	 
	 LCDDR1 = (1 << 0);
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
	 writeChar('0', 0);
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	80 e3       	ldi	r24, 0x30	; 48
     3ee:	0e 94 38 01 	call	0x270	; 0x270 <writeChar>
	 writeChar('0', 1);
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	80 e3       	ldi	r24, 0x30	; 48
     3f8:	0e 94 38 01 	call	0x270	; 0x270 <writeChar>
	 writeChar('0', 4);
     3fc:	64 e0       	ldi	r22, 0x04	; 4
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 e3       	ldi	r24, 0x30	; 48
     402:	0e 94 38 01 	call	0x270	; 0x270 <writeChar>
	 writeChar('0', 5);
     406:	65 e0       	ldi	r22, 0x05	; 5
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e3       	ldi	r24, 0x30	; 48
     40c:	0e 94 38 01 	call	0x270	; 0x270 <writeChar>
     410:	08 95       	ret

00000412 <initButtons>:
 }
 
 void initButtons(void){
	 //Initialize for butterfly joystick
	 EIMSK = (1<<PCIE1) | (1<<PCIE0) | EIMSK;
     412:	8d b3       	in	r24, 0x1d	; 29
     414:	80 6c       	ori	r24, 0xC0	; 192
     416:	8d bb       	out	0x1d, r24	; 29
	 
	 //Press down
	 PORTB = (1<<PB7) | PORTB;
     418:	85 b1       	in	r24, 0x05	; 5
     41a:	80 68       	ori	r24, 0x80	; 128
     41c:	85 b9       	out	0x05, r24	; 5
	 PCMSK1 = (1<<PCINT15) | PCMSK1;
     41e:	ec e6       	ldi	r30, 0x6C	; 108
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	80 68       	ori	r24, 0x80	; 128
     426:	80 83       	st	Z, r24
	 
	 //Press  upp
	 PORTB = (1<<PB6) | PORTB;
     428:	85 b1       	in	r24, 0x05	; 5
     42a:	80 64       	ori	r24, 0x40	; 64
     42c:	85 b9       	out	0x05, r24	; 5
	 PCMSK1 = (1<<PCINT14) | PCMSK1;
     42e:	80 81       	ld	r24, Z
     430:	80 64       	ori	r24, 0x40	; 64
     432:	80 83       	st	Z, r24
	 
	 //Press right
	 PORTE = (1<<PE3) | PORTE;
     434:	8e b1       	in	r24, 0x0e	; 14
     436:	88 60       	ori	r24, 0x08	; 8
     438:	8e b9       	out	0x0e, r24	; 14
	 PCMSK0 = (1<<PCINT3) | PCMSK0;
     43a:	ab e6       	ldi	r26, 0x6B	; 107
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	8c 91       	ld	r24, X
     440:	88 60       	ori	r24, 0x08	; 8
     442:	8c 93       	st	X, r24
	 
	 //Press left
	 PORTE = (1<<PE2) | PORTE;
     444:	8e b1       	in	r24, 0x0e	; 14
     446:	84 60       	ori	r24, 0x04	; 4
     448:	8e b9       	out	0x0e, r24	; 14
	 PCMSK0 = (1<<PCINT2) | PCMSK0;
     44a:	8c 91       	ld	r24, X
     44c:	84 60       	ori	r24, 0x04	; 4
     44e:	8c 93       	st	X, r24
	 
	 //Press in
	 PORTB = (1<<PB4) | PORTB;
     450:	85 b1       	in	r24, 0x05	; 5
     452:	80 61       	ori	r24, 0x10	; 16
     454:	85 b9       	out	0x05, r24	; 5
	 PCMSK1 = (1<<PCINT12) | PCMSK1;
     456:	80 81       	ld	r24, Z
     458:	80 61       	ori	r24, 0x10	; 16
     45a:	80 83       	st	Z, r24
     45c:	08 95       	ret

0000045e <init>:
 }
 
 void init(void){
	 //Set Port E, pin 4 and 6 to output
	 DDRE   = (1<<DDE6)|(1<<DDE4);
     45e:	80 e5       	ldi	r24, 0x50	; 80
     460:	8d b9       	out	0x0d, r24	; 13
	 
	 initLCD();
     462:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <initLCD>
	 initButtons();
     466:	0e 94 09 02 	call	0x412	; 0x412 <initButtons>
     46a:	08 95       	ret

0000046c <main>:
#include "InputHandler.h"



int main(void)
{
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	e4 97       	sbiw	r28, 0x34	; 52
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
	PortWriter		portWriter	 = initPortWriter();
     480:	1a 82       	std	Y+2, r1	; 0x02
     482:	19 82       	std	Y+1, r1	; 0x01
     484:	1c 82       	std	Y+4, r1	; 0x04
     486:	1b 82       	std	Y+3, r1	; 0x03
	GUI				gui			 = initGUI();
     488:	1e 82       	std	Y+6, r1	; 0x06
     48a:	1d 82       	std	Y+5, r1	; 0x05
     48c:	18 86       	std	Y+8, r1	; 0x08
     48e:	1f 82       	std	Y+7, r1	; 0x07
     490:	1a 86       	std	Y+10, r1	; 0x0a
     492:	19 86       	std	Y+9, r1	; 0x09
	PulseGenerator	pG1		 = initPulseGenerator(&portWriter, &gui, 4, 0);
     494:	1c 86       	std	Y+12, r1	; 0x0c
     496:	1b 86       	std	Y+11, r1	; 0x0b
     498:	1e 86       	std	Y+14, r1	; 0x0e
     49a:	1d 86       	std	Y+13, r1	; 0x0d
     49c:	9e 01       	movw	r18, r28
     49e:	2f 5f       	subi	r18, 0xFF	; 255
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	38 8b       	std	Y+16, r19	; 0x10
     4a4:	2f 87       	std	Y+15, r18	; 0x0f
     4a6:	ce 01       	movw	r24, r28
     4a8:	05 96       	adiw	r24, 0x05	; 5
     4aa:	9a 8b       	std	Y+18, r25	; 0x12
     4ac:	89 8b       	std	Y+17, r24	; 0x11
     4ae:	44 e0       	ldi	r20, 0x04	; 4
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	5c 8b       	std	Y+20, r21	; 0x14
     4b4:	4b 8b       	std	Y+19, r20	; 0x13
     4b6:	1e 8a       	std	Y+22, r1	; 0x16
     4b8:	1d 8a       	std	Y+21, r1	; 0x15
     4ba:	18 8e       	std	Y+24, r1	; 0x18
     4bc:	1f 8a       	std	Y+23, r1	; 0x17
     4be:	1a 8e       	std	Y+26, r1	; 0x1a
     4c0:	19 8e       	std	Y+25, r1	; 0x19
	PulseGenerator	pG2		 = initPulseGenerator(&portWriter, &gui, 6, 0);
     4c2:	1c 8e       	std	Y+28, r1	; 0x1c
     4c4:	1b 8e       	std	Y+27, r1	; 0x1b
     4c6:	1e 8e       	std	Y+30, r1	; 0x1e
     4c8:	1d 8e       	std	Y+29, r1	; 0x1d
     4ca:	38 a3       	std	Y+32, r19	; 0x20
     4cc:	2f 8f       	std	Y+31, r18	; 0x1f
     4ce:	9a a3       	std	Y+34, r25	; 0x22
     4d0:	89 a3       	std	Y+33, r24	; 0x21
     4d2:	26 e0       	ldi	r18, 0x06	; 6
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	3c a3       	std	Y+36, r19	; 0x24
     4d8:	2b a3       	std	Y+35, r18	; 0x23
     4da:	1e a2       	std	Y+38, r1	; 0x26
     4dc:	1d a2       	std	Y+37, r1	; 0x25
     4de:	18 a6       	std	Y+40, r1	; 0x28
     4e0:	1f a2       	std	Y+39, r1	; 0x27
     4e2:	1a a6       	std	Y+42, r1	; 0x2a
     4e4:	19 a6       	std	Y+41, r1	; 0x29
	InputHandler	inputHandler = initInputHandler(&pG1, &pG2, &gui);
     4e6:	1c a6       	std	Y+44, r1	; 0x2c
     4e8:	1b a6       	std	Y+43, r1	; 0x2b
     4ea:	1e a6       	std	Y+46, r1	; 0x2e
     4ec:	1d a6       	std	Y+45, r1	; 0x2d
     4ee:	9e 01       	movw	r18, r28
     4f0:	25 5f       	subi	r18, 0xF5	; 245
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	38 ab       	std	Y+48, r19	; 0x30
     4f6:	2f a7       	std	Y+47, r18	; 0x2f
     4f8:	20 5f       	subi	r18, 0xF0	; 240
     4fa:	3f 4f       	sbci	r19, 0xFF	; 255
     4fc:	3a ab       	std	Y+50, r19	; 0x32
     4fe:	29 ab       	std	Y+49, r18	; 0x31
     500:	9c ab       	std	Y+52, r25	; 0x34
     502:	8b ab       	std	Y+51, r24	; 0x33
	
	INSTALL(&inputHandler, joystickHorizontal, IRQ_PCINT0);	// Left & Right
     504:	41 e0       	ldi	r20, 0x01	; 1
     506:	63 e8       	ldi	r22, 0x83	; 131
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	86 96       	adiw	r24, 0x26	; 38
     50c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <install>
	INSTALL(&inputHandler, joystickVerticalPressed, IRQ_PCINT1);	// Up, Down & Pressed
     510:	42 e0       	ldi	r20, 0x02	; 2
     512:	6b ec       	ldi	r22, 0xCB	; 203
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	ce 01       	movw	r24, r28
     518:	8b 96       	adiw	r24, 0x2b	; 43
     51a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <install>
	
	return TINYTIMBER(&inputHandler, initialize, NULL);
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	6d e4       	ldi	r22, 0x4D	; 77
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	ce 01       	movw	r24, r28
     528:	8b 96       	adiw	r24, 0x2b	; 43
     52a:	0e 94 07 10 	call	0x200e	; 0x200e <tinytimber>
     52e:	e4 96       	adiw	r28, 0x34	; 52
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <generatePulse>:
 */ 

#include "PulseGenerator.h"
#include <avr/io.h>

void generatePulse(PulseGenerator *self){
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	ec 01       	movw	r28, r24
	if (self->savedFreq == 0){
     552:	8c 85       	ldd	r24, Y+12	; 0x0c
     554:	9d 85       	ldd	r25, Y+13	; 0x0d
     556:	89 2b       	or	r24, r25
     558:	29 f5       	brne	.+74     	; 0x5a4 <generatePulse+0x64>
		ASYNC(self->pw, turnOffPin, self->pin);
     55a:	0c 81       	ldd	r16, Y+4	; 0x04
     55c:	1d 81       	ldd	r17, Y+5	; 0x05
     55e:	c8 84       	ldd	r12, Y+8	; 0x08
     560:	d9 84       	ldd	r13, Y+9	; 0x09
     562:	0f 2e       	mov	r0, r31
     564:	fe e1       	ldi	r31, 0x1E	; 30
     566:	ef 2e       	mov	r14, r31
     568:	f0 e1       	ldi	r31, 0x10	; 16
     56a:	ff 2e       	mov	r15, r31
     56c:	f0 2d       	mov	r31, r0
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	a9 01       	movw	r20, r18
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	cb 01       	movw	r24, r22
     57a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
		AFTER(MSEC(500), self, generatePulse, NULL);
     57e:	c1 2c       	mov	r12, r1
     580:	d1 2c       	mov	r13, r1
     582:	0f 2e       	mov	r0, r31
     584:	f0 ea       	ldi	r31, 0xA0	; 160
     586:	ef 2e       	mov	r14, r31
     588:	f2 e0       	ldi	r31, 0x02	; 2
     58a:	ff 2e       	mov	r15, r31
     58c:	f0 2d       	mov	r31, r0
     58e:	8e 01       	movw	r16, r28
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	a9 01       	movw	r20, r18
     596:	69 e0       	ldi	r22, 0x09	; 9
     598:	7d e3       	ldi	r23, 0x3D	; 61
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
     5a2:	38 c0       	rjmp	.+112    	; 0x614 <generatePulse+0xd4>
	} else {
		ASYNC(self->pw, invertPin, self->pin);
     5a4:	0c 81       	ldd	r16, Y+4	; 0x04
     5a6:	1d 81       	ldd	r17, Y+5	; 0x05
     5a8:	c8 84       	ldd	r12, Y+8	; 0x08
     5aa:	d9 84       	ldd	r13, Y+9	; 0x09
     5ac:	0f 2e       	mov	r0, r31
     5ae:	fa e2       	ldi	r31, 0x2A	; 42
     5b0:	ef 2e       	mov	r14, r31
     5b2:	f0 e1       	ldi	r31, 0x10	; 16
     5b4:	ff 2e       	mov	r15, r31
     5b6:	f0 2d       	mov	r31, r0
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	cb 01       	movw	r24, r22
     5c4:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
		AFTER(USEC(500000/self->savedFreq), self, generatePulse, NULL);
     5c8:	2c 85       	ldd	r18, Y+12	; 0x0c
     5ca:	3d 85       	ldd	r19, Y+13	; 0x0d
     5cc:	03 2e       	mov	r0, r19
     5ce:	00 0c       	add	r0, r0
     5d0:	44 0b       	sbc	r20, r20
     5d2:	55 0b       	sbc	r21, r21
     5d4:	60 e2       	ldi	r22, 0x20	; 32
     5d6:	71 ea       	ldi	r23, 0xA1	; 161
     5d8:	87 e0       	ldi	r24, 0x07	; 7
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 4a 10 	call	0x2094	; 0x2094 <__divmodsi4>
     5e0:	ad e7       	ldi	r26, 0x7D	; 125
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__muluhisi3>
     5e8:	20 ea       	ldi	r18, 0xA0	; 160
     5ea:	3f e0       	ldi	r19, 0x0F	; 15
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	0e 94 4a 10 	call	0x2094	; 0x2094 <__divmodsi4>
     5f4:	ca 01       	movw	r24, r20
     5f6:	b9 01       	movw	r22, r18
     5f8:	c1 2c       	mov	r12, r1
     5fa:	d1 2c       	mov	r13, r1
     5fc:	0f 2e       	mov	r0, r31
     5fe:	f0 ea       	ldi	r31, 0xA0	; 160
     600:	ef 2e       	mov	r14, r31
     602:	f2 e0       	ldi	r31, 0x02	; 2
     604:	ff 2e       	mov	r15, r31
     606:	f0 2d       	mov	r31, r0
     608:	8e 01       	movw	r16, r28
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	a9 01       	movw	r20, r18
     610:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
	}
}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	08 95       	ret

00000626 <checkContinous>:

void checkContinous(PulseGenerator *self, int value){
     626:	cf 92       	push	r12
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
	if (value == 1){
     632:	61 30       	cpi	r22, 0x01	; 1
     634:	71 05       	cpc	r23, r1
     636:	99 f4       	brne	.+38     	; 0x65e <checkContinous+0x38>
		if ((PINB & upMask) == 0){
     638:	1e 99       	sbic	0x03, 6	; 3
     63a:	23 c0       	rjmp	.+70     	; 0x682 <checkContinous+0x5c>
			ASYNC(self, changeFreq, value);
     63c:	6b 01       	movw	r12, r22
     63e:	0f 2e       	mov	r0, r31
     640:	f8 e4       	ldi	r31, 0x48	; 72
     642:	ef 2e       	mov	r14, r31
     644:	f3 e0       	ldi	r31, 0x03	; 3
     646:	ff 2e       	mov	r15, r31
     648:	f0 2d       	mov	r31, r0
     64a:	8c 01       	movw	r16, r24
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	a9 01       	movw	r20, r18
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	cb 01       	movw	r24, r22
     658:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
     65c:	12 c0       	rjmp	.+36     	; 0x682 <checkContinous+0x5c>
			//AFTER(MSEC(waitTime), self, checkContinous, true);
		}
	} else {
		if ((PINB & downMask) == 0){
     65e:	1f 99       	sbic	0x03, 7	; 3
     660:	10 c0       	rjmp	.+32     	; 0x682 <checkContinous+0x5c>
			ASYNC(self, changeFreq, value);
     662:	6b 01       	movw	r12, r22
     664:	0f 2e       	mov	r0, r31
     666:	f8 e4       	ldi	r31, 0x48	; 72
     668:	ef 2e       	mov	r14, r31
     66a:	f3 e0       	ldi	r31, 0x03	; 3
     66c:	ff 2e       	mov	r15, r31
     66e:	f0 2d       	mov	r31, r0
     670:	8c 01       	movw	r16, r24
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	a9 01       	movw	r20, r18
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	cb 01       	movw	r24, r22
     67e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
			//AFTER(MSEC(waitTime), self, checkContinous, false);
		}
	}
}
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	08 95       	ret

00000690 <changeFreq>:

void changeFreq(PulseGenerator *self, int value){
     690:	af 92       	push	r10
     692:	bf 92       	push	r11
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
	if ((self->freq + value) >= 0 && (self->freq + value) <= 99){
     6a4:	fc 01       	movw	r30, r24
     6a6:	c2 84       	ldd	r12, Z+10	; 0x0a
     6a8:	d3 84       	ldd	r13, Z+11	; 0x0b
     6aa:	c6 0e       	add	r12, r22
     6ac:	d7 1e       	adc	r13, r23
     6ae:	f4 e6       	ldi	r31, 0x64	; 100
     6b0:	cf 16       	cp	r12, r31
     6b2:	d1 04       	cpc	r13, r1
     6b4:	28 f5       	brcc	.+74     	; 0x700 <changeFreq+0x70>
     6b6:	5b 01       	movw	r10, r22
     6b8:	ec 01       	movw	r28, r24
		self->freq = self->freq + value;
     6ba:	db 86       	std	Y+11, r13	; 0x0b
     6bc:	ca 86       	std	Y+10, r12	; 0x0a
		ASYNC(self->gui, updateDisplayedFreq, self->freq);
     6be:	0e 81       	ldd	r16, Y+6	; 0x06
     6c0:	1f 81       	ldd	r17, Y+7	; 0x07
     6c2:	0f 2e       	mov	r0, r31
     6c4:	fe ec       	ldi	r31, 0xCE	; 206
     6c6:	ef 2e       	mov	r14, r31
     6c8:	f1 e0       	ldi	r31, 0x01	; 1
     6ca:	ff 2e       	mov	r15, r31
     6cc:	f0 2d       	mov	r31, r0
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	a9 01       	movw	r20, r18
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	cb 01       	movw	r24, r22
     6da:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
		AFTER(MSEC(waitTime), self, checkContinous, value);
     6de:	65 01       	movw	r12, r10
     6e0:	0f 2e       	mov	r0, r31
     6e2:	f3 e1       	ldi	r31, 0x13	; 19
     6e4:	ef 2e       	mov	r14, r31
     6e6:	f3 e0       	ldi	r31, 0x03	; 3
     6e8:	ff 2e       	mov	r15, r31
     6ea:	f0 2d       	mov	r31, r0
     6ec:	8e 01       	movw	r16, r28
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	a9 01       	movw	r20, r18
     6f4:	6f e4       	ldi	r22, 0x4F	; 79
     6f6:	72 e1       	ldi	r23, 0x12	; 18
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
	}
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	08 95       	ret

00000716 <saveLoadFreq>:

void saveLoadFreq(PulseGenerator *self){
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	fc 01       	movw	r30, r24
	if (self->freq == 0){
     724:	82 85       	ldd	r24, Z+10	; 0x0a
     726:	93 85       	ldd	r25, Z+11	; 0x0b
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	29 f4       	brne	.+10     	; 0x736 <saveLoadFreq+0x20>
		self->freq = self->savedFreq;
     72c:	84 85       	ldd	r24, Z+12	; 0x0c
     72e:	95 85       	ldd	r25, Z+13	; 0x0d
     730:	93 87       	std	Z+11, r25	; 0x0b
     732:	82 87       	std	Z+10, r24	; 0x0a
     734:	04 c0       	rjmp	.+8      	; 0x73e <saveLoadFreq+0x28>
	} else {
		self->savedFreq = self->freq;
     736:	95 87       	std	Z+13, r25	; 0x0d
     738:	84 87       	std	Z+12, r24	; 0x0c
		self->freq = 0;
     73a:	13 86       	std	Z+11, r1	; 0x0b
     73c:	12 86       	std	Z+10, r1	; 0x0a
	}
	
	ASYNC(self->gui, updateDisplayedFreq, self->freq);
     73e:	06 81       	ldd	r16, Z+6	; 0x06
     740:	17 81       	ldd	r17, Z+7	; 0x07
     742:	c2 84       	ldd	r12, Z+10	; 0x0a
     744:	d3 84       	ldd	r13, Z+11	; 0x0b
     746:	0f 2e       	mov	r0, r31
     748:	fe ec       	ldi	r31, 0xCE	; 206
     74a:	ef 2e       	mov	r14, r31
     74c:	f1 e0       	ldi	r31, 0x01	; 1
     74e:	ff 2e       	mov	r15, r31
     750:	f0 2d       	mov	r31, r0
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	a9 01       	movw	r20, r18
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	cb 01       	movw	r24, r22
     75e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
}
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	08 95       	ret

00000770 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	00 d0       	rcall	.+0      	; 0x776 <initialize+0x6>
     776:	00 d0       	rcall	.+0      	; 0x778 <initialize+0x8>
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	18 c0       	rjmp	.+48     	; 0x7b2 <initialize+0x42>
     782:	ac 01       	movw	r20, r24
     784:	4f 5f       	subi	r20, 0xFF	; 255
     786:	5f 4f       	sbci	r21, 0xFF	; 255
     788:	9a 01       	movw	r18, r20
     78a:	22 95       	swap	r18
     78c:	32 95       	swap	r19
     78e:	30 7f       	andi	r19, 0xF0	; 240
     790:	32 27       	eor	r19, r18
     792:	20 7f       	andi	r18, 0xF0	; 240
     794:	32 27       	eor	r19, r18
     796:	2f 5f       	subi	r18, 0xFF	; 255
     798:	3d 4f       	sbci	r19, 0xFD	; 253
     79a:	82 95       	swap	r24
     79c:	92 95       	swap	r25
     79e:	90 7f       	andi	r25, 0xF0	; 240
     7a0:	98 27       	eor	r25, r24
     7a2:	80 7f       	andi	r24, 0xF0	; 240
     7a4:	98 27       	eor	r25, r24
     7a6:	fc 01       	movw	r30, r24
     7a8:	ef 5f       	subi	r30, 0xFF	; 255
     7aa:	fd 4f       	sbci	r31, 0xFD	; 253
     7ac:	31 83       	std	Z+1, r19	; 0x01
     7ae:	20 83       	st	Z, r18
     7b0:	ca 01       	movw	r24, r20
     7b2:	8e 30       	cpi	r24, 0x0E	; 14
     7b4:	91 05       	cpc	r25, r1
     7b6:	2c f3       	brlt	.-54     	; 0x782 <initialize+0x12>
     7b8:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <messages+0xe1>
     7bc:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <messages+0xe0>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	15 c0       	rjmp	.+42     	; 0x7f0 <initialize+0x80>
     7c6:	ac 01       	movw	r20, r24
     7c8:	4f 5f       	subi	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	6d e1       	ldi	r22, 0x1D	; 29
     7ce:	64 9f       	mul	r22, r20
     7d0:	90 01       	movw	r18, r0
     7d2:	65 9f       	mul	r22, r21
     7d4:	30 0d       	add	r19, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	24 5b       	subi	r18, 0xB4	; 180
     7da:	3e 4f       	sbci	r19, 0xFE	; 254
     7dc:	68 9f       	mul	r22, r24
     7de:	f0 01       	movw	r30, r0
     7e0:	69 9f       	mul	r22, r25
     7e2:	f0 0d       	add	r31, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	e4 5b       	subi	r30, 0xB4	; 180
     7e8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
     7ee:	ca 01       	movw	r24, r20
     7f0:	83 30       	cpi	r24, 0x03	; 3
     7f2:	91 05       	cpc	r25, r1
     7f4:	44 f3       	brlt	.-48     	; 0x7c6 <initialize+0x56>
     7f6:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <threads+0x58>
     7fa:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <threads+0x57>
     7fe:	1a 82       	std	Y+2, r1	; 0x02
     800:	19 82       	std	Y+1, r1	; 0x01
     802:	32 c0       	rjmp	.+100    	; 0x868 <initialize+0xf8>
     804:	2d e1       	ldi	r18, 0x1D	; 29
     806:	49 81       	ldd	r20, Y+1	; 0x01
     808:	5a 81       	ldd	r21, Y+2	; 0x02
     80a:	24 9f       	mul	r18, r20
     80c:	c0 01       	movw	r24, r0
     80e:	25 9f       	mul	r18, r21
     810:	90 0d       	add	r25, r0
     812:	11 24       	eor	r1, r1
     814:	fc 01       	movw	r30, r24
     816:	ee 5a       	subi	r30, 0xAE	; 174
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	fc 83       	std	Y+4, r31	; 0x04
     81c:	eb 83       	std	Y+3, r30	; 0x03
     81e:	cf 01       	movw	r24, r30
     820:	0e 94 b9 10 	call	0x2172	; 0x2172 <setjmp>
     824:	20 e6       	ldi	r18, 0x60	; 96
     826:	49 81       	ldd	r20, Y+1	; 0x01
     828:	5a 81       	ldd	r21, Y+2	; 0x02
     82a:	24 9f       	mul	r18, r20
     82c:	c0 01       	movw	r24, r0
     82e:	25 9f       	mul	r18, r21
     830:	90 0d       	add	r25, r0
     832:	11 24       	eor	r1, r1
     834:	83 5b       	subi	r24, 0xB3	; 179
     836:	9c 4f       	sbci	r25, 0xFC	; 252
     838:	eb 81       	ldd	r30, Y+3	; 0x03
     83a:	fc 81       	ldd	r31, Y+4	; 0x04
     83c:	91 8b       	std	Z+17, r25	; 0x11
     83e:	80 8b       	std	Z+16, r24	; 0x10
     840:	93 8b       	std	Z+19, r25	; 0x13
     842:	82 8b       	std	Z+18, r24	; 0x12
     844:	84 e9       	ldi	r24, 0x94	; 148
     846:	9f e0       	ldi	r25, 0x0F	; 15
     848:	96 8b       	std	Z+22, r25	; 0x16
     84a:	85 8b       	std	Z+21, r24	; 0x15
     84c:	8d e1       	ldi	r24, 0x1D	; 29
     84e:	84 9f       	mul	r24, r20
     850:	f0 01       	movw	r30, r0
     852:	85 9f       	mul	r24, r21
     854:	f0 0d       	add	r31, r0
     856:	11 24       	eor	r1, r1
     858:	e4 5b       	subi	r30, 0xB4	; 180
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	15 82       	std	Z+5, r1	; 0x05
     85e:	14 82       	std	Z+4, r1	; 0x04
     860:	4f 5f       	subi	r20, 0xFF	; 255
     862:	5f 4f       	sbci	r21, 0xFF	; 255
     864:	5a 83       	std	Y+2, r21	; 0x02
     866:	49 83       	std	Y+1, r20	; 0x01
     868:	29 81       	ldd	r18, Y+1	; 0x01
     86a:	3a 81       	ldd	r19, Y+2	; 0x02
     86c:	24 30       	cpi	r18, 0x04	; 4
     86e:	31 05       	cpc	r19, r1
     870:	4c f2       	brlt	.-110    	; 0x804 <initialize+0x94>
     872:	e4 ee       	ldi	r30, 0xE4	; 228
     874:	f1 e0       	ldi	r31, 0x01	; 1
     876:	11 82       	std	Z+1, r1	; 0x01
     878:	10 82       	st	Z, r1
     87a:	15 82       	std	Z+5, r1	; 0x05
     87c:	14 82       	std	Z+4, r1	; 0x04
     87e:	13 82       	std	Z+3, r1	; 0x03
     880:	12 82       	std	Z+2, r1	; 0x02
     882:	e1 e6       	ldi	r30, 0x61	; 97
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 e8       	ldi	r24, 0x80	; 128
     888:	80 83       	st	Z, r24
     88a:	10 82       	st	Z, r1
     88c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     890:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     894:	84 e0       	ldi	r24, 0x04	; 4
     896:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <dispatch>:
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <dispatch+0x6>
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	9a 83       	std	Y+2, r25	; 0x02
     8ba:	89 83       	std	Y+1, r24	; 0x01
     8bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8c4:	06 96       	adiw	r24, 0x06	; 6
     8c6:	0e 94 b9 10 	call	0x2172	; 0x2172 <setjmp>
     8ca:	89 2b       	or	r24, r25
     8cc:	59 f4       	brne	.+22     	; 0x8e4 <dispatch+0x36>
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	9a 81       	ldd	r25, Y+2	; 0x02
     8d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	06 96       	adiw	r24, 0x06	; 6
     8e0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <longjmp>
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <enqueueByDeadline>:
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	dc 01       	movw	r26, r24
     8f8:	cb 01       	movw	r24, r22
     8fa:	eb 01       	movw	r28, r22
     8fc:	e8 81       	ld	r30, Y
     8fe:	f9 81       	ldd	r31, Y+1	; 0x01
     900:	c0 e0       	ldi	r28, 0x00	; 0
     902:	d0 e0       	ldi	r29, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <enqueueByDeadline+0x20>
     906:	ef 01       	movw	r28, r30
     908:	01 90       	ld	r0, Z+
     90a:	f0 81       	ld	r31, Z
     90c:	e0 2d       	mov	r30, r0
     90e:	30 97       	sbiw	r30, 0x00	; 0
     910:	79 f0       	breq	.+30     	; 0x930 <enqueueByDeadline+0x42>
     912:	06 81       	ldd	r16, Z+6	; 0x06
     914:	17 81       	ldd	r17, Z+7	; 0x07
     916:	20 85       	ldd	r18, Z+8	; 0x08
     918:	31 85       	ldd	r19, Z+9	; 0x09
     91a:	16 96       	adiw	r26, 0x06	; 6
     91c:	4d 91       	ld	r20, X+
     91e:	5d 91       	ld	r21, X+
     920:	6d 91       	ld	r22, X+
     922:	7c 91       	ld	r23, X
     924:	19 97       	sbiw	r26, 0x09	; 9
     926:	40 17       	cp	r20, r16
     928:	51 07       	cpc	r21, r17
     92a:	62 07       	cpc	r22, r18
     92c:	73 07       	cpc	r23, r19
     92e:	5c f7       	brge	.-42     	; 0x906 <enqueueByDeadline+0x18>
     930:	11 96       	adiw	r26, 0x01	; 1
     932:	fc 93       	st	X, r31
     934:	ee 93       	st	-X, r30
     936:	20 97       	sbiw	r28, 0x00	; 0
     938:	21 f4       	brne	.+8      	; 0x942 <enqueueByDeadline+0x54>
     93a:	fc 01       	movw	r30, r24
     93c:	b1 83       	std	Z+1, r27	; 0x01
     93e:	a0 83       	st	Z, r26
     940:	02 c0       	rjmp	.+4      	; 0x946 <enqueueByDeadline+0x58>
     942:	b9 83       	std	Y+1, r27	; 0x01
     944:	a8 83       	st	Y, r26
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	08 95       	ret

00000950 <enqueueByBaseline>:
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	eb 01       	movw	r28, r22
     95e:	e8 81       	ld	r30, Y
     960:	f9 81       	ldd	r31, Y+1	; 0x01
     962:	c0 e0       	ldi	r28, 0x00	; 0
     964:	d0 e0       	ldi	r29, 0x00	; 0
     966:	04 c0       	rjmp	.+8      	; 0x970 <enqueueByBaseline+0x20>
     968:	ef 01       	movw	r28, r30
     96a:	01 90       	ld	r0, Z+
     96c:	f0 81       	ld	r31, Z
     96e:	e0 2d       	mov	r30, r0
     970:	30 97       	sbiw	r30, 0x00	; 0
     972:	79 f0       	breq	.+30     	; 0x992 <enqueueByBaseline+0x42>
     974:	02 81       	ldd	r16, Z+2	; 0x02
     976:	13 81       	ldd	r17, Z+3	; 0x03
     978:	24 81       	ldd	r18, Z+4	; 0x04
     97a:	35 81       	ldd	r19, Z+5	; 0x05
     97c:	12 96       	adiw	r26, 0x02	; 2
     97e:	4d 91       	ld	r20, X+
     980:	5d 91       	ld	r21, X+
     982:	6d 91       	ld	r22, X+
     984:	7c 91       	ld	r23, X
     986:	15 97       	sbiw	r26, 0x05	; 5
     988:	40 17       	cp	r20, r16
     98a:	51 07       	cpc	r21, r17
     98c:	62 07       	cpc	r22, r18
     98e:	73 07       	cpc	r23, r19
     990:	5c f7       	brge	.-42     	; 0x968 <enqueueByBaseline+0x18>
     992:	11 96       	adiw	r26, 0x01	; 1
     994:	fc 93       	st	X, r31
     996:	ee 93       	st	-X, r30
     998:	20 97       	sbiw	r28, 0x00	; 0
     99a:	21 f4       	brne	.+8      	; 0x9a4 <enqueueByBaseline+0x54>
     99c:	fc 01       	movw	r30, r24
     99e:	b1 83       	std	Z+1, r27	; 0x01
     9a0:	a0 83       	st	Z, r26
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <enqueueByBaseline+0x58>
     9a4:	b9 83       	std	Y+1, r27	; 0x01
     9a6:	a8 83       	st	Y, r26
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	08 95       	ret

000009b2 <dequeue>:
     9b2:	dc 01       	movw	r26, r24
     9b4:	ed 91       	ld	r30, X+
     9b6:	fc 91       	ld	r31, X
     9b8:	11 97       	sbiw	r26, 0x01	; 1
     9ba:	30 97       	sbiw	r30, 0x00	; 0
     9bc:	59 f4       	brne	.+22     	; 0x9d4 <dequeue+0x22>
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     9c4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     9c8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	83 bf       	out	0x33, r24	; 51
     9d0:	88 95       	sleep
     9d2:	fc cf       	rjmp	.-8      	; 0x9cc <dequeue+0x1a>
     9d4:	20 81       	ld	r18, Z
     9d6:	31 81       	ldd	r19, Z+1	; 0x01
     9d8:	2d 93       	st	X+, r18
     9da:	3c 93       	st	X, r19
     9dc:	cf 01       	movw	r24, r30
     9de:	08 95       	ret

000009e0 <insert>:
     9e0:	fb 01       	movw	r30, r22
     9e2:	20 81       	ld	r18, Z
     9e4:	31 81       	ldd	r19, Z+1	; 0x01
     9e6:	fc 01       	movw	r30, r24
     9e8:	31 83       	std	Z+1, r19	; 0x01
     9ea:	20 83       	st	Z, r18
     9ec:	fb 01       	movw	r30, r22
     9ee:	91 83       	std	Z+1, r25	; 0x01
     9f0:	80 83       	st	Z, r24
     9f2:	08 95       	ret

000009f4 <push>:
     9f4:	fb 01       	movw	r30, r22
     9f6:	20 81       	ld	r18, Z
     9f8:	31 81       	ldd	r19, Z+1	; 0x01
     9fa:	fc 01       	movw	r30, r24
     9fc:	31 83       	std	Z+1, r19	; 0x01
     9fe:	20 83       	st	Z, r18
     a00:	fb 01       	movw	r30, r22
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	80 83       	st	Z, r24
     a06:	08 95       	ret

00000a08 <pop>:
     a08:	dc 01       	movw	r26, r24
     a0a:	ed 91       	ld	r30, X+
     a0c:	fc 91       	ld	r31, X
     a0e:	11 97       	sbiw	r26, 0x01	; 1
     a10:	20 81       	ld	r18, Z
     a12:	31 81       	ldd	r19, Z+1	; 0x01
     a14:	2d 93       	st	X+, r18
     a16:	3c 93       	st	X, r19
     a18:	cf 01       	movw	r24, r30
     a1a:	08 95       	ret

00000a1c <schedule>:
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     a24:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     a28:	c2 81       	ldd	r28, Z+2	; 0x02
     a2a:	d3 81       	ldd	r29, Z+3	; 0x03
     a2c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <msgQ>
     a30:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <msgQ+0x1>
     a34:	30 97       	sbiw	r30, 0x00	; 0
     a36:	19 f1       	breq	.+70     	; 0xa7e <schedule+0x62>
     a38:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     a3c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     a40:	89 2b       	or	r24, r25
     a42:	e9 f0       	breq	.+58     	; 0xa7e <schedule+0x62>
     a44:	20 97       	sbiw	r28, 0x00	; 0
     a46:	69 f0       	breq	.+26     	; 0xa62 <schedule+0x46>
     a48:	86 81       	ldd	r24, Z+6	; 0x06
     a4a:	97 81       	ldd	r25, Z+7	; 0x07
     a4c:	a0 85       	ldd	r26, Z+8	; 0x08
     a4e:	b1 85       	ldd	r27, Z+9	; 0x09
     a50:	4e 81       	ldd	r20, Y+6	; 0x06
     a52:	5f 81       	ldd	r21, Y+7	; 0x07
     a54:	68 85       	ldd	r22, Y+8	; 0x08
     a56:	79 85       	ldd	r23, Y+9	; 0x09
     a58:	84 1b       	sub	r24, r20
     a5a:	95 0b       	sbc	r25, r21
     a5c:	a6 0b       	sbc	r26, r22
     a5e:	b7 0b       	sbc	r27, r23
     a60:	72 f4       	brpl	.+28     	; 0xa7e <schedule+0x62>
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 04 05 	call	0xa08	; 0xa08 <pop>
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	71 e0       	ldi	r23, 0x01	; 1
     a6e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <push>
     a72:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     a76:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     a7a:	0e 94 57 04 	call	0x8ae	; 0x8ae <dispatch>
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <__vector_1>:
     a84:	1f 92       	push	r1
     a86:	0f 92       	push	r0
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	0f 92       	push	r0
     a8c:	11 24       	eor	r1, r1
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	2f 93       	push	r18
     a94:	3f 93       	push	r19
     a96:	4f 93       	push	r20
     a98:	5f 93       	push	r21
     a9a:	6f 93       	push	r22
     a9c:	7f 93       	push	r23
     a9e:	8f 93       	push	r24
     aa0:	9f 93       	push	r25
     aa2:	af 93       	push	r26
     aa4:	bf 93       	push	r27
     aa6:	ef 93       	push	r30
     aa8:	ff 93       	push	r31
     aaa:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     aae:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     ab2:	ac 01       	movw	r20, r24
     ab4:	09 2e       	mov	r0, r25
     ab6:	00 0c       	add	r0, r0
     ab8:	66 0b       	sbc	r22, r22
     aba:	77 0b       	sbc	r23, r23
     abc:	9a 01       	movw	r18, r20
     abe:	11 27       	eor	r17, r17
     ac0:	00 27       	eor	r16, r16
     ac2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ac6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	40 2b       	or	r20, r16
     ad0:	51 2b       	or	r21, r17
     ad2:	62 2b       	or	r22, r18
     ad4:	73 2b       	or	r23, r19
     ad6:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
     ada:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
     ade:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
     ae2:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
     ae6:	b0 9b       	sbis	0x16, 0	; 22
     ae8:	1a c0       	rjmp	.+52     	; 0xb1e <__vector_1+0x9a>
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	09 2e       	mov	r0, r25
     aee:	00 0c       	add	r0, r0
     af0:	aa 0b       	sbc	r26, r26
     af2:	bb 0b       	sbc	r27, r27
     af4:	bc 01       	movw	r22, r24
     af6:	55 27       	eor	r21, r21
     af8:	44 27       	eor	r20, r20
     afa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     afe:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b02:	a0 e0       	ldi	r26, 0x00	; 0
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	84 2b       	or	r24, r20
     b08:	95 2b       	or	r25, r21
     b0a:	a6 2b       	or	r26, r22
     b0c:	b7 2b       	or	r27, r23
     b0e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     b12:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     b16:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     b1a:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     b1e:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable>
     b22:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x1>
     b26:	30 97       	sbiw	r30, 0x00	; 0
     b28:	39 f0       	breq	.+14     	; 0xb38 <__vector_1+0xb4>
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable>
     b32:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x1>
     b36:	09 95       	icall
     b38:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <__vector_2>:
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	2f 93       	push	r18
     b72:	3f 93       	push	r19
     b74:	4f 93       	push	r20
     b76:	5f 93       	push	r21
     b78:	6f 93       	push	r22
     b7a:	7f 93       	push	r23
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	af 93       	push	r26
     b82:	bf 93       	push	r27
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
     b88:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     b8c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     b90:	ac 01       	movw	r20, r24
     b92:	09 2e       	mov	r0, r25
     b94:	00 0c       	add	r0, r0
     b96:	66 0b       	sbc	r22, r22
     b98:	77 0b       	sbc	r23, r23
     b9a:	9a 01       	movw	r18, r20
     b9c:	11 27       	eor	r17, r17
     b9e:	00 27       	eor	r16, r16
     ba0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ba4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	40 2b       	or	r20, r16
     bae:	51 2b       	or	r21, r17
     bb0:	62 2b       	or	r22, r18
     bb2:	73 2b       	or	r23, r19
     bb4:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
     bb8:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
     bbc:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
     bc0:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
     bc4:	b0 9b       	sbis	0x16, 0	; 22
     bc6:	1a c0       	rjmp	.+52     	; 0xbfc <__vector_2+0x9a>
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	09 2e       	mov	r0, r25
     bcc:	00 0c       	add	r0, r0
     bce:	aa 0b       	sbc	r26, r26
     bd0:	bb 0b       	sbc	r27, r27
     bd2:	bc 01       	movw	r22, r24
     bd4:	55 27       	eor	r21, r21
     bd6:	44 27       	eor	r20, r20
     bd8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bdc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	84 2b       	or	r24, r20
     be6:	95 2b       	or	r25, r21
     be8:	a6 2b       	or	r26, r22
     bea:	b7 2b       	or	r27, r23
     bec:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     bf0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     bf4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     bf8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     bfc:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x2>
     c00:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x3>
     c04:	30 97       	sbiw	r30, 0x00	; 0
     c06:	39 f0       	breq	.+14     	; 0xc16 <__vector_2+0xb4>
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x2>
     c10:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x3>
     c14:	09 95       	icall
     c16:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	0f 90       	pop	r0
     c3c:	1f 90       	pop	r1
     c3e:	18 95       	reti

00000c40 <__vector_3>:
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	2f 93       	push	r18
     c50:	3f 93       	push	r19
     c52:	4f 93       	push	r20
     c54:	5f 93       	push	r21
     c56:	6f 93       	push	r22
     c58:	7f 93       	push	r23
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
     c62:	ef 93       	push	r30
     c64:	ff 93       	push	r31
     c66:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     c6a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     c6e:	ac 01       	movw	r20, r24
     c70:	09 2e       	mov	r0, r25
     c72:	00 0c       	add	r0, r0
     c74:	66 0b       	sbc	r22, r22
     c76:	77 0b       	sbc	r23, r23
     c78:	9a 01       	movw	r18, r20
     c7a:	11 27       	eor	r17, r17
     c7c:	00 27       	eor	r16, r16
     c7e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c82:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	40 2b       	or	r20, r16
     c8c:	51 2b       	or	r21, r17
     c8e:	62 2b       	or	r22, r18
     c90:	73 2b       	or	r23, r19
     c92:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
     c96:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
     c9a:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
     c9e:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
     ca2:	b0 9b       	sbis	0x16, 0	; 22
     ca4:	1a c0       	rjmp	.+52     	; 0xcda <__vector_3+0x9a>
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	09 2e       	mov	r0, r25
     caa:	00 0c       	add	r0, r0
     cac:	aa 0b       	sbc	r26, r26
     cae:	bb 0b       	sbc	r27, r27
     cb0:	bc 01       	movw	r22, r24
     cb2:	55 27       	eor	r21, r21
     cb4:	44 27       	eor	r20, r20
     cb6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cbe:	a0 e0       	ldi	r26, 0x00	; 0
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	84 2b       	or	r24, r20
     cc4:	95 2b       	or	r25, r21
     cc6:	a6 2b       	or	r26, r22
     cc8:	b7 2b       	or	r27, r23
     cca:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     cce:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     cd2:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     cd6:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     cda:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x4>
     cde:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x5>
     ce2:	30 97       	sbiw	r30, 0x00	; 0
     ce4:	39 f0       	breq	.+14     	; 0xcf4 <__vector_3+0xb4>
     ce6:	62 e0       	ldi	r22, 0x02	; 2
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x4>
     cee:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x5>
     cf2:	09 95       	icall
     cf4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
     cf8:	ff 91       	pop	r31
     cfa:	ef 91       	pop	r30
     cfc:	bf 91       	pop	r27
     cfe:	af 91       	pop	r26
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	7f 91       	pop	r23
     d06:	6f 91       	pop	r22
     d08:	5f 91       	pop	r21
     d0a:	4f 91       	pop	r20
     d0c:	3f 91       	pop	r19
     d0e:	2f 91       	pop	r18
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <__vector_4>:
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	ef 93       	push	r30
     d42:	ff 93       	push	r31
     d44:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     d48:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     d4c:	ac 01       	movw	r20, r24
     d4e:	09 2e       	mov	r0, r25
     d50:	00 0c       	add	r0, r0
     d52:	66 0b       	sbc	r22, r22
     d54:	77 0b       	sbc	r23, r23
     d56:	9a 01       	movw	r18, r20
     d58:	11 27       	eor	r17, r17
     d5a:	00 27       	eor	r16, r16
     d5c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d60:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	40 2b       	or	r20, r16
     d6a:	51 2b       	or	r21, r17
     d6c:	62 2b       	or	r22, r18
     d6e:	73 2b       	or	r23, r19
     d70:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
     d74:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
     d78:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
     d7c:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
     d80:	b0 9b       	sbis	0x16, 0	; 22
     d82:	1a c0       	rjmp	.+52     	; 0xdb8 <__vector_4+0x9a>
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	09 2e       	mov	r0, r25
     d88:	00 0c       	add	r0, r0
     d8a:	aa 0b       	sbc	r26, r26
     d8c:	bb 0b       	sbc	r27, r27
     d8e:	bc 01       	movw	r22, r24
     d90:	55 27       	eor	r21, r21
     d92:	44 27       	eor	r20, r20
     d94:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d98:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	84 2b       	or	r24, r20
     da2:	95 2b       	or	r25, r21
     da4:	a6 2b       	or	r26, r22
     da6:	b7 2b       	or	r27, r23
     da8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     dac:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     db0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     db4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     db8:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x6>
     dbc:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x7>
     dc0:	30 97       	sbiw	r30, 0x00	; 0
     dc2:	39 f0       	breq	.+14     	; 0xdd2 <__vector_4+0xb4>
     dc4:	63 e0       	ldi	r22, 0x03	; 3
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x6>
     dcc:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x7>
     dd0:	09 95       	icall
     dd2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <__vector_5>:
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	2f 93       	push	r18
     e0c:	3f 93       	push	r19
     e0e:	4f 93       	push	r20
     e10:	5f 93       	push	r21
     e12:	6f 93       	push	r22
     e14:	7f 93       	push	r23
     e16:	8f 93       	push	r24
     e18:	9f 93       	push	r25
     e1a:	af 93       	push	r26
     e1c:	bf 93       	push	r27
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
     e22:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     e26:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     e2a:	ac 01       	movw	r20, r24
     e2c:	09 2e       	mov	r0, r25
     e2e:	00 0c       	add	r0, r0
     e30:	66 0b       	sbc	r22, r22
     e32:	77 0b       	sbc	r23, r23
     e34:	9a 01       	movw	r18, r20
     e36:	11 27       	eor	r17, r17
     e38:	00 27       	eor	r16, r16
     e3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	40 2b       	or	r20, r16
     e48:	51 2b       	or	r21, r17
     e4a:	62 2b       	or	r22, r18
     e4c:	73 2b       	or	r23, r19
     e4e:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
     e52:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
     e56:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
     e5a:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
     e5e:	b0 9b       	sbis	0x16, 0	; 22
     e60:	1a c0       	rjmp	.+52     	; 0xe96 <__vector_5+0x9a>
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	09 2e       	mov	r0, r25
     e66:	00 0c       	add	r0, r0
     e68:	aa 0b       	sbc	r26, r26
     e6a:	bb 0b       	sbc	r27, r27
     e6c:	bc 01       	movw	r22, r24
     e6e:	55 27       	eor	r21, r21
     e70:	44 27       	eor	r20, r20
     e72:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e76:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	84 2b       	or	r24, r20
     e80:	95 2b       	or	r25, r21
     e82:	a6 2b       	or	r26, r22
     e84:	b7 2b       	or	r27, r23
     e86:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     e8a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     e8e:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     e92:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     e96:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x8>
     e9a:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x9>
     e9e:	30 97       	sbiw	r30, 0x00	; 0
     ea0:	39 f0       	breq	.+14     	; 0xeb0 <__vector_5+0xb4>
     ea2:	64 e0       	ldi	r22, 0x04	; 4
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x8>
     eaa:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x9>
     eae:	09 95       	icall
     eb0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <__vector_10>:
     eda:	1f 92       	push	r1
     edc:	0f 92       	push	r0
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	0f 92       	push	r0
     ee2:	11 24       	eor	r1, r1
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	2f 93       	push	r18
     eea:	3f 93       	push	r19
     eec:	4f 93       	push	r20
     eee:	5f 93       	push	r21
     ef0:	6f 93       	push	r22
     ef2:	7f 93       	push	r23
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	af 93       	push	r26
     efa:	bf 93       	push	r27
     efc:	ef 93       	push	r30
     efe:	ff 93       	push	r31
     f00:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     f04:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     f08:	ac 01       	movw	r20, r24
     f0a:	09 2e       	mov	r0, r25
     f0c:	00 0c       	add	r0, r0
     f0e:	66 0b       	sbc	r22, r22
     f10:	77 0b       	sbc	r23, r23
     f12:	9a 01       	movw	r18, r20
     f14:	11 27       	eor	r17, r17
     f16:	00 27       	eor	r16, r16
     f18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	40 2b       	or	r20, r16
     f26:	51 2b       	or	r21, r17
     f28:	62 2b       	or	r22, r18
     f2a:	73 2b       	or	r23, r19
     f2c:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
     f30:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
     f34:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
     f38:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
     f3c:	b0 9b       	sbis	0x16, 0	; 22
     f3e:	1a c0       	rjmp	.+52     	; 0xf74 <__vector_10+0x9a>
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	09 2e       	mov	r0, r25
     f44:	00 0c       	add	r0, r0
     f46:	aa 0b       	sbc	r26, r26
     f48:	bb 0b       	sbc	r27, r27
     f4a:	bc 01       	movw	r22, r24
     f4c:	55 27       	eor	r21, r21
     f4e:	44 27       	eor	r20, r20
     f50:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f54:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f58:	a0 e0       	ldi	r26, 0x00	; 0
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	84 2b       	or	r24, r20
     f5e:	95 2b       	or	r25, r21
     f60:	a6 2b       	or	r26, r22
     f62:	b7 2b       	or	r27, r23
     f64:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     f68:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     f6c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     f70:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     f74:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0xa>
     f78:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0xb>
     f7c:	30 97       	sbiw	r30, 0x00	; 0
     f7e:	39 f0       	breq	.+14     	; 0xf8e <__vector_10+0xb4>
     f80:	65 e0       	ldi	r22, 0x05	; 5
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xa>
     f88:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xb>
     f8c:	09 95       	icall
     f8e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	0f 90       	pop	r0
     fb4:	1f 90       	pop	r1
     fb6:	18 95       	reti

00000fb8 <__vector_11>:
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	ef 93       	push	r30
     fdc:	ff 93       	push	r31
     fde:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     fe2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     fe6:	ac 01       	movw	r20, r24
     fe8:	09 2e       	mov	r0, r25
     fea:	00 0c       	add	r0, r0
     fec:	66 0b       	sbc	r22, r22
     fee:	77 0b       	sbc	r23, r23
     ff0:	9a 01       	movw	r18, r20
     ff2:	11 27       	eor	r17, r17
     ff4:	00 27       	eor	r16, r16
     ff6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ffa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	40 2b       	or	r20, r16
    1004:	51 2b       	or	r21, r17
    1006:	62 2b       	or	r22, r18
    1008:	73 2b       	or	r23, r19
    100a:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    100e:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    1012:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    1016:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    101a:	b0 9b       	sbis	0x16, 0	; 22
    101c:	1a c0       	rjmp	.+52     	; 0x1052 <__vector_11+0x9a>
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	09 2e       	mov	r0, r25
    1022:	00 0c       	add	r0, r0
    1024:	aa 0b       	sbc	r26, r26
    1026:	bb 0b       	sbc	r27, r27
    1028:	bc 01       	movw	r22, r24
    102a:	55 27       	eor	r21, r21
    102c:	44 27       	eor	r20, r20
    102e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1032:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1036:	a0 e0       	ldi	r26, 0x00	; 0
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	84 2b       	or	r24, r20
    103c:	95 2b       	or	r25, r21
    103e:	a6 2b       	or	r26, r22
    1040:	b7 2b       	or	r27, r23
    1042:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1046:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    104a:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    104e:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1052:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0xc>
    1056:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0xd>
    105a:	30 97       	sbiw	r30, 0x00	; 0
    105c:	39 f0       	breq	.+14     	; 0x106c <__vector_11+0xb4>
    105e:	66 e0       	ldi	r22, 0x06	; 6
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xc>
    1066:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xd>
    106a:	09 95       	icall
    106c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	0f 90       	pop	r0
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	0f 90       	pop	r0
    1092:	1f 90       	pop	r1
    1094:	18 95       	reti

00001096 <__vector_12>:
    1096:	1f 92       	push	r1
    1098:	0f 92       	push	r0
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	0f 92       	push	r0
    109e:	11 24       	eor	r1, r1
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
    10bc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    10c0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    10c4:	ac 01       	movw	r20, r24
    10c6:	09 2e       	mov	r0, r25
    10c8:	00 0c       	add	r0, r0
    10ca:	66 0b       	sbc	r22, r22
    10cc:	77 0b       	sbc	r23, r23
    10ce:	9a 01       	movw	r18, r20
    10d0:	11 27       	eor	r17, r17
    10d2:	00 27       	eor	r16, r16
    10d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	40 2b       	or	r20, r16
    10e2:	51 2b       	or	r21, r17
    10e4:	62 2b       	or	r22, r18
    10e6:	73 2b       	or	r23, r19
    10e8:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    10ec:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    10f0:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    10f4:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    10f8:	b0 9b       	sbis	0x16, 0	; 22
    10fa:	1a c0       	rjmp	.+52     	; 0x1130 <__vector_12+0x9a>
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	09 2e       	mov	r0, r25
    1100:	00 0c       	add	r0, r0
    1102:	aa 0b       	sbc	r26, r26
    1104:	bb 0b       	sbc	r27, r27
    1106:	bc 01       	movw	r22, r24
    1108:	55 27       	eor	r21, r21
    110a:	44 27       	eor	r20, r20
    110c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1110:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	84 2b       	or	r24, r20
    111a:	95 2b       	or	r25, r21
    111c:	a6 2b       	or	r26, r22
    111e:	b7 2b       	or	r27, r23
    1120:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1124:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1128:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    112c:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1130:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0xe>
    1134:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0xf>
    1138:	30 97       	sbiw	r30, 0x00	; 0
    113a:	39 f0       	breq	.+14     	; 0x114a <__vector_12+0xb4>
    113c:	67 e0       	ldi	r22, 0x07	; 7
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0xe>
    1144:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0xf>
    1148:	09 95       	icall
    114a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    114e:	ff 91       	pop	r31
    1150:	ef 91       	pop	r30
    1152:	bf 91       	pop	r27
    1154:	af 91       	pop	r26
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	7f 91       	pop	r23
    115c:	6f 91       	pop	r22
    115e:	5f 91       	pop	r21
    1160:	4f 91       	pop	r20
    1162:	3f 91       	pop	r19
    1164:	2f 91       	pop	r18
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <__vector_13>:
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	2f 93       	push	r18
    1184:	3f 93       	push	r19
    1186:	4f 93       	push	r20
    1188:	5f 93       	push	r21
    118a:	6f 93       	push	r22
    118c:	7f 93       	push	r23
    118e:	8f 93       	push	r24
    1190:	9f 93       	push	r25
    1192:	af 93       	push	r26
    1194:	bf 93       	push	r27
    1196:	ef 93       	push	r30
    1198:	ff 93       	push	r31
    119a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    119e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    11a2:	ac 01       	movw	r20, r24
    11a4:	09 2e       	mov	r0, r25
    11a6:	00 0c       	add	r0, r0
    11a8:	66 0b       	sbc	r22, r22
    11aa:	77 0b       	sbc	r23, r23
    11ac:	9a 01       	movw	r18, r20
    11ae:	11 27       	eor	r17, r17
    11b0:	00 27       	eor	r16, r16
    11b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	40 2b       	or	r20, r16
    11c0:	51 2b       	or	r21, r17
    11c2:	62 2b       	or	r22, r18
    11c4:	73 2b       	or	r23, r19
    11c6:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    11ca:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    11ce:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    11d2:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    11d6:	b0 9b       	sbis	0x16, 0	; 22
    11d8:	1a c0       	rjmp	.+52     	; 0x120e <__vector_13+0x9a>
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	09 2e       	mov	r0, r25
    11de:	00 0c       	add	r0, r0
    11e0:	aa 0b       	sbc	r26, r26
    11e2:	bb 0b       	sbc	r27, r27
    11e4:	bc 01       	movw	r22, r24
    11e6:	55 27       	eor	r21, r21
    11e8:	44 27       	eor	r20, r20
    11ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11f2:	a0 e0       	ldi	r26, 0x00	; 0
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	84 2b       	or	r24, r20
    11f8:	95 2b       	or	r25, r21
    11fa:	a6 2b       	or	r26, r22
    11fc:	b7 2b       	or	r27, r23
    11fe:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1202:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1206:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    120a:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    120e:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x10>
    1212:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x11>
    1216:	30 97       	sbiw	r30, 0x00	; 0
    1218:	39 f0       	breq	.+14     	; 0x1228 <__vector_13+0xb4>
    121a:	68 e0       	ldi	r22, 0x08	; 8
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x10>
    1222:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x11>
    1226:	09 95       	icall
    1228:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    122c:	ff 91       	pop	r31
    122e:	ef 91       	pop	r30
    1230:	bf 91       	pop	r27
    1232:	af 91       	pop	r26
    1234:	9f 91       	pop	r25
    1236:	8f 91       	pop	r24
    1238:	7f 91       	pop	r23
    123a:	6f 91       	pop	r22
    123c:	5f 91       	pop	r21
    123e:	4f 91       	pop	r20
    1240:	3f 91       	pop	r19
    1242:	2f 91       	pop	r18
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <__vector_14>:
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	2f 93       	push	r18
    1262:	3f 93       	push	r19
    1264:	4f 93       	push	r20
    1266:	5f 93       	push	r21
    1268:	6f 93       	push	r22
    126a:	7f 93       	push	r23
    126c:	8f 93       	push	r24
    126e:	9f 93       	push	r25
    1270:	af 93       	push	r26
    1272:	bf 93       	push	r27
    1274:	ef 93       	push	r30
    1276:	ff 93       	push	r31
    1278:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    127c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    1280:	ac 01       	movw	r20, r24
    1282:	09 2e       	mov	r0, r25
    1284:	00 0c       	add	r0, r0
    1286:	66 0b       	sbc	r22, r22
    1288:	77 0b       	sbc	r23, r23
    128a:	9a 01       	movw	r18, r20
    128c:	11 27       	eor	r17, r17
    128e:	00 27       	eor	r16, r16
    1290:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1294:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	40 2b       	or	r20, r16
    129e:	51 2b       	or	r21, r17
    12a0:	62 2b       	or	r22, r18
    12a2:	73 2b       	or	r23, r19
    12a4:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    12a8:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    12ac:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    12b0:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    12b4:	b0 9b       	sbis	0x16, 0	; 22
    12b6:	1a c0       	rjmp	.+52     	; 0x12ec <__vector_14+0x9a>
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	09 2e       	mov	r0, r25
    12bc:	00 0c       	add	r0, r0
    12be:	aa 0b       	sbc	r26, r26
    12c0:	bb 0b       	sbc	r27, r27
    12c2:	bc 01       	movw	r22, r24
    12c4:	55 27       	eor	r21, r21
    12c6:	44 27       	eor	r20, r20
    12c8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12cc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12d0:	a0 e0       	ldi	r26, 0x00	; 0
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	84 2b       	or	r24, r20
    12d6:	95 2b       	or	r25, r21
    12d8:	a6 2b       	or	r26, r22
    12da:	b7 2b       	or	r27, r23
    12dc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    12e0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    12e4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    12e8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    12ec:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x12>
    12f0:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x13>
    12f4:	30 97       	sbiw	r30, 0x00	; 0
    12f6:	39 f0       	breq	.+14     	; 0x1306 <__vector_14+0xb4>
    12f8:	69 e0       	ldi	r22, 0x09	; 9
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x12>
    1300:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x13>
    1304:	09 95       	icall
    1306:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    130a:	ff 91       	pop	r31
    130c:	ef 91       	pop	r30
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <__vector_15>:
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	2f 93       	push	r18
    1340:	3f 93       	push	r19
    1342:	4f 93       	push	r20
    1344:	5f 93       	push	r21
    1346:	6f 93       	push	r22
    1348:	7f 93       	push	r23
    134a:	8f 93       	push	r24
    134c:	9f 93       	push	r25
    134e:	af 93       	push	r26
    1350:	bf 93       	push	r27
    1352:	ef 93       	push	r30
    1354:	ff 93       	push	r31
    1356:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    135a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    135e:	ac 01       	movw	r20, r24
    1360:	09 2e       	mov	r0, r25
    1362:	00 0c       	add	r0, r0
    1364:	66 0b       	sbc	r22, r22
    1366:	77 0b       	sbc	r23, r23
    1368:	9a 01       	movw	r18, r20
    136a:	11 27       	eor	r17, r17
    136c:	00 27       	eor	r16, r16
    136e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1372:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	40 2b       	or	r20, r16
    137c:	51 2b       	or	r21, r17
    137e:	62 2b       	or	r22, r18
    1380:	73 2b       	or	r23, r19
    1382:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    1386:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    138a:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    138e:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    1392:	b0 9b       	sbis	0x16, 0	; 22
    1394:	1a c0       	rjmp	.+52     	; 0x13ca <__vector_15+0x9a>
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	09 2e       	mov	r0, r25
    139a:	00 0c       	add	r0, r0
    139c:	aa 0b       	sbc	r26, r26
    139e:	bb 0b       	sbc	r27, r27
    13a0:	bc 01       	movw	r22, r24
    13a2:	55 27       	eor	r21, r21
    13a4:	44 27       	eor	r20, r20
    13a6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13aa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13ae:	a0 e0       	ldi	r26, 0x00	; 0
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	84 2b       	or	r24, r20
    13b4:	95 2b       	or	r25, r21
    13b6:	a6 2b       	or	r26, r22
    13b8:	b7 2b       	or	r27, r23
    13ba:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    13be:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    13c2:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    13c6:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    13ca:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x14>
    13ce:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x15>
    13d2:	30 97       	sbiw	r30, 0x00	; 0
    13d4:	39 f0       	breq	.+14     	; 0x13e4 <__vector_15+0xb4>
    13d6:	6a e0       	ldi	r22, 0x0A	; 10
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x14>
    13de:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x15>
    13e2:	09 95       	icall
    13e4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    13e8:	ff 91       	pop	r31
    13ea:	ef 91       	pop	r30
    13ec:	bf 91       	pop	r27
    13ee:	af 91       	pop	r26
    13f0:	9f 91       	pop	r25
    13f2:	8f 91       	pop	r24
    13f4:	7f 91       	pop	r23
    13f6:	6f 91       	pop	r22
    13f8:	5f 91       	pop	r21
    13fa:	4f 91       	pop	r20
    13fc:	3f 91       	pop	r19
    13fe:	2f 91       	pop	r18
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	0f 90       	pop	r0
    140a:	1f 90       	pop	r1
    140c:	18 95       	reti

0000140e <__vector_16>:
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	2f 93       	push	r18
    141e:	3f 93       	push	r19
    1420:	4f 93       	push	r20
    1422:	5f 93       	push	r21
    1424:	6f 93       	push	r22
    1426:	7f 93       	push	r23
    1428:	8f 93       	push	r24
    142a:	9f 93       	push	r25
    142c:	af 93       	push	r26
    142e:	bf 93       	push	r27
    1430:	ef 93       	push	r30
    1432:	ff 93       	push	r31
    1434:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    1438:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    143c:	ac 01       	movw	r20, r24
    143e:	09 2e       	mov	r0, r25
    1440:	00 0c       	add	r0, r0
    1442:	66 0b       	sbc	r22, r22
    1444:	77 0b       	sbc	r23, r23
    1446:	9a 01       	movw	r18, r20
    1448:	11 27       	eor	r17, r17
    144a:	00 27       	eor	r16, r16
    144c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1450:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	40 2b       	or	r20, r16
    145a:	51 2b       	or	r21, r17
    145c:	62 2b       	or	r22, r18
    145e:	73 2b       	or	r23, r19
    1460:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    1464:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    1468:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    146c:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    1470:	b0 9b       	sbis	0x16, 0	; 22
    1472:	1a c0       	rjmp	.+52     	; 0x14a8 <__vector_16+0x9a>
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	09 2e       	mov	r0, r25
    1478:	00 0c       	add	r0, r0
    147a:	aa 0b       	sbc	r26, r26
    147c:	bb 0b       	sbc	r27, r27
    147e:	bc 01       	movw	r22, r24
    1480:	55 27       	eor	r21, r21
    1482:	44 27       	eor	r20, r20
    1484:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1488:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    148c:	a0 e0       	ldi	r26, 0x00	; 0
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	84 2b       	or	r24, r20
    1492:	95 2b       	or	r25, r21
    1494:	a6 2b       	or	r26, r22
    1496:	b7 2b       	or	r27, r23
    1498:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    149c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    14a0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    14a4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    14a8:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x16>
    14ac:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x17>
    14b0:	30 97       	sbiw	r30, 0x00	; 0
    14b2:	39 f0       	breq	.+14     	; 0x14c2 <__vector_16+0xb4>
    14b4:	6b e0       	ldi	r22, 0x0B	; 11
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x16>
    14bc:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x17>
    14c0:	09 95       	icall
    14c2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	0f 90       	pop	r0
    14e8:	1f 90       	pop	r1
    14ea:	18 95       	reti

000014ec <__vector_17>:
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
    1512:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    1516:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    151a:	ac 01       	movw	r20, r24
    151c:	09 2e       	mov	r0, r25
    151e:	00 0c       	add	r0, r0
    1520:	66 0b       	sbc	r22, r22
    1522:	77 0b       	sbc	r23, r23
    1524:	9a 01       	movw	r18, r20
    1526:	11 27       	eor	r17, r17
    1528:	00 27       	eor	r16, r16
    152a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    152e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	40 2b       	or	r20, r16
    1538:	51 2b       	or	r21, r17
    153a:	62 2b       	or	r22, r18
    153c:	73 2b       	or	r23, r19
    153e:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    1542:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    1546:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    154a:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    154e:	b0 9b       	sbis	0x16, 0	; 22
    1550:	1a c0       	rjmp	.+52     	; 0x1586 <__vector_17+0x9a>
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	09 2e       	mov	r0, r25
    1556:	00 0c       	add	r0, r0
    1558:	aa 0b       	sbc	r26, r26
    155a:	bb 0b       	sbc	r27, r27
    155c:	bc 01       	movw	r22, r24
    155e:	55 27       	eor	r21, r21
    1560:	44 27       	eor	r20, r20
    1562:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1566:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    156a:	a0 e0       	ldi	r26, 0x00	; 0
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	84 2b       	or	r24, r20
    1570:	95 2b       	or	r25, r21
    1572:	a6 2b       	or	r26, r22
    1574:	b7 2b       	or	r27, r23
    1576:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    157a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    157e:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1582:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1586:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x18>
    158a:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x19>
    158e:	30 97       	sbiw	r30, 0x00	; 0
    1590:	39 f0       	breq	.+14     	; 0x15a0 <__vector_17+0xb4>
    1592:	6c e0       	ldi	r22, 0x0C	; 12
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x18>
    159a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x19>
    159e:	09 95       	icall
    15a0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    15a4:	ff 91       	pop	r31
    15a6:	ef 91       	pop	r30
    15a8:	bf 91       	pop	r27
    15aa:	af 91       	pop	r26
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	7f 91       	pop	r23
    15b2:	6f 91       	pop	r22
    15b4:	5f 91       	pop	r21
    15b6:	4f 91       	pop	r20
    15b8:	3f 91       	pop	r19
    15ba:	2f 91       	pop	r18
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	0f 90       	pop	r0
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	0f 90       	pop	r0
    15c6:	1f 90       	pop	r1
    15c8:	18 95       	reti

000015ca <__vector_18>:
    15ca:	1f 92       	push	r1
    15cc:	0f 92       	push	r0
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	0f 92       	push	r0
    15d2:	11 24       	eor	r1, r1
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	2f 93       	push	r18
    15da:	3f 93       	push	r19
    15dc:	4f 93       	push	r20
    15de:	5f 93       	push	r21
    15e0:	6f 93       	push	r22
    15e2:	7f 93       	push	r23
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	af 93       	push	r26
    15ea:	bf 93       	push	r27
    15ec:	ef 93       	push	r30
    15ee:	ff 93       	push	r31
    15f0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    15f4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    15f8:	ac 01       	movw	r20, r24
    15fa:	09 2e       	mov	r0, r25
    15fc:	00 0c       	add	r0, r0
    15fe:	66 0b       	sbc	r22, r22
    1600:	77 0b       	sbc	r23, r23
    1602:	9a 01       	movw	r18, r20
    1604:	11 27       	eor	r17, r17
    1606:	00 27       	eor	r16, r16
    1608:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    160c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	40 2b       	or	r20, r16
    1616:	51 2b       	or	r21, r17
    1618:	62 2b       	or	r22, r18
    161a:	73 2b       	or	r23, r19
    161c:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    1620:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    1624:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    1628:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    162c:	b0 9b       	sbis	0x16, 0	; 22
    162e:	1a c0       	rjmp	.+52     	; 0x1664 <__vector_18+0x9a>
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	09 2e       	mov	r0, r25
    1634:	00 0c       	add	r0, r0
    1636:	aa 0b       	sbc	r26, r26
    1638:	bb 0b       	sbc	r27, r27
    163a:	bc 01       	movw	r22, r24
    163c:	55 27       	eor	r21, r21
    163e:	44 27       	eor	r20, r20
    1640:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1644:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1648:	a0 e0       	ldi	r26, 0x00	; 0
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	84 2b       	or	r24, r20
    164e:	95 2b       	or	r25, r21
    1650:	a6 2b       	or	r26, r22
    1652:	b7 2b       	or	r27, r23
    1654:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1658:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    165c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1660:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1664:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x1a>
    1668:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1b>
    166c:	30 97       	sbiw	r30, 0x00	; 0
    166e:	39 f0       	breq	.+14     	; 0x167e <__vector_18+0xb4>
    1670:	6d e0       	ldi	r22, 0x0D	; 13
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1a>
    1678:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1b>
    167c:	09 95       	icall
    167e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    1682:	ff 91       	pop	r31
    1684:	ef 91       	pop	r30
    1686:	bf 91       	pop	r27
    1688:	af 91       	pop	r26
    168a:	9f 91       	pop	r25
    168c:	8f 91       	pop	r24
    168e:	7f 91       	pop	r23
    1690:	6f 91       	pop	r22
    1692:	5f 91       	pop	r21
    1694:	4f 91       	pop	r20
    1696:	3f 91       	pop	r19
    1698:	2f 91       	pop	r18
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	0f 90       	pop	r0
    16a4:	1f 90       	pop	r1
    16a6:	18 95       	reti

000016a8 <__vector_19>:
    16a8:	1f 92       	push	r1
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	2f 93       	push	r18
    16b8:	3f 93       	push	r19
    16ba:	4f 93       	push	r20
    16bc:	5f 93       	push	r21
    16be:	6f 93       	push	r22
    16c0:	7f 93       	push	r23
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	af 93       	push	r26
    16c8:	bf 93       	push	r27
    16ca:	ef 93       	push	r30
    16cc:	ff 93       	push	r31
    16ce:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    16d2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    16d6:	ac 01       	movw	r20, r24
    16d8:	09 2e       	mov	r0, r25
    16da:	00 0c       	add	r0, r0
    16dc:	66 0b       	sbc	r22, r22
    16de:	77 0b       	sbc	r23, r23
    16e0:	9a 01       	movw	r18, r20
    16e2:	11 27       	eor	r17, r17
    16e4:	00 27       	eor	r16, r16
    16e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	40 2b       	or	r20, r16
    16f4:	51 2b       	or	r21, r17
    16f6:	62 2b       	or	r22, r18
    16f8:	73 2b       	or	r23, r19
    16fa:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    16fe:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    1702:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    1706:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    170a:	b0 9b       	sbis	0x16, 0	; 22
    170c:	1a c0       	rjmp	.+52     	; 0x1742 <__vector_19+0x9a>
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	09 2e       	mov	r0, r25
    1712:	00 0c       	add	r0, r0
    1714:	aa 0b       	sbc	r26, r26
    1716:	bb 0b       	sbc	r27, r27
    1718:	bc 01       	movw	r22, r24
    171a:	55 27       	eor	r21, r21
    171c:	44 27       	eor	r20, r20
    171e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1722:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1726:	a0 e0       	ldi	r26, 0x00	; 0
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	84 2b       	or	r24, r20
    172c:	95 2b       	or	r25, r21
    172e:	a6 2b       	or	r26, r22
    1730:	b7 2b       	or	r27, r23
    1732:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1736:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    173a:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    173e:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1742:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x1c>
    1746:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1d>
    174a:	30 97       	sbiw	r30, 0x00	; 0
    174c:	39 f0       	breq	.+14     	; 0x175c <__vector_19+0xb4>
    174e:	6e e0       	ldi	r22, 0x0E	; 14
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1c>
    1756:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1d>
    175a:	09 95       	icall
    175c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    1760:	ff 91       	pop	r31
    1762:	ef 91       	pop	r30
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	7f 91       	pop	r23
    176e:	6f 91       	pop	r22
    1770:	5f 91       	pop	r21
    1772:	4f 91       	pop	r20
    1774:	3f 91       	pop	r19
    1776:	2f 91       	pop	r18
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <__vector_20>:
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	2f 93       	push	r18
    1796:	3f 93       	push	r19
    1798:	4f 93       	push	r20
    179a:	5f 93       	push	r21
    179c:	6f 93       	push	r22
    179e:	7f 93       	push	r23
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	ef 93       	push	r30
    17aa:	ff 93       	push	r31
    17ac:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    17b0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    17b4:	ac 01       	movw	r20, r24
    17b6:	09 2e       	mov	r0, r25
    17b8:	00 0c       	add	r0, r0
    17ba:	66 0b       	sbc	r22, r22
    17bc:	77 0b       	sbc	r23, r23
    17be:	9a 01       	movw	r18, r20
    17c0:	11 27       	eor	r17, r17
    17c2:	00 27       	eor	r16, r16
    17c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	40 2b       	or	r20, r16
    17d2:	51 2b       	or	r21, r17
    17d4:	62 2b       	or	r22, r18
    17d6:	73 2b       	or	r23, r19
    17d8:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    17dc:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    17e0:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    17e4:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    17e8:	b0 9b       	sbis	0x16, 0	; 22
    17ea:	1a c0       	rjmp	.+52     	; 0x1820 <__vector_20+0x9a>
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	09 2e       	mov	r0, r25
    17f0:	00 0c       	add	r0, r0
    17f2:	aa 0b       	sbc	r26, r26
    17f4:	bb 0b       	sbc	r27, r27
    17f6:	bc 01       	movw	r22, r24
    17f8:	55 27       	eor	r21, r21
    17fa:	44 27       	eor	r20, r20
    17fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1800:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1804:	a0 e0       	ldi	r26, 0x00	; 0
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	84 2b       	or	r24, r20
    180a:	95 2b       	or	r25, r21
    180c:	a6 2b       	or	r26, r22
    180e:	b7 2b       	or	r27, r23
    1810:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1814:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1818:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    181c:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1820:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x1e>
    1824:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x1f>
    1828:	30 97       	sbiw	r30, 0x00	; 0
    182a:	39 f0       	breq	.+14     	; 0x183a <__vector_20+0xb4>
    182c:	6f e0       	ldi	r22, 0x0F	; 15
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x1e>
    1834:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x1f>
    1838:	09 95       	icall
    183a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    183e:	ff 91       	pop	r31
    1840:	ef 91       	pop	r30
    1842:	bf 91       	pop	r27
    1844:	af 91       	pop	r26
    1846:	9f 91       	pop	r25
    1848:	8f 91       	pop	r24
    184a:	7f 91       	pop	r23
    184c:	6f 91       	pop	r22
    184e:	5f 91       	pop	r21
    1850:	4f 91       	pop	r20
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <__vector_21>:
    1864:	1f 92       	push	r1
    1866:	0f 92       	push	r0
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
    188a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    188e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    1892:	ac 01       	movw	r20, r24
    1894:	09 2e       	mov	r0, r25
    1896:	00 0c       	add	r0, r0
    1898:	66 0b       	sbc	r22, r22
    189a:	77 0b       	sbc	r23, r23
    189c:	9a 01       	movw	r18, r20
    189e:	11 27       	eor	r17, r17
    18a0:	00 27       	eor	r16, r16
    18a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	40 2b       	or	r20, r16
    18b0:	51 2b       	or	r21, r17
    18b2:	62 2b       	or	r22, r18
    18b4:	73 2b       	or	r23, r19
    18b6:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    18ba:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    18be:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    18c2:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    18c6:	b0 9b       	sbis	0x16, 0	; 22
    18c8:	1a c0       	rjmp	.+52     	; 0x18fe <__vector_21+0x9a>
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	09 2e       	mov	r0, r25
    18ce:	00 0c       	add	r0, r0
    18d0:	aa 0b       	sbc	r26, r26
    18d2:	bb 0b       	sbc	r27, r27
    18d4:	bc 01       	movw	r22, r24
    18d6:	55 27       	eor	r21, r21
    18d8:	44 27       	eor	r20, r20
    18da:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18de:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18e2:	a0 e0       	ldi	r26, 0x00	; 0
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	84 2b       	or	r24, r20
    18e8:	95 2b       	or	r25, r21
    18ea:	a6 2b       	or	r26, r22
    18ec:	b7 2b       	or	r27, r23
    18ee:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    18f2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    18f6:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    18fa:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    18fe:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x20>
    1902:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x21>
    1906:	30 97       	sbiw	r30, 0x00	; 0
    1908:	39 f0       	breq	.+14     	; 0x1918 <__vector_21+0xb4>
    190a:	60 e1       	ldi	r22, 0x10	; 16
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x20>
    1912:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x21>
    1916:	09 95       	icall
    1918:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    191c:	ff 91       	pop	r31
    191e:	ef 91       	pop	r30
    1920:	bf 91       	pop	r27
    1922:	af 91       	pop	r26
    1924:	9f 91       	pop	r25
    1926:	8f 91       	pop	r24
    1928:	7f 91       	pop	r23
    192a:	6f 91       	pop	r22
    192c:	5f 91       	pop	r21
    192e:	4f 91       	pop	r20
    1930:	3f 91       	pop	r19
    1932:	2f 91       	pop	r18
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <__vector_22>:
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	2f 93       	push	r18
    1952:	3f 93       	push	r19
    1954:	4f 93       	push	r20
    1956:	5f 93       	push	r21
    1958:	6f 93       	push	r22
    195a:	7f 93       	push	r23
    195c:	8f 93       	push	r24
    195e:	9f 93       	push	r25
    1960:	af 93       	push	r26
    1962:	bf 93       	push	r27
    1964:	ef 93       	push	r30
    1966:	ff 93       	push	r31
    1968:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    196c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    1970:	ac 01       	movw	r20, r24
    1972:	09 2e       	mov	r0, r25
    1974:	00 0c       	add	r0, r0
    1976:	66 0b       	sbc	r22, r22
    1978:	77 0b       	sbc	r23, r23
    197a:	9a 01       	movw	r18, r20
    197c:	11 27       	eor	r17, r17
    197e:	00 27       	eor	r16, r16
    1980:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1984:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	40 2b       	or	r20, r16
    198e:	51 2b       	or	r21, r17
    1990:	62 2b       	or	r22, r18
    1992:	73 2b       	or	r23, r19
    1994:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <timestamp>
    1998:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <timestamp+0x1>
    199c:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <timestamp+0x2>
    19a0:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <timestamp+0x3>
    19a4:	b0 9b       	sbis	0x16, 0	; 22
    19a6:	1a c0       	rjmp	.+52     	; 0x19dc <__vector_22+0x9a>
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	09 2e       	mov	r0, r25
    19ac:	00 0c       	add	r0, r0
    19ae:	aa 0b       	sbc	r26, r26
    19b0:	bb 0b       	sbc	r27, r27
    19b2:	bc 01       	movw	r22, r24
    19b4:	55 27       	eor	r21, r21
    19b6:	44 27       	eor	r20, r20
    19b8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19bc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19c0:	a0 e0       	ldi	r26, 0x00	; 0
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	84 2b       	or	r24, r20
    19c6:	95 2b       	or	r25, r21
    19c8:	a6 2b       	or	r26, r22
    19ca:	b7 2b       	or	r27, r23
    19cc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    19d0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    19d4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    19d8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    19dc:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x22>
    19e0:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x23>
    19e4:	30 97       	sbiw	r30, 0x00	; 0
    19e6:	39 f0       	breq	.+14     	; 0x19f6 <__vector_22+0xb4>
    19e8:	61 e1       	ldi	r22, 0x11	; 17
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x22>
    19f0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x23>
    19f4:	09 95       	icall
    19f6:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    19fa:	ff 91       	pop	r31
    19fc:	ef 91       	pop	r30
    19fe:	bf 91       	pop	r27
    1a00:	af 91       	pop	r26
    1a02:	9f 91       	pop	r25
    1a04:	8f 91       	pop	r24
    1a06:	7f 91       	pop	r23
    1a08:	6f 91       	pop	r22
    1a0a:	5f 91       	pop	r21
    1a0c:	4f 91       	pop	r20
    1a0e:	3f 91       	pop	r19
    1a10:	2f 91       	pop	r18
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	0f 90       	pop	r0
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	0f 90       	pop	r0
    1a1c:	1f 90       	pop	r1
    1a1e:	18 95       	reti

00001a20 <idle>:
    1a20:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    1a24:	78 94       	sei
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	83 bf       	out	0x33, r24	; 51
    1a2a:	88 95       	sleep
    1a2c:	fc cf       	rjmp	.-8      	; 0x1a26 <idle+0x6>

00001a2e <__vector_9>:
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
    1a4c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    1a50:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
    1a5a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
    1a5e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <timerQ>
    1a62:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <timerQ+0x1>
    1a66:	30 97       	sbiw	r30, 0x00	; 0
    1a68:	01 f1       	breq	.+64     	; 0x1aaa <__vector_9+0x7c>
    1a6a:	42 81       	ldd	r20, Z+2	; 0x02
    1a6c:	53 81       	ldd	r21, Z+3	; 0x03
    1a6e:	64 81       	ldd	r22, Z+4	; 0x04
    1a70:	75 81       	ldd	r23, Z+5	; 0x05
    1a72:	86 17       	cp	r24, r22
    1a74:	97 07       	cpc	r25, r23
    1a76:	c9 f4       	brne	.+50     	; 0x1aaa <__vector_9+0x7c>
    1a78:	ca 01       	movw	r24, r20
    1a7a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a7e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a82:	42 1b       	sub	r20, r18
    1a84:	53 0b       	sbc	r21, r19
    1a86:	41 30       	cpi	r20, 0x01	; 1
    1a88:	51 05       	cpc	r21, r1
    1a8a:	29 f4       	brne	.+10     	; 0x1a96 <__vector_9+0x68>
    1a8c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a90:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1a9a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1a9e:	ef e6       	ldi	r30, 0x6F	; 111
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	82 60       	ori	r24, 0x02	; 2
    1aa6:	80 83       	st	Z, r24
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <__vector_9+0x86>
    1aaa:	ef e6       	ldi	r30, 0x6F	; 111
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8d 7f       	andi	r24, 0xFD	; 253
    1ab2:	80 83       	st	Z, r24
    1ab4:	ff 91       	pop	r31
    1ab6:	ef 91       	pop	r30
    1ab8:	9f 91       	pop	r25
    1aba:	8f 91       	pop	r24
    1abc:	7f 91       	pop	r23
    1abe:	6f 91       	pop	r22
    1ac0:	5f 91       	pop	r21
    1ac2:	4f 91       	pop	r20
    1ac4:	3f 91       	pop	r19
    1ac6:	2f 91       	pop	r18
    1ac8:	0f 90       	pop	r0
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	0f 90       	pop	r0
    1ace:	1f 90       	pop	r1
    1ad0:	18 95       	reti

00001ad2 <__vector_7>:
    1ad2:	1f 92       	push	r1
    1ad4:	0f 92       	push	r0
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	0f 92       	push	r0
    1ada:	11 24       	eor	r1, r1
    1adc:	cf 92       	push	r12
    1ade:	df 92       	push	r13
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	2f 93       	push	r18
    1ae6:	3f 93       	push	r19
    1ae8:	4f 93       	push	r20
    1aea:	5f 93       	push	r21
    1aec:	6f 93       	push	r22
    1aee:	7f 93       	push	r23
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	af 93       	push	r26
    1af6:	bf 93       	push	r27
    1af8:	ef 93       	push	r30
    1afa:	ff 93       	push	r31
    1afc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    1b00:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
    1b04:	6c 01       	movw	r12, r24
    1b06:	09 2e       	mov	r0, r25
    1b08:	00 0c       	add	r0, r0
    1b0a:	ee 08       	sbc	r14, r14
    1b0c:	ff 08       	sbc	r15, r15
    1b0e:	76 01       	movw	r14, r12
    1b10:	dd 24       	eor	r13, r13
    1b12:	cc 24       	eor	r12, r12
    1b14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	c4 2a       	or	r12, r20
    1b22:	d5 2a       	or	r13, r21
    1b24:	e6 2a       	or	r14, r22
    1b26:	f7 2a       	or	r15, r23
    1b28:	b0 9b       	sbis	0x16, 0	; 22
    1b2a:	1e c0       	rjmp	.+60     	; 0x1b68 <__vector_7+0x96>
    1b2c:	6c 01       	movw	r12, r24
    1b2e:	2f ef       	ldi	r18, 0xFF	; 255
    1b30:	c2 1a       	sub	r12, r18
    1b32:	d2 0a       	sbc	r13, r18
    1b34:	0d 2c       	mov	r0, r13
    1b36:	00 0c       	add	r0, r0
    1b38:	ee 08       	sbc	r14, r14
    1b3a:	ff 08       	sbc	r15, r15
    1b3c:	d6 01       	movw	r26, r12
    1b3e:	99 27       	eor	r25, r25
    1b40:	88 27       	eor	r24, r24
    1b42:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b46:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b4a:	e1 2c       	mov	r14, r1
    1b4c:	f1 2c       	mov	r15, r1
    1b4e:	c8 2a       	or	r12, r24
    1b50:	d9 2a       	or	r13, r25
    1b52:	ea 2a       	or	r14, r26
    1b54:	fb 2a       	or	r15, r27
    1b56:	08 c0       	rjmp	.+16     	; 0x1b68 <__vector_7+0x96>
    1b58:	84 e2       	ldi	r24, 0x24	; 36
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <dequeue>
    1b60:	66 e2       	ldi	r22, 0x26	; 38
    1b62:	71 e0       	ldi	r23, 0x01	; 1
    1b64:	0e 94 77 04 	call	0x8ee	; 0x8ee <enqueueByDeadline>
    1b68:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <timerQ>
    1b6c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <timerQ+0x1>
    1b70:	30 97       	sbiw	r30, 0x00	; 0
    1b72:	69 f0       	breq	.+26     	; 0x1b8e <__vector_7+0xbc>
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	a4 81       	ldd	r26, Z+4	; 0x04
    1b7a:	b5 81       	ldd	r27, Z+5	; 0x05
    1b7c:	8c 19       	sub	r24, r12
    1b7e:	9d 09       	sbc	r25, r13
    1b80:	ae 09       	sbc	r26, r14
    1b82:	bf 09       	sbc	r27, r15
    1b84:	18 16       	cp	r1, r24
    1b86:	19 06       	cpc	r1, r25
    1b88:	1a 06       	cpc	r1, r26
    1b8a:	1b 06       	cpc	r1, r27
    1b8c:	2c f7       	brge	.-54     	; 0x1b58 <__vector_7+0x86>
    1b8e:	30 97       	sbiw	r30, 0x00	; 0
    1b90:	21 f1       	breq	.+72     	; 0x1bda <__vector_7+0x108>
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	a4 81       	ldd	r26, Z+4	; 0x04
    1b98:	b5 81       	ldd	r27, Z+5	; 0x05
    1b9a:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    1b9e:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1ba2:	2a 17       	cp	r18, r26
    1ba4:	3b 07       	cpc	r19, r27
    1ba6:	c9 f4       	brne	.+50     	; 0x1bda <__vector_7+0x108>
    1ba8:	9c 01       	movw	r18, r24
    1baa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bb2:	84 1b       	sub	r24, r20
    1bb4:	95 0b       	sbc	r25, r21
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	31 f4       	brne	.+12     	; 0x1bc6 <__vector_7+0xf4>
    1bba:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bbe:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bc2:	2f 5f       	subi	r18, 0xFF	; 255
    1bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1bca:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1bce:	ef e6       	ldi	r30, 0x6F	; 111
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	82 60       	ori	r24, 0x02	; 2
    1bd6:	80 83       	st	Z, r24
    1bd8:	05 c0       	rjmp	.+10     	; 0x1be4 <__vector_7+0x112>
    1bda:	ef e6       	ldi	r30, 0x6F	; 111
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8d 7f       	andi	r24, 0xFD	; 253
    1be2:	80 83       	st	Z, r24
    1be4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <schedule>
    1be8:	ff 91       	pop	r31
    1bea:	ef 91       	pop	r30
    1bec:	bf 91       	pop	r27
    1bee:	af 91       	pop	r26
    1bf0:	9f 91       	pop	r25
    1bf2:	8f 91       	pop	r24
    1bf4:	7f 91       	pop	r23
    1bf6:	6f 91       	pop	r22
    1bf8:	5f 91       	pop	r21
    1bfa:	4f 91       	pop	r20
    1bfc:	3f 91       	pop	r19
    1bfe:	2f 91       	pop	r18
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	0f 90       	pop	r0
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	0f 90       	pop	r0
    1c0e:	1f 90       	pop	r1
    1c10:	18 95       	reti

00001c12 <async>:
    1c12:	3f 92       	push	r3
    1c14:	4f 92       	push	r4
    1c16:	5f 92       	push	r5
    1c18:	6f 92       	push	r6
    1c1a:	7f 92       	push	r7
    1c1c:	8f 92       	push	r8
    1c1e:	9f 92       	push	r9
    1c20:	af 92       	push	r10
    1c22:	bf 92       	push	r11
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	2b 01       	movw	r4, r22
    1c36:	3c 01       	movw	r6, r24
    1c38:	49 01       	movw	r8, r18
    1c3a:	5a 01       	movw	r10, r20
    1c3c:	8f b7       	in	r24, 0x3f	; 63
    1c3e:	80 78       	andi	r24, 0x80	; 128
    1c40:	38 2e       	mov	r3, r24
    1c42:	f8 94       	cli
    1c44:	86 e0       	ldi	r24, 0x06	; 6
    1c46:	91 e0       	ldi	r25, 0x01	; 1
    1c48:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <dequeue>
    1c4c:	ec 01       	movw	r28, r24
    1c4e:	1b 87       	std	Y+11, r17	; 0x0b
    1c50:	0a 87       	std	Y+10, r16	; 0x0a
    1c52:	fd 86       	std	Y+13, r15	; 0x0d
    1c54:	ec 86       	std	Y+12, r14	; 0x0c
    1c56:	df 86       	std	Y+15, r13	; 0x0f
    1c58:	ce 86       	std	Y+14, r12	; 0x0e
    1c5a:	33 20       	and	r3, r3
    1c5c:	61 f0       	breq	.+24     	; 0x1c76 <async+0x64>
    1c5e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c62:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1c66:	02 80       	ldd	r0, Z+2	; 0x02
    1c68:	f3 81       	ldd	r31, Z+3	; 0x03
    1c6a:	e0 2d       	mov	r30, r0
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	a4 81       	ldd	r26, Z+4	; 0x04
    1c72:	b5 81       	ldd	r27, Z+5	; 0x05
    1c74:	08 c0       	rjmp	.+16     	; 0x1c86 <async+0x74>
    1c76:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <timestamp>
    1c7a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <timestamp+0x1>
    1c7e:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <timestamp+0x2>
    1c82:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <timestamp+0x3>
    1c86:	48 0e       	add	r4, r24
    1c88:	59 1e       	adc	r5, r25
    1c8a:	6a 1e       	adc	r6, r26
    1c8c:	7b 1e       	adc	r7, r27
    1c8e:	4a 82       	std	Y+2, r4	; 0x02
    1c90:	5b 82       	std	Y+3, r5	; 0x03
    1c92:	6c 82       	std	Y+4, r6	; 0x04
    1c94:	7d 82       	std	Y+5, r7	; 0x05
    1c96:	18 14       	cp	r1, r8
    1c98:	19 04       	cpc	r1, r9
    1c9a:	1a 04       	cpc	r1, r10
    1c9c:	1b 04       	cpc	r1, r11
    1c9e:	44 f0       	brlt	.+16     	; 0x1cb0 <async+0x9e>
    1ca0:	0f 2e       	mov	r0, r31
    1ca2:	88 24       	eor	r8, r8
    1ca4:	8a 94       	dec	r8
    1ca6:	98 2c       	mov	r9, r8
    1ca8:	a8 2c       	mov	r10, r8
    1caa:	ff e7       	ldi	r31, 0x7F	; 127
    1cac:	bf 2e       	mov	r11, r31
    1cae:	f0 2d       	mov	r31, r0
    1cb0:	84 0c       	add	r8, r4
    1cb2:	95 1c       	adc	r9, r5
    1cb4:	a6 1c       	adc	r10, r6
    1cb6:	b7 1c       	adc	r11, r7
    1cb8:	8e 82       	std	Y+6, r8	; 0x06
    1cba:	9f 82       	std	Y+7, r9	; 0x07
    1cbc:	a8 86       	std	Y+8, r10	; 0x08
    1cbe:	b9 86       	std	Y+9, r11	; 0x09
    1cc0:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    1cc4:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1cc8:	c9 01       	movw	r24, r18
    1cca:	03 2e       	mov	r0, r19
    1ccc:	00 0c       	add	r0, r0
    1cce:	aa 0b       	sbc	r26, r26
    1cd0:	bb 0b       	sbc	r27, r27
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	99 27       	eor	r25, r25
    1cd6:	88 27       	eor	r24, r24
    1cd8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cdc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	84 2b       	or	r24, r20
    1ce6:	95 2b       	or	r25, r21
    1ce8:	a6 2b       	or	r26, r22
    1cea:	b7 2b       	or	r27, r23
    1cec:	b0 9b       	sbis	0x16, 0	; 22
    1cee:	13 c0       	rjmp	.+38     	; 0x1d16 <async+0x104>
    1cf0:	c9 01       	movw	r24, r18
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	09 2e       	mov	r0, r25
    1cf6:	00 0c       	add	r0, r0
    1cf8:	aa 0b       	sbc	r26, r26
    1cfa:	bb 0b       	sbc	r27, r27
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	99 27       	eor	r25, r25
    1d00:	88 27       	eor	r24, r24
    1d02:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d06:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	84 2b       	or	r24, r20
    1d10:	95 2b       	or	r25, r21
    1d12:	a6 2b       	or	r26, r22
    1d14:	b7 2b       	or	r27, r23
    1d16:	48 1a       	sub	r4, r24
    1d18:	59 0a       	sbc	r5, r25
    1d1a:	6a 0a       	sbc	r6, r26
    1d1c:	7b 0a       	sbc	r7, r27
    1d1e:	14 14       	cp	r1, r4
    1d20:	15 04       	cpc	r1, r5
    1d22:	16 04       	cpc	r1, r6
    1d24:	17 04       	cpc	r1, r7
    1d26:	ac f5       	brge	.+106    	; 0x1d92 <async+0x180>
    1d28:	64 e2       	ldi	r22, 0x24	; 36
    1d2a:	71 e0       	ldi	r23, 0x01	; 1
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	0e 94 a8 04 	call	0x950	; 0x950 <enqueueByBaseline>
    1d32:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <timerQ>
    1d36:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <timerQ+0x1>
    1d3a:	30 97       	sbiw	r30, 0x00	; 0
    1d3c:	21 f1       	breq	.+72     	; 0x1d86 <async+0x174>
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	a4 81       	ldd	r26, Z+4	; 0x04
    1d44:	b5 81       	ldd	r27, Z+5	; 0x05
    1d46:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
    1d4a:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
    1d4e:	2a 17       	cp	r18, r26
    1d50:	3b 07       	cpc	r19, r27
    1d52:	c9 f4       	brne	.+50     	; 0x1d86 <async+0x174>
    1d54:	9c 01       	movw	r18, r24
    1d56:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d5a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d5e:	84 1b       	sub	r24, r20
    1d60:	95 0b       	sbc	r25, r21
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	31 f4       	brne	.+12     	; 0x1d72 <async+0x160>
    1d66:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d6a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d6e:	2f 5f       	subi	r18, 0xFF	; 255
    1d70:	3f 4f       	sbci	r19, 0xFF	; 255
    1d72:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d76:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d7a:	ef e6       	ldi	r30, 0x6F	; 111
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	82 60       	ori	r24, 0x02	; 2
    1d82:	80 83       	st	Z, r24
    1d84:	39 c0       	rjmp	.+114    	; 0x1df8 <async+0x1e6>
    1d86:	ef e6       	ldi	r30, 0x6F	; 111
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8d 7f       	andi	r24, 0xFD	; 253
    1d8e:	80 83       	st	Z, r24
    1d90:	33 c0       	rjmp	.+102    	; 0x1df8 <async+0x1e6>
    1d92:	66 e2       	ldi	r22, 0x26	; 38
    1d94:	71 e0       	ldi	r23, 0x01	; 1
    1d96:	ce 01       	movw	r24, r28
    1d98:	0e 94 77 04 	call	0x8ee	; 0x8ee <enqueueByDeadline>
    1d9c:	33 20       	and	r3, r3
    1d9e:	61 f1       	breq	.+88     	; 0x1df8 <async+0x1e6>
    1da0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1da4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1da8:	89 2b       	or	r24, r25
    1daa:	31 f1       	breq	.+76     	; 0x1df8 <async+0x1e6>
    1dac:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <msgQ>
    1db0:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <msgQ+0x1>
    1db4:	86 81       	ldd	r24, Z+6	; 0x06
    1db6:	97 81       	ldd	r25, Z+7	; 0x07
    1db8:	a0 85       	ldd	r26, Z+8	; 0x08
    1dba:	b1 85       	ldd	r27, Z+9	; 0x09
    1dbc:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1dc0:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1dc4:	02 80       	ldd	r0, Z+2	; 0x02
    1dc6:	f3 81       	ldd	r31, Z+3	; 0x03
    1dc8:	e0 2d       	mov	r30, r0
    1dca:	46 81       	ldd	r20, Z+6	; 0x06
    1dcc:	57 81       	ldd	r21, Z+7	; 0x07
    1dce:	60 85       	ldd	r22, Z+8	; 0x08
    1dd0:	71 85       	ldd	r23, Z+9	; 0x09
    1dd2:	84 1b       	sub	r24, r20
    1dd4:	95 0b       	sbc	r25, r21
    1dd6:	a6 0b       	sbc	r26, r22
    1dd8:	b7 0b       	sbc	r27, r23
    1dda:	72 f4       	brpl	.+28     	; 0x1df8 <async+0x1e6>
    1ddc:	84 e0       	ldi	r24, 0x04	; 4
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	0e 94 04 05 	call	0xa08	; 0xa08 <pop>
    1de4:	62 e0       	ldi	r22, 0x02	; 2
    1de6:	71 e0       	ldi	r23, 0x01	; 1
    1de8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <push>
    1dec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    1df0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    1df4:	0e 94 57 04 	call	0x8ae	; 0x8ae <dispatch>
    1df8:	33 20       	and	r3, r3
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <async+0x1ec>
    1dfc:	78 94       	sei
    1dfe:	ce 01       	movw	r24, r28
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	ff 90       	pop	r15
    1e0a:	ef 90       	pop	r14
    1e0c:	df 90       	pop	r13
    1e0e:	cf 90       	pop	r12
    1e10:	bf 90       	pop	r11
    1e12:	af 90       	pop	r10
    1e14:	9f 90       	pop	r9
    1e16:	8f 90       	pop	r8
    1e18:	7f 90       	pop	r7
    1e1a:	6f 90       	pop	r6
    1e1c:	5f 90       	pop	r5
    1e1e:	4f 90       	pop	r4
    1e20:	3f 90       	pop	r3
    1e22:	08 95       	ret

00001e24 <sync>:
    1e24:	cf 92       	push	r12
    1e26:	df 92       	push	r13
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	ec 01       	movw	r28, r24
    1e36:	7b 01       	movw	r14, r22
    1e38:	6a 01       	movw	r12, r20
    1e3a:	1f b7       	in	r17, 0x3f	; 63
    1e3c:	10 78       	andi	r17, 0x80	; 128
    1e3e:	f8 94       	cli
    1e40:	a8 81       	ld	r26, Y
    1e42:	b9 81       	ldd	r27, Y+1	; 0x01
    1e44:	10 97       	sbiw	r26, 0x00	; 0
    1e46:	19 f4       	brne	.+6      	; 0x1e4e <sync+0x2a>
    1e48:	35 c0       	rjmp	.+106    	; 0x1eb4 <sync+0x90>
    1e4a:	a0 81       	ld	r26, Z
    1e4c:	b1 81       	ldd	r27, Z+1	; 0x01
    1e4e:	14 96       	adiw	r26, 0x04	; 4
    1e50:	ed 91       	ld	r30, X+
    1e52:	fc 91       	ld	r31, X
    1e54:	15 97       	sbiw	r26, 0x05	; 5
    1e56:	30 97       	sbiw	r30, 0x00	; 0
    1e58:	c1 f7       	brne	.-16     	; 0x1e4a <sync+0x26>
    1e5a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e5e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e62:	a2 17       	cp	r26, r18
    1e64:	b3 07       	cpc	r27, r19
    1e66:	11 f0       	breq	.+4      	; 0x1e6c <sync+0x48>
    1e68:	11 11       	cpse	r17, r1
    1e6a:	07 c0       	rjmp	.+14     	; 0x1e7a <sync+0x56>
    1e6c:	11 23       	and	r17, r17
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <sync+0x4e>
    1e70:	4a c0       	rjmp	.+148    	; 0x1f06 <sync+0xe2>
    1e72:	78 94       	sei
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	9f ef       	ldi	r25, 0xFF	; 255
    1e78:	4e c0       	rjmp	.+156    	; 0x1f16 <sync+0xf2>
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	19 f0       	breq	.+6      	; 0x1e88 <sync+0x64>
    1e82:	fc 01       	movw	r30, r24
    1e84:	15 82       	std	Z+5, r1	; 0x05
    1e86:	14 82       	std	Z+4, r1	; 0x04
    1e88:	3b 83       	std	Y+3, r19	; 0x03
    1e8a:	2a 83       	std	Y+2, r18	; 0x02
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	d5 83       	std	Z+5, r29	; 0x05
    1e90:	c4 83       	std	Z+4, r28	; 0x04
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 57 04 	call	0x8ae	; 0x8ae <dispatch>
    1e98:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e9c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	89 2b       	or	r24, r25
    1ea6:	31 f4       	brne	.+12     	; 0x1eb4 <sync+0x90>
    1ea8:	11 23       	and	r17, r17
    1eaa:	81 f1       	breq	.+96     	; 0x1f0c <sync+0xe8>
    1eac:	78 94       	sei
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	31 c0       	rjmp	.+98     	; 0x1f16 <sync+0xf2>
    1eb4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1eb8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ebc:	99 83       	std	Y+1, r25	; 0x01
    1ebe:	88 83       	st	Y, r24
    1ec0:	11 23       	and	r17, r17
    1ec2:	29 f0       	breq	.+10     	; 0x1ece <sync+0xaa>
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	09 f0       	breq	.+2      	; 0x1ece <sync+0xaa>
    1ecc:	78 94       	sei
    1ece:	b6 01       	movw	r22, r12
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	f7 01       	movw	r30, r14
    1ed4:	09 95       	icall
    1ed6:	f8 2e       	mov	r15, r24
    1ed8:	09 2f       	mov	r16, r25
    1eda:	8f b7       	in	r24, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	19 82       	std	Y+1, r1	; 0x01
    1ee0:	18 82       	st	Y, r1
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee6:	82 30       	cpi	r24, 0x02	; 2
    1ee8:	91 05       	cpc	r25, r1
    1eea:	38 f0       	brcs	.+14     	; 0x1efa <sync+0xd6>
    1eec:	1b 82       	std	Y+3, r1	; 0x03
    1eee:	1a 82       	std	Y+2, r1	; 0x02
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	15 82       	std	Z+5, r1	; 0x05
    1ef4:	14 82       	std	Z+4, r1	; 0x04
    1ef6:	0e 94 57 04 	call	0x8ae	; 0x8ae <dispatch>
    1efa:	11 23       	and	r17, r17
    1efc:	51 f0       	breq	.+20     	; 0x1f12 <sync+0xee>
    1efe:	78 94       	sei
    1f00:	8f 2d       	mov	r24, r15
    1f02:	90 2f       	mov	r25, r16
    1f04:	08 c0       	rjmp	.+16     	; 0x1f16 <sync+0xf2>
    1f06:	8f ef       	ldi	r24, 0xFF	; 255
    1f08:	9f ef       	ldi	r25, 0xFF	; 255
    1f0a:	05 c0       	rjmp	.+10     	; 0x1f16 <sync+0xf2>
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <sync+0xf2>
    1f12:	8f 2d       	mov	r24, r15
    1f14:	90 2f       	mov	r25, r16
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	ff 90       	pop	r15
    1f20:	ef 90       	pop	r14
    1f22:	df 90       	pop	r13
    1f24:	cf 90       	pop	r12
    1f26:	08 95       	ret

00001f28 <run>:
    1f28:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f2c:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f30:	86 e2       	ldi	r24, 0x26	; 38
    1f32:	91 e0       	ldi	r25, 0x01	; 1
    1f34:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <dequeue>
    1f38:	ec 01       	movw	r28, r24
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	93 83       	std	Z+3, r25	; 0x03
    1f3e:	82 83       	std	Z+2, r24	; 0x02
    1f40:	78 94       	sei
    1f42:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f44:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f46:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f48:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f4e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sync>
    1f52:	8f b7       	in	r24, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	66 e0       	ldi	r22, 0x06	; 6
    1f58:	71 e0       	ldi	r23, 0x01	; 1
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <insert>
    1f60:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1f64:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1f68:	01 90       	ld	r0, Z+
    1f6a:	f0 81       	ld	r31, Z
    1f6c:	e0 2d       	mov	r30, r0
    1f6e:	c2 81       	ldd	r28, Z+2	; 0x02
    1f70:	d3 81       	ldd	r29, Z+3	; 0x03
    1f72:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <msgQ>
    1f76:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <msgQ+0x1>
    1f7a:	30 97       	sbiw	r30, 0x00	; 0
    1f7c:	a1 f0       	breq	.+40     	; 0x1fa6 <run+0x7e>
    1f7e:	20 97       	sbiw	r28, 0x00	; 0
    1f80:	99 f2       	breq	.-90     	; 0x1f28 <run>
    1f82:	86 81       	ldd	r24, Z+6	; 0x06
    1f84:	97 81       	ldd	r25, Z+7	; 0x07
    1f86:	a0 85       	ldd	r26, Z+8	; 0x08
    1f88:	b1 85       	ldd	r27, Z+9	; 0x09
    1f8a:	4e 81       	ldd	r20, Y+6	; 0x06
    1f8c:	5f 81       	ldd	r21, Y+7	; 0x07
    1f8e:	68 85       	ldd	r22, Y+8	; 0x08
    1f90:	79 85       	ldd	r23, Y+9	; 0x09
    1f92:	84 1b       	sub	r24, r20
    1f94:	95 0b       	sbc	r25, r21
    1f96:	a6 0b       	sbc	r26, r22
    1f98:	b7 0b       	sbc	r27, r23
    1f9a:	18 16       	cp	r1, r24
    1f9c:	19 06       	cpc	r1, r25
    1f9e:	1a 06       	cpc	r1, r26
    1fa0:	1b 06       	cpc	r1, r27
    1fa2:	0c f0       	brlt	.+2      	; 0x1fa6 <run+0x7e>
    1fa4:	c1 cf       	rjmp	.-126    	; 0x1f28 <run>
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	91 e0       	ldi	r25, 0x01	; 1
    1faa:	0e 94 04 05 	call	0xa08	; 0xa08 <pop>
    1fae:	64 e0       	ldi	r22, 0x04	; 4
    1fb0:	71 e0       	ldi	r23, 0x01	; 1
    1fb2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <push>
    1fb6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    1fba:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <run+0x9c>
    1fc0:	a0 81       	ld	r26, Z
    1fc2:	b1 81       	ldd	r27, Z+1	; 0x01
    1fc4:	14 96       	adiw	r26, 0x04	; 4
    1fc6:	ed 91       	ld	r30, X+
    1fc8:	fc 91       	ld	r31, X
    1fca:	15 97       	sbiw	r26, 0x05	; 5
    1fcc:	30 97       	sbiw	r30, 0x00	; 0
    1fce:	c1 f7       	brne	.-16     	; 0x1fc0 <run+0x98>
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 57 04 	call	0x8ae	; 0x8ae <dispatch>
    1fd6:	a8 cf       	rjmp	.-176    	; 0x1f28 <run>

00001fd8 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    1fd8:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    1fda:	42 31       	cpi	r20, 0x12	; 18
    1fdc:	b8 f4       	brcc	.+46     	; 0x200c <install+0x34>
        char status;
        DISABLE(status);
    1fde:	9f b7       	in	r25, 0x3f	; 63
    1fe0:	90 78       	andi	r25, 0x80	; 128
    1fe2:	f8 94       	cli
        otable[i] = obj;
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	44 0f       	add	r20, r20
    1fe8:	55 1f       	adc	r21, r21
    1fea:	da 01       	movw	r26, r20
    1fec:	a8 5d       	subi	r26, 0xD8	; 216
    1fee:	be 4f       	sbci	r27, 0xFE	; 254
    1ff0:	ed 93       	st	X+, r30
    1ff2:	fc 93       	st	X, r31
        mtable[i] = m;
    1ff4:	da 01       	movw	r26, r20
    1ff6:	a0 54       	subi	r26, 0x40	; 64
    1ff8:	be 4f       	sbci	r27, 0xFE	; 254
    1ffa:	6d 93       	st	X+, r22
    1ffc:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1ffe:	21 e0       	ldi	r18, 0x01	; 1
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	33 83       	std	Z+3, r19	; 0x03
    2004:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    2006:	99 23       	and	r25, r25
    2008:	09 f0       	breq	.+2      	; 0x200c <install+0x34>
    200a:	78 94       	sei
    200c:	08 95       	ret

0000200e <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    200e:	8c 01       	movw	r16, r24
    2010:	7b 01       	movw	r14, r22
    2012:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2014:	8f b7       	in	r24, 0x3f	; 63
    2016:	f8 94       	cli
    initialize();
    2018:	0e 94 b8 03 	call	0x770	; 0x770 <initialize>
    ENABLE(1);
    201c:	78 94       	sei
    if (m != NULL)
    201e:	e1 14       	cp	r14, r1
    2020:	f1 04       	cpc	r15, r1
    2022:	41 f0       	breq	.+16     	; 0x2034 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	a9 01       	movw	r20, r18
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	cb 01       	movw	r24, r22
    2030:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <async>
    DISABLE(status);
    2034:	8f b7       	in	r24, 0x3f	; 63
    2036:	f8 94       	cli
    idle();
    2038:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <idle>

0000203c <turnOffPin>:

#include "Writing.h"
#include <avr/io.h>

void turnOffPin(PortWriter *self, int pin){
	PORTE &= ~(1 << pin);
    203c:	2e b1       	in	r18, 0x0e	; 14
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <turnOffPin+0xc>
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	6a 95       	dec	r22
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <turnOffPin+0x8>
    204c:	80 95       	com	r24
    204e:	82 23       	and	r24, r18
    2050:	8e b9       	out	0x0e, r24	; 14
    2052:	08 95       	ret

00002054 <invertPin>:
	//blinkDisplay(0, pin);
}

void invertPin(PortWriter *self, int pin){
	PORTE ^= (1 << pin); 
    2054:	2e b1       	in	r18, 0x0e	; 14
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <invertPin+0xc>
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	6a 95       	dec	r22
    2062:	e2 f7       	brpl	.-8      	; 0x205c <invertPin+0x8>
    2064:	82 27       	eor	r24, r18
    2066:	8e b9       	out	0x0e, r24	; 14
	int temp = (PORTE >> pin) & 1;
    2068:	8e b1       	in	r24, 0x0e	; 14
    206a:	08 95       	ret

0000206c <__divmodhi4>:
    206c:	97 fb       	bst	r25, 7
    206e:	07 2e       	mov	r0, r23
    2070:	16 f4       	brtc	.+4      	; 0x2076 <__divmodhi4+0xa>
    2072:	00 94       	com	r0
    2074:	07 d0       	rcall	.+14     	; 0x2084 <__divmodhi4_neg1>
    2076:	77 fd       	sbrc	r23, 7
    2078:	09 d0       	rcall	.+18     	; 0x208c <__divmodhi4_neg2>
    207a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__udivmodhi4>
    207e:	07 fc       	sbrc	r0, 7
    2080:	05 d0       	rcall	.+10     	; 0x208c <__divmodhi4_neg2>
    2082:	3e f4       	brtc	.+14     	; 0x2092 <__divmodhi4_exit>

00002084 <__divmodhi4_neg1>:
    2084:	90 95       	com	r25
    2086:	81 95       	neg	r24
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	08 95       	ret

0000208c <__divmodhi4_neg2>:
    208c:	70 95       	com	r23
    208e:	61 95       	neg	r22
    2090:	7f 4f       	sbci	r23, 0xFF	; 255

00002092 <__divmodhi4_exit>:
    2092:	08 95       	ret

00002094 <__divmodsi4>:
    2094:	05 2e       	mov	r0, r21
    2096:	97 fb       	bst	r25, 7
    2098:	1e f4       	brtc	.+6      	; 0x20a0 <__divmodsi4+0xc>
    209a:	00 94       	com	r0
    209c:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__negsi2>
    20a0:	57 fd       	sbrc	r21, 7
    20a2:	07 d0       	rcall	.+14     	; 0x20b2 <__divmodsi4_neg2>
    20a4:	0e 94 88 10 	call	0x2110	; 0x2110 <__udivmodsi4>
    20a8:	07 fc       	sbrc	r0, 7
    20aa:	03 d0       	rcall	.+6      	; 0x20b2 <__divmodsi4_neg2>
    20ac:	4e f4       	brtc	.+18     	; 0x20c0 <__divmodsi4_exit>
    20ae:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__negsi2>

000020b2 <__divmodsi4_neg2>:
    20b2:	50 95       	com	r21
    20b4:	40 95       	com	r20
    20b6:	30 95       	com	r19
    20b8:	21 95       	neg	r18
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	4f 4f       	sbci	r20, 0xFF	; 255
    20be:	5f 4f       	sbci	r21, 0xFF	; 255

000020c0 <__divmodsi4_exit>:
    20c0:	08 95       	ret

000020c2 <__negsi2>:
    20c2:	90 95       	com	r25
    20c4:	80 95       	com	r24
    20c6:	70 95       	com	r23
    20c8:	61 95       	neg	r22
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	8f 4f       	sbci	r24, 0xFF	; 255
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	08 95       	ret

000020d2 <__muluhisi3>:
    20d2:	0e 94 aa 10 	call	0x2154	; 0x2154 <__umulhisi3>
    20d6:	a5 9f       	mul	r26, r21
    20d8:	90 0d       	add	r25, r0
    20da:	b4 9f       	mul	r27, r20
    20dc:	90 0d       	add	r25, r0
    20de:	a4 9f       	mul	r26, r20
    20e0:	80 0d       	add	r24, r0
    20e2:	91 1d       	adc	r25, r1
    20e4:	11 24       	eor	r1, r1
    20e6:	08 95       	ret

000020e8 <__udivmodhi4>:
    20e8:	aa 1b       	sub	r26, r26
    20ea:	bb 1b       	sub	r27, r27
    20ec:	51 e1       	ldi	r21, 0x11	; 17
    20ee:	07 c0       	rjmp	.+14     	; 0x20fe <__udivmodhi4_ep>

000020f0 <__udivmodhi4_loop>:
    20f0:	aa 1f       	adc	r26, r26
    20f2:	bb 1f       	adc	r27, r27
    20f4:	a6 17       	cp	r26, r22
    20f6:	b7 07       	cpc	r27, r23
    20f8:	10 f0       	brcs	.+4      	; 0x20fe <__udivmodhi4_ep>
    20fa:	a6 1b       	sub	r26, r22
    20fc:	b7 0b       	sbc	r27, r23

000020fe <__udivmodhi4_ep>:
    20fe:	88 1f       	adc	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	5a 95       	dec	r21
    2104:	a9 f7       	brne	.-22     	; 0x20f0 <__udivmodhi4_loop>
    2106:	80 95       	com	r24
    2108:	90 95       	com	r25
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	08 95       	ret

00002110 <__udivmodsi4>:
    2110:	a1 e2       	ldi	r26, 0x21	; 33
    2112:	1a 2e       	mov	r1, r26
    2114:	aa 1b       	sub	r26, r26
    2116:	bb 1b       	sub	r27, r27
    2118:	fd 01       	movw	r30, r26
    211a:	0d c0       	rjmp	.+26     	; 0x2136 <__udivmodsi4_ep>

0000211c <__udivmodsi4_loop>:
    211c:	aa 1f       	adc	r26, r26
    211e:	bb 1f       	adc	r27, r27
    2120:	ee 1f       	adc	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	a2 17       	cp	r26, r18
    2126:	b3 07       	cpc	r27, r19
    2128:	e4 07       	cpc	r30, r20
    212a:	f5 07       	cpc	r31, r21
    212c:	20 f0       	brcs	.+8      	; 0x2136 <__udivmodsi4_ep>
    212e:	a2 1b       	sub	r26, r18
    2130:	b3 0b       	sbc	r27, r19
    2132:	e4 0b       	sbc	r30, r20
    2134:	f5 0b       	sbc	r31, r21

00002136 <__udivmodsi4_ep>:
    2136:	66 1f       	adc	r22, r22
    2138:	77 1f       	adc	r23, r23
    213a:	88 1f       	adc	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	1a 94       	dec	r1
    2140:	69 f7       	brne	.-38     	; 0x211c <__udivmodsi4_loop>
    2142:	60 95       	com	r22
    2144:	70 95       	com	r23
    2146:	80 95       	com	r24
    2148:	90 95       	com	r25
    214a:	9b 01       	movw	r18, r22
    214c:	ac 01       	movw	r20, r24
    214e:	bd 01       	movw	r22, r26
    2150:	cf 01       	movw	r24, r30
    2152:	08 95       	ret

00002154 <__umulhisi3>:
    2154:	a2 9f       	mul	r26, r18
    2156:	b0 01       	movw	r22, r0
    2158:	b3 9f       	mul	r27, r19
    215a:	c0 01       	movw	r24, r0
    215c:	a3 9f       	mul	r26, r19
    215e:	70 0d       	add	r23, r0
    2160:	81 1d       	adc	r24, r1
    2162:	11 24       	eor	r1, r1
    2164:	91 1d       	adc	r25, r1
    2166:	b2 9f       	mul	r27, r18
    2168:	70 0d       	add	r23, r0
    216a:	81 1d       	adc	r24, r1
    216c:	11 24       	eor	r1, r1
    216e:	91 1d       	adc	r25, r1
    2170:	08 95       	ret

00002172 <setjmp>:
    2172:	dc 01       	movw	r26, r24
    2174:	2d 92       	st	X+, r2
    2176:	3d 92       	st	X+, r3
    2178:	4d 92       	st	X+, r4
    217a:	5d 92       	st	X+, r5
    217c:	6d 92       	st	X+, r6
    217e:	7d 92       	st	X+, r7
    2180:	8d 92       	st	X+, r8
    2182:	9d 92       	st	X+, r9
    2184:	ad 92       	st	X+, r10
    2186:	bd 92       	st	X+, r11
    2188:	cd 92       	st	X+, r12
    218a:	dd 92       	st	X+, r13
    218c:	ed 92       	st	X+, r14
    218e:	fd 92       	st	X+, r15
    2190:	0d 93       	st	X+, r16
    2192:	1d 93       	st	X+, r17
    2194:	cd 93       	st	X+, r28
    2196:	dd 93       	st	X+, r29
    2198:	ff 91       	pop	r31
    219a:	ef 91       	pop	r30
    219c:	8d b7       	in	r24, 0x3d	; 61
    219e:	8d 93       	st	X+, r24
    21a0:	8e b7       	in	r24, 0x3e	; 62
    21a2:	8d 93       	st	X+, r24
    21a4:	8f b7       	in	r24, 0x3f	; 63
    21a6:	8d 93       	st	X+, r24
    21a8:	ed 93       	st	X+, r30
    21aa:	fd 93       	st	X+, r31
    21ac:	88 27       	eor	r24, r24
    21ae:	99 27       	eor	r25, r25
    21b0:	09 94       	ijmp

000021b2 <longjmp>:
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	91 05       	cpc	r25, r1
    21ba:	81 1d       	adc	r24, r1
    21bc:	2d 90       	ld	r2, X+
    21be:	3d 90       	ld	r3, X+
    21c0:	4d 90       	ld	r4, X+
    21c2:	5d 90       	ld	r5, X+
    21c4:	6d 90       	ld	r6, X+
    21c6:	7d 90       	ld	r7, X+
    21c8:	8d 90       	ld	r8, X+
    21ca:	9d 90       	ld	r9, X+
    21cc:	ad 90       	ld	r10, X+
    21ce:	bd 90       	ld	r11, X+
    21d0:	cd 90       	ld	r12, X+
    21d2:	dd 90       	ld	r13, X+
    21d4:	ed 90       	ld	r14, X+
    21d6:	fd 90       	ld	r15, X+
    21d8:	0d 91       	ld	r16, X+
    21da:	1d 91       	ld	r17, X+
    21dc:	cd 91       	ld	r28, X+
    21de:	dd 91       	ld	r29, X+
    21e0:	ed 91       	ld	r30, X+
    21e2:	fd 91       	ld	r31, X+
    21e4:	0d 90       	ld	r0, X+
    21e6:	f8 94       	cli
    21e8:	fe bf       	out	0x3e, r31	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	ed bf       	out	0x3d, r30	; 61
    21ee:	ed 91       	ld	r30, X+
    21f0:	fd 91       	ld	r31, X+
    21f2:	09 94       	ijmp

000021f4 <_exit>:
    21f4:	f8 94       	cli

000021f6 <__stop_program>:
    21f6:	ff cf       	rjmp	.-2      	; 0x21f6 <__stop_program>


Lab-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000632  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  0080011a  0080011a  000006e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001090  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae0  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000618  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000562  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ff  00000000  00000000  00003102  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003a01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e3       	ldi	r30, 0x32	; 50
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	af 33       	cpi	r26, 0x3F	; 63
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  92:	0c 94 17 03 	jmp	0x62e	; 0x62e <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCDInit>:
#include <stdint.h>
#include <avr/io.h>

int pp;
mutex m = MUTEX_INIT;

  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
void LCDInit(void){
	//Set drive time to 300 milliseconds and contrast control voltage to 3.35 V
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  a0:	87 eb       	ldi	r24, 0xB7	; 183
  a2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	//Set external clock source, 1/3 bias, 1/4 duty cycle, 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	
	//Set prescaler setting N=16 and clock divide settings D=8
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
  b2:	08 95       	ret

000000b4 <writeChar>:
	
	//Enable low power waveform, no frame interrupt, no blanking, LCD enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
}
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	66 97       	sbiw	r28, 0x16	; 22
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61

  c8:	66 30       	cpi	r22, 0x06	; 6
  ca:	71 05       	cpc	r23, r1
  cc:	e8 f5       	brcc	.+122    	; 0x148 <writeChar+0x94>
	
	//Initiate the nibble to be sent to the display
	uint8_t nibbleNum = 0x0;
	
	//Initiate number to print;
	uint16_t num = 0x0;
  ce:	96 e1       	ldi	r25, 0x16	; 22
  d0:	e4 e0       	ldi	r30, 0x04	; 4
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	9a 95       	dec	r25
  de:	e1 f7       	brne	.-8      	; 0xd8 <writeChar+0x24>
	
	//Set SCC table to have the correct SCC values for the numbers 0-9 and a special character
	uint16_t tableSCC[11] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51, 0xC028};
	
  e0:	90 ed       	ldi	r25, 0xD0	; 208
  e2:	98 0f       	add	r25, r24
  e4:	9a 30       	cpi	r25, 0x0A	; 10
  e6:	50 f4       	brcc	.+20     	; 0xfc <writeChar+0x48>

	//Check if the given character is in the interval 0-9 and set the right number value
  e8:	e8 2f       	mov	r30, r24
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	f0 97       	sbiw	r30, 0x30	; 48
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	21 81       	ldd	r18, Z+1	; 0x01
  f8:	32 81       	ldd	r19, Z+2	; 0x02
  fa:	02 c0       	rjmp	.+4      	; 0x100 <writeChar+0x4c>
	if (ch >= '0' && ch <= '9'){
		//Set the corresponding value from the table to the number
		num = tableSCC[ch - '0'];
  fc:	28 e2       	ldi	r18, 0x28	; 40
  fe:	30 ec       	ldi	r19, 0xC0	; 192
		} else {
		//Set the special character from the table to the number
		num = tableSCC[10];
	}
 100:	fb 01       	movw	r30, r22
 102:	f5 95       	asr	r31
 104:	e7 95       	ror	r30
 106:	e4 51       	subi	r30, 0x14	; 20
 108:	ff 4f       	sbci	r31, 0xFF	; 255
	
	//Update the LCD address to the given position
	addrLCD += pos >> 1;
 10a:	db 01       	movw	r26, r22
 10c:	a1 70       	andi	r26, 0x01	; 1
 10e:	bb 27       	eor	r27, r27
 110:	60 ff       	sbrs	r22, 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <writeChar+0x64>
	
	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
 114:	6f e0       	ldi	r22, 0x0F	; 15
 116:	01 c0       	rjmp	.+2      	; 0x11a <writeChar+0x66>
		num = tableSCC[10];
	}
	
	//Update the LCD address to the given position
	addrLCD += pos >> 1;
	
 118:	60 ef       	ldi	r22, 0xF0	; 240
 11a:	af 01       	movw	r20, r30
 11c:	4c 5e       	subi	r20, 0xEC	; 236
 11e:	5f 4f       	sbci	r21, 0xFF	; 255
		mask = 0xF0;
		} else {
		mask = 0x0F;
	}
	
	//Place each of the four nibbles of the number on the LCD
 120:	82 2f       	mov	r24, r18
 122:	8f 70       	andi	r24, 0x0F	; 15
	for (int i = 0; i < 4; i++){
		//Masking the smallest number to the current nibble
 124:	32 95       	swap	r19
 126:	22 95       	swap	r18
 128:	2f 70       	andi	r18, 0x0F	; 15
 12a:	23 27       	eor	r18, r19
 12c:	3f 70       	andi	r19, 0x0F	; 15
 12e:	23 27       	eor	r18, r19
		nibbleNum = num & 0xF;
		//Remove the used nibble
		num = num >> 4;
 130:	10 97       	sbiw	r26, 0x00	; 0
 132:	11 f0       	breq	.+4      	; 0x138 <writeChar+0x84>
		
 134:	82 95       	swap	r24
 136:	80 7f       	andi	r24, 0xF0	; 240
		//Shift the nibble to the right position if the pos is odd
		if (pos % 2 != 0){
			nibbleNum = nibbleNum << 4;
		}
 138:	90 81       	ld	r25, Z
 13a:	96 23       	and	r25, r22
 13c:	89 2b       	or	r24, r25
 13e:	80 83       	st	Z, r24
		
		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
 140:	35 96       	adiw	r30, 0x05	; 5
	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
		mask = 0xF0;
		} else {
		mask = 0x0F;
	}
 142:	4e 17       	cp	r20, r30
 144:	5f 07       	cpc	r21, r31
 146:	61 f7       	brne	.-40     	; 0x120 <writeChar+0x6c>
		}
		
		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
		
		//Move to the next nibble sequence of the current digit on the LCD
 148:	66 96       	adiw	r28, 0x16	; 22
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <is_prime>:
		addrLCD += 5;
	}
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	6b 01       	movw	r12, r22
 168:	7c 01       	movw	r14, r24
}

 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	c8 16       	cp	r12, r24
 16e:	d1 04       	cpc	r13, r1
 170:	e1 04       	cpc	r14, r1
 172:	f1 04       	cpc	r15, r1
 174:	74 f1       	brlt	.+92     	; 0x1d2 <is_prime+0x78>
bool is_prime(long i){
 176:	d7 01       	movw	r26, r14
 178:	c6 01       	movw	r24, r12
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	99 27       	eor	r25, r25
 17e:	aa 27       	eor	r26, r26
 180:	b0 78       	andi	r27, 0x80	; 128
 182:	bb 23       	and	r27, r27
 184:	54 f4       	brge	.+20     	; 0x19a <is_prime+0x40>
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	a1 09       	sbc	r26, r1
 18a:	b1 09       	sbc	r27, r1
 18c:	8e 6f       	ori	r24, 0xFE	; 254
 18e:	9f 6f       	ori	r25, 0xFF	; 255
 190:	af 6f       	ori	r26, 0xFF	; 255
 192:	bf 6f       	ori	r27, 0xFF	; 255
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	a1 1d       	adc	r26, r1
 198:	b1 1d       	adc	r27, r1
 19a:	89 2b       	or	r24, r25
 19c:	8a 2b       	or	r24, r26
 19e:	8b 2b       	or	r24, r27
 1a0:	d1 f0       	breq	.+52     	; 0x1d6 <is_prime+0x7c>
 1a2:	c2 e0       	ldi	r28, 0x02	; 2
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <is_prime+0x5e>
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	0e 94 95 02 	call	0x52a	; 0x52a <__divmodsi4>
 1b0:	67 2b       	or	r22, r23
 1b2:	68 2b       	or	r22, r24
 1b4:	69 2b       	or	r22, r25
 1b6:	89 f0       	breq	.+34     	; 0x1da <is_prime+0x80>
		
		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
	}
}

 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	9e 01       	movw	r18, r28
 1bc:	0d 2e       	mov	r0, r29
 1be:	00 0c       	add	r0, r0
 1c0:	44 0b       	sbc	r20, r20
 1c2:	55 0b       	sbc	r21, r21
 1c4:	2c 15       	cp	r18, r12
 1c6:	3d 05       	cpc	r19, r13
 1c8:	4e 05       	cpc	r20, r14
 1ca:	5f 05       	cpc	r21, r15
 1cc:	6c f3       	brlt	.-38     	; 0x1a8 <is_prime+0x4e>
bool is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
		if (i % n == 0){
			return false;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <is_prime+0x82>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <is_prime+0x82>
		addrLCD += 5;
	}
}

bool is_prime(long i){
	//Check if the given long has any prime factors
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <is_prime+0x82>
 1da:	80 e0       	ldi	r24, 0x00	; 0
	for(int n = 2; n < i; n++){
		if (i % n == 0){
			return false;
		}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	cf 90       	pop	r12
 1e8:	08 95       	ret

000001ea <printAt>:
	}
	return true;
 1ea:	8f 92       	push	r8
 1ec:	9f 92       	push	r9
 1ee:	af 92       	push	r10
 1f0:	bf 92       	push	r11
 1f2:	cf 92       	push	r12
 1f4:	df 92       	push	r13
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	4b 01       	movw	r8, r22
 200:	5c 01       	movw	r10, r24
 202:	ea 01       	movw	r28, r20
}

 204:	24 e6       	ldi	r18, 0x64	; 100
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	0e 94 95 02 	call	0x52a	; 0x52a <__divmodsi4>
 210:	0f 2e       	mov	r0, r31
 212:	fa e0       	ldi	r31, 0x0A	; 10
 214:	cf 2e       	mov	r12, r31
 216:	d1 2c       	mov	r13, r1
 218:	e1 2c       	mov	r14, r1
 21a:	f1 2c       	mov	r15, r1
 21c:	f0 2d       	mov	r31, r0
 21e:	a7 01       	movw	r20, r14
 220:	96 01       	movw	r18, r12
 222:	0e 94 95 02 	call	0x52a	; 0x52a <__divmodsi4>
 226:	be 01       	movw	r22, r28
 228:	80 e3       	ldi	r24, 0x30	; 48
 22a:	82 0f       	add	r24, r18
 22c:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
void printAt(long num, int pos) {
	lock(&m);
 230:	21 96       	adiw	r28, 0x01	; 1
 232:	c5 01       	movw	r24, r10
 234:	b4 01       	movw	r22, r8
 236:	a7 01       	movw	r20, r14
 238:	96 01       	movw	r18, r12
 23a:	0e 94 95 02 	call	0x52a	; 0x52a <__divmodsi4>
 23e:	86 2f       	mov	r24, r22
 240:	be 01       	movw	r22, r28
 242:	80 5d       	subi	r24, 0xD0	; 208
 244:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	pp = pos; 
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	cf 90       	pop	r12
 254:	bf 90       	pop	r11
 256:	af 90       	pop	r10
 258:	9f 90       	pop	r9
 25a:	8f 90       	pop	r8
 25c:	08 95       	ret

0000025e <computePrimes>:
    writeChar( (num % 100) / 10 + '0', pp);
	for(volatile int i  = 0; i < 1000000; i++){}
 25e:	ec 01       	movw	r28, r24
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m);
 260:	c1 2c       	mov	r12, r1
 262:	d1 2c       	mov	r13, r1
 264:	76 01       	movw	r14, r12
 266:	c3 94       	inc	r12
}
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	0e 94 ad 00 	call	0x15a	; 0x15a <is_prime>
 270:	88 23       	and	r24, r24
 272:	29 f0       	breq	.+10     	; 0x27e <computePrimes+0x20>

 274:	ae 01       	movw	r20, r28
 276:	c7 01       	movw	r24, r14
 278:	b6 01       	movw	r22, r12
 27a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <printAt>
	pp = pos; 
    writeChar( (num % 100) / 10 + '0', pp);
	for(volatile int i  = 0; i < 1000000; i++){}
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m);
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	c8 1a       	sub	r12, r24
 282:	d8 0a       	sbc	r13, r24
 284:	e8 0a       	sbc	r14, r24
 286:	f8 0a       	sbc	r15, r24
}

void computePrimes(int pos) {
    long n;
 288:	ef cf       	rjmp	.-34     	; 0x268 <computePrimes+0xa>

0000028a <main>:

    for(n = 1; ; n++) {
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 28a:	e1 e6       	ldi	r30, 0x61	; 97
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	80 83       	st	Z, r24
}
 292:	10 82       	st	Z, r1


 294:	0e 94 4d 00 	call	0x9a	; 0x9a <LCDInit>
int main() {
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	8f e2       	ldi	r24, 0x2F	; 47
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 8d 01 	call	0x31a	; 0x31a <spawn>
	
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 2f 01 	call	0x25e	; 0x25e <computePrimes>

000002ac <enqueue>:
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 2ac:	dc 01       	movw	r26, r24
 2ae:	15 96       	adiw	r26, 0x05	; 5
 2b0:	1c 92       	st	X, r1
 2b2:	1e 92       	st	-X, r1
 2b4:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 2b6:	db 01       	movw	r26, r22
 2b8:	ed 91       	ld	r30, X+
 2ba:	fc 91       	ld	r31, X
 2bc:	11 97       	sbiw	r26, 0x01	; 1
 2be:	30 97       	sbiw	r30, 0x00	; 0
 2c0:	21 f4       	brne	.+8      	; 0x2ca <enqueue+0x1e>
        *queue = p;
 2c2:	8d 93       	st	X+, r24
 2c4:	9c 93       	st	X, r25
 2c6:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 2c8:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 2ca:	24 81       	ldd	r18, Z+4	; 0x04
 2cc:	35 81       	ldd	r19, Z+5	; 0x05
 2ce:	21 15       	cp	r18, r1
 2d0:	31 05       	cpc	r19, r1
 2d2:	d1 f7       	brne	.-12     	; 0x2c8 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 2d4:	95 83       	std	Z+5, r25	; 0x05
 2d6:	84 83       	std	Z+4, r24	; 0x04
 2d8:	08 95       	ret

000002da <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <dispatch+0x6>
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	9a 83       	std	Y+2, r25	; 0x02
 2e6:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 2e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2f0:	06 96       	adiw	r24, 0x06	; 6
 2f2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <setjmp>
 2f6:	89 2b       	or	r24, r25
 2f8:	59 f4       	brne	.+22     	; 0x310 <dispatch+0x36>
        current = next;
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	9a 81       	ldd	r25, Y+2	; 0x02
 2fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 302:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	06 96       	adiw	r24, 0x06	; 6
 30c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <longjmp>
    }
}
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <spawn>:

void spawn(void (* function)(int), int arg) {
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	00 d0       	rcall	.+0      	; 0x320 <spawn+0x6>
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 324:	f8 94       	cli
    if (!initialized) initialize();
 326:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 32a:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 32e:	23 2b       	or	r18, r19
 330:	e1 f5       	brne	.+120    	; 0x3aa <spawn+0x90>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++){
        threads[i].next = &threads[i+1];
 332:	28 ef       	ldi	r18, 0xF8	; 248
 334:	31 e0       	ldi	r19, 0x01	; 1
 336:	30 93 90 01 	sts	0x0190, r19	; 0x800190 <threads+0x5>
 33a:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <threads+0x4>
 33e:	25 e6       	ldi	r18, 0x65	; 101
 340:	32 e0       	ldi	r19, 0x02	; 2
 342:	30 93 fd 01 	sts	0x01FD, r19	; 0x8001fd <threads+0x72>
 346:	20 93 fc 01 	sts	0x01FC, r18	; 0x8001fc <threads+0x71>
 34a:	22 ed       	ldi	r18, 0xD2	; 210
 34c:	32 e0       	ldi	r19, 0x02	; 2
 34e:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <threads+0xdf>
 352:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <threads+0xde>
	}
    threads[NTHREADS-1].next = NULL;
 356:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <threads+0x14c>
 35a:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <threads+0x14b>


    initialized = 1;
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x1>
 366:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
	
	// Initialize for butterfly joystick
	EIMSK = (1<<PCIE1) | EIMSK;
 36a:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 = (1<<PCINT15) | PCMSK1;
 36c:	ec e6       	ldi	r30, 0x6C	; 108
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	20 81       	ld	r18, Z
 372:	20 68       	ori	r18, 0x80	; 128
 374:	20 83       	st	Z, r18
	PORTB = (1<<PB7) | PORTB;
 376:	2f 9a       	sbi	0x05, 7	; 5
	
	// Initialize for timer 
	
	// Enable timer output compare A interrupts 
	TIMSK1 = (1<<OCIE1A) | TIMSK1;
 378:	ef e6       	ldi	r30, 0x6F	; 111
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	20 81       	ld	r18, Z
 37e:	22 60       	ori	r18, 0x02	; 2
 380:	20 83       	st	Z, r18
	// Turn on OC1A compare match
	TCCR1A = (1<<COM1A0) | (1<<COM1A1) | TCCR1A;
 382:	e0 e8       	ldi	r30, 0x80	; 128
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	20 81       	ld	r18, Z
 388:	20 6c       	ori	r18, 0xC0	; 192
 38a:	20 83       	st	Z, r18
	// Set timer to clear on timer compare (CTC) and timer prescaling factor 1024 
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10) | TCCR1B;
 38c:	e1 e8       	ldi	r30, 0x81	; 129
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	20 81       	ld	r18, Z
 392:	2d 60       	ori	r18, 0x0D	; 13
 394:	20 83       	st	Z, r18
	
	// 20 intervals of 50 ms per second 
	// 1 second = 8 000 000 / 1024 = 7812.5 
	// 1 second divided by 20 intervals = 7812.5/ 20 = 390.625 = 0x187
	OCR1A = 0x187;	
 396:	27 e8       	ldi	r18, 0x87	; 135
 398:	31 e0       	ldi	r19, 0x01	; 1
 39a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 39e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCNT1 = 0x0;
 3a2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 3a6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3aa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 3ae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 3b2:	3a 83       	std	Y+2, r19	; 0x02
 3b4:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 3b6:	23 2b       	or	r18, r19
 3b8:	a9 f0       	breq	.+42     	; 0x3e4 <spawn+0xca>
        *queue = (*queue)->next;
 3ba:	e9 81       	ldd	r30, Y+1	; 0x01
 3bc:	fa 81       	ldd	r31, Y+2	; 0x02
 3be:	44 81       	ldd	r20, Z+4	; 0x04
 3c0:	55 81       	ldd	r21, Z+5	; 0x05
 3c2:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 3c6:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 3ca:	91 83       	std	Z+1, r25	; 0x01
 3cc:	80 83       	st	Z, r24
    newp->arg = arg;
 3ce:	73 83       	std	Z+3, r23	; 0x03
 3d0:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 3d2:	15 82       	std	Z+5, r1	; 0x05
 3d4:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 3d6:	cf 01       	movw	r24, r30
 3d8:	06 96       	adiw	r24, 0x06	; 6
 3da:	0e 94 d6 02 	call	0x5ac	; 0x5ac <setjmp>
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	49 f5       	brne	.+82     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <spawn+0xcc>
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <spawn+0xca>
        ENABLE();
 3e6:	78 94       	sei
        current->function(current->arg);
 3e8:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 3ec:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 3f0:	ed 91       	ld	r30, X+
 3f2:	fc 91       	ld	r31, X
 3f4:	11 97       	sbiw	r26, 0x01	; 1
 3f6:	12 96       	adiw	r26, 0x02	; 2
 3f8:	8d 91       	ld	r24, X+
 3fa:	9c 91       	ld	r25, X
 3fc:	13 97       	sbiw	r26, 0x03	; 3
 3fe:	09 95       	icall
        DISABLE();
 400:	f8 94       	cli
        enqueue(current, &freeQ);
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	71 e0       	ldi	r23, 0x01	; 1
 406:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 40a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 40e:	0e 94 56 01 	call	0x2ac	; 0x2ac <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 412:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 416:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 41a:	00 97       	sbiw	r24, 0x00	; 0
 41c:	51 f0       	breq	.+20     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
        *queue = (*queue)->next;
 41e:	fc 01       	movw	r30, r24
 420:	24 81       	ldd	r18, Z+4	; 0x04
 422:	35 81       	ldd	r19, Z+5	; 0x05
 424:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 428:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 42c:	0e 94 6d 01 	call	0x2da	; 0x2da <dispatch>
 430:	01 c0       	rjmp	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	ff cf       	rjmp	.-2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
    }
    SETSTACK(&newp->context, &newp->stack);
 434:	e9 81       	ldd	r30, Y+1	; 0x01
 436:	fa 81       	ldd	r31, Y+2	; 0x02
 438:	36 96       	adiw	r30, 0x06	; 6
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	9a 81       	ldd	r25, Y+2	; 0x02
 43e:	87 59       	subi	r24, 0x97	; 151
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	91 8b       	std	Z+17, r25	; 0x11
 444:	80 8b       	std	Z+16, r24	; 0x10
 446:	93 8b       	std	Z+19, r25	; 0x13
 448:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 44a:	6c e1       	ldi	r22, 0x1C	; 28
 44c:	71 e0       	ldi	r23, 0x01	; 1
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	9a 81       	ldd	r25, Y+2	; 0x02
 452:	0e 94 56 01 	call	0x2ac	; 0x2ac <enqueue>
    ENABLE();
 456:	78 94       	sei
}
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <yield>:

void yield(void) {
	ENABLE();
 462:	78 94       	sei
	enqueue(current, &readyQ);
 464:	6c e1       	ldi	r22, 0x1C	; 28
 466:	71 e0       	ldi	r23, 0x01	; 1
 468:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 46c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 470:	0e 94 56 01 	call	0x2ac	; 0x2ac <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 474:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 478:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 47c:	00 97       	sbiw	r24, 0x00	; 0
 47e:	59 f0       	breq	.+22     	; 0x496 <yield+0x34>
        *queue = (*queue)->next;
 480:	fc 01       	movw	r30, r24
 482:	24 81       	ldd	r18, Z+4	; 0x04
 484:	35 81       	ldd	r19, Z+5	; 0x05
 486:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 48a:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
}

void yield(void) {
	ENABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 48e:	0e 94 6d 01 	call	0x2da	; 0x2da <dispatch>
	DISABLE();
 492:	f8 94       	cli
}
 494:	08 95       	ret
 496:	ff cf       	rjmp	.-2      	; 0x496 <yield+0x34>

00000498 <__vector_3>:

ISR(PCINT1_vect){
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	2f 93       	push	r18
 4a4:	3f 93       	push	r19
 4a6:	4f 93       	push	r20
 4a8:	5f 93       	push	r21
 4aa:	6f 93       	push	r22
 4ac:	7f 93       	push	r23
 4ae:	8f 93       	push	r24
 4b0:	9f 93       	push	r25
 4b2:	af 93       	push	r26
 4b4:	bf 93       	push	r27
 4b6:	ef 93       	push	r30
 4b8:	ff 93       	push	r31
	if (!pressed && down){
		yield();
		pressed = true;
	}
	*/
	if (( PINB & 1<<PB7) == 0){
 4ba:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 4bc:	0e 94 31 02 	call	0x462	; 0x462 <yield>
	}
	
}
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	2f 93       	push	r18
 4ee:	3f 93       	push	r19
 4f0:	4f 93       	push	r20
 4f2:	5f 93       	push	r21
 4f4:	6f 93       	push	r22
 4f6:	7f 93       	push	r23
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
 4fc:	af 93       	push	r26
 4fe:	bf 93       	push	r27
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
	yield();
 504:	0e 94 31 02 	call	0x462	; 0x462 <yield>
}
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <__divmodsi4>:
 52a:	05 2e       	mov	r0, r21
 52c:	97 fb       	bst	r25, 7
 52e:	1e f4       	brtc	.+6      	; 0x536 <__divmodsi4+0xc>
 530:	00 94       	com	r0
 532:	0e 94 ac 02 	call	0x558	; 0x558 <__negsi2>
 536:	57 fd       	sbrc	r21, 7
 538:	07 d0       	rcall	.+14     	; 0x548 <__divmodsi4_neg2>
 53a:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodsi4>
 53e:	07 fc       	sbrc	r0, 7
 540:	03 d0       	rcall	.+6      	; 0x548 <__divmodsi4_neg2>
 542:	4e f4       	brtc	.+18     	; 0x556 <__divmodsi4_exit>
 544:	0c 94 ac 02 	jmp	0x558	; 0x558 <__negsi2>

00000548 <__divmodsi4_neg2>:
 548:	50 95       	com	r21
 54a:	40 95       	com	r20
 54c:	30 95       	com	r19
 54e:	21 95       	neg	r18
 550:	3f 4f       	sbci	r19, 0xFF	; 255
 552:	4f 4f       	sbci	r20, 0xFF	; 255
 554:	5f 4f       	sbci	r21, 0xFF	; 255

00000556 <__divmodsi4_exit>:
 556:	08 95       	ret

00000558 <__negsi2>:
 558:	90 95       	com	r25
 55a:	80 95       	com	r24
 55c:	70 95       	com	r23
 55e:	61 95       	neg	r22
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	8f 4f       	sbci	r24, 0xFF	; 255
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	08 95       	ret

00000568 <__udivmodsi4>:
 568:	a1 e2       	ldi	r26, 0x21	; 33
 56a:	1a 2e       	mov	r1, r26
 56c:	aa 1b       	sub	r26, r26
 56e:	bb 1b       	sub	r27, r27
 570:	fd 01       	movw	r30, r26
 572:	0d c0       	rjmp	.+26     	; 0x58e <__udivmodsi4_ep>

00000574 <__udivmodsi4_loop>:
 574:	aa 1f       	adc	r26, r26
 576:	bb 1f       	adc	r27, r27
 578:	ee 1f       	adc	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	a2 17       	cp	r26, r18
 57e:	b3 07       	cpc	r27, r19
 580:	e4 07       	cpc	r30, r20
 582:	f5 07       	cpc	r31, r21
 584:	20 f0       	brcs	.+8      	; 0x58e <__udivmodsi4_ep>
 586:	a2 1b       	sub	r26, r18
 588:	b3 0b       	sbc	r27, r19
 58a:	e4 0b       	sbc	r30, r20
 58c:	f5 0b       	sbc	r31, r21

0000058e <__udivmodsi4_ep>:
 58e:	66 1f       	adc	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	1a 94       	dec	r1
 598:	69 f7       	brne	.-38     	; 0x574 <__udivmodsi4_loop>
 59a:	60 95       	com	r22
 59c:	70 95       	com	r23
 59e:	80 95       	com	r24
 5a0:	90 95       	com	r25
 5a2:	9b 01       	movw	r18, r22
 5a4:	ac 01       	movw	r20, r24
 5a6:	bd 01       	movw	r22, r26
 5a8:	cf 01       	movw	r24, r30
 5aa:	08 95       	ret

000005ac <setjmp>:
 5ac:	dc 01       	movw	r26, r24
 5ae:	2d 92       	st	X+, r2
 5b0:	3d 92       	st	X+, r3
 5b2:	4d 92       	st	X+, r4
 5b4:	5d 92       	st	X+, r5
 5b6:	6d 92       	st	X+, r6
 5b8:	7d 92       	st	X+, r7
 5ba:	8d 92       	st	X+, r8
 5bc:	9d 92       	st	X+, r9
 5be:	ad 92       	st	X+, r10
 5c0:	bd 92       	st	X+, r11
 5c2:	cd 92       	st	X+, r12
 5c4:	dd 92       	st	X+, r13
 5c6:	ed 92       	st	X+, r14
 5c8:	fd 92       	st	X+, r15
 5ca:	0d 93       	st	X+, r16
 5cc:	1d 93       	st	X+, r17
 5ce:	cd 93       	st	X+, r28
 5d0:	dd 93       	st	X+, r29
 5d2:	ff 91       	pop	r31
 5d4:	ef 91       	pop	r30
 5d6:	8d b7       	in	r24, 0x3d	; 61
 5d8:	8d 93       	st	X+, r24
 5da:	8e b7       	in	r24, 0x3e	; 62
 5dc:	8d 93       	st	X+, r24
 5de:	8f b7       	in	r24, 0x3f	; 63
 5e0:	8d 93       	st	X+, r24
 5e2:	ed 93       	st	X+, r30
 5e4:	fd 93       	st	X+, r31
 5e6:	88 27       	eor	r24, r24
 5e8:	99 27       	eor	r25, r25
 5ea:	09 94       	ijmp

000005ec <longjmp>:
 5ec:	dc 01       	movw	r26, r24
 5ee:	cb 01       	movw	r24, r22
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	91 05       	cpc	r25, r1
 5f4:	81 1d       	adc	r24, r1
 5f6:	2d 90       	ld	r2, X+
 5f8:	3d 90       	ld	r3, X+
 5fa:	4d 90       	ld	r4, X+
 5fc:	5d 90       	ld	r5, X+
 5fe:	6d 90       	ld	r6, X+
 600:	7d 90       	ld	r7, X+
 602:	8d 90       	ld	r8, X+
 604:	9d 90       	ld	r9, X+
 606:	ad 90       	ld	r10, X+
 608:	bd 90       	ld	r11, X+
 60a:	cd 90       	ld	r12, X+
 60c:	dd 90       	ld	r13, X+
 60e:	ed 90       	ld	r14, X+
 610:	fd 90       	ld	r15, X+
 612:	0d 91       	ld	r16, X+
 614:	1d 91       	ld	r17, X+
 616:	cd 91       	ld	r28, X+
 618:	dd 91       	ld	r29, X+
 61a:	ed 91       	ld	r30, X+
 61c:	fd 91       	ld	r31, X+
 61e:	0d 90       	ld	r0, X+
 620:	f8 94       	cli
 622:	fe bf       	out	0x3e, r31	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	ed bf       	out	0x3d, r30	; 61
 628:	ed 91       	ld	r30, X+
 62a:	fd 91       	ld	r31, X+
 62c:	09 94       	ijmp

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>

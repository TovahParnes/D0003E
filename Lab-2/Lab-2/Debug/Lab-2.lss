
Lab-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000006f6  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  0080011a  0080011a  000007a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001140  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b18  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000630  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000536  00000000  00000000  00002d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089d  00000000  00000000  0000329a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 ef       	ldi	r30, 0xF6	; 246
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a5 34       	cpi	r26, 0x45	; 69
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  92:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCDInit>:
int pp;
mutex m = MUTEX_INIT;

void LCDInit(void){
	//Set drive time to 300 milliseconds and contrast control voltage to 3.35 V
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	//Set external clock source, 1/3 bias, 1/4 duty cycle, 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  a0:	87 eb       	ldi	r24, 0xB7	; 183
  a2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	//Set prescaler setting N=16 and clock divide settings D=8
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	
	//Enable low power waveform, no frame interrupt, no blanking, LCD enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
  b2:	08 95       	ret

000000b4 <writeChar>:
}


void writeChar(char ch, int pos){
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	66 97       	sbiw	r28, 0x16	; 22
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
	if (pos < 0 || pos > 5){
  c8:	66 30       	cpi	r22, 0x06	; 6
  ca:	71 05       	cpc	r23, r1
  cc:	e8 f5       	brcc	.+122    	; 0x148 <writeChar+0x94>
	
	//Initiate number to print;
	uint16_t num = 0x0;
	
	//Set SCC table to have the correct SCC values for the numbers 0-9 and a special character
	uint16_t tableSCC[11] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51, 0xC028};
  ce:	96 e1       	ldi	r25, 0x16	; 22
  d0:	e4 e0       	ldi	r30, 0x04	; 4
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	9a 95       	dec	r25
  de:	e1 f7       	brne	.-8      	; 0xd8 <writeChar+0x24>
	

	//Check if the given character is in the interval 0-9 and set the right number value
	if (ch >= '0' && ch <= '9'){
  e0:	90 ed       	ldi	r25, 0xD0	; 208
  e2:	98 0f       	add	r25, r24
  e4:	9a 30       	cpi	r25, 0x0A	; 10
  e6:	50 f4       	brcc	.+20     	; 0xfc <writeChar+0x48>
		//Set the corresponding value from the table to the number
		num = tableSCC[ch - '0'];
  e8:	e8 2f       	mov	r30, r24
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	f0 97       	sbiw	r30, 0x30	; 48
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	21 81       	ldd	r18, Z+1	; 0x01
  f8:	32 81       	ldd	r19, Z+2	; 0x02
  fa:	02 c0       	rjmp	.+4      	; 0x100 <writeChar+0x4c>
		} else {
		//Set the special character from the table to the number
		num = tableSCC[10];
  fc:	28 e2       	ldi	r18, 0x28	; 40
  fe:	30 ec       	ldi	r19, 0xC0	; 192
	}
	
	//Update the LCD address to the given position
	addrLCD += pos >> 1;
 100:	fb 01       	movw	r30, r22
 102:	f5 95       	asr	r31
 104:	e7 95       	ror	r30
 106:	e4 51       	subi	r30, 0x14	; 20
 108:	ff 4f       	sbci	r31, 0xFF	; 255
	
	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
 10a:	db 01       	movw	r26, r22
 10c:	a1 70       	andi	r26, 0x01	; 1
 10e:	bb 27       	eor	r27, r27
 110:	60 ff       	sbrs	r22, 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <writeChar+0x64>
		mask = 0xF0;
		} else {
		mask = 0x0F;
 114:	6f e0       	ldi	r22, 0x0F	; 15
 116:	01 c0       	rjmp	.+2      	; 0x11a <writeChar+0x66>
	//Update the LCD address to the given position
	addrLCD += pos >> 1;
	
	//Set the correct mask if the position is even or odd
	if (pos % 2 == 0){
		mask = 0xF0;
 118:	60 ef       	ldi	r22, 0xF0	; 240
 11a:	af 01       	movw	r20, r30
 11c:	4c 5e       	subi	r20, 0xEC	; 236
 11e:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	//Place each of the four nibbles of the number on the LCD
	for (int i = 0; i < 4; i++){
		//Masking the smallest number to the current nibble
		nibbleNum = num & 0xF;
 120:	82 2f       	mov	r24, r18
 122:	8f 70       	andi	r24, 0x0F	; 15
		//Remove the used nibble
		num = num >> 4;
 124:	32 95       	swap	r19
 126:	22 95       	swap	r18
 128:	2f 70       	andi	r18, 0x0F	; 15
 12a:	23 27       	eor	r18, r19
 12c:	3f 70       	andi	r19, 0x0F	; 15
 12e:	23 27       	eor	r18, r19
		
		//Shift the nibble to the right position if the pos is odd
		if (pos % 2 != 0){
 130:	10 97       	sbiw	r26, 0x00	; 0
 132:	11 f0       	breq	.+4      	; 0x138 <writeChar+0x84>
			nibbleNum = nibbleNum << 4;
 134:	82 95       	swap	r24
 136:	80 7f       	andi	r24, 0xF0	; 240
		}
		
		//Write the current nibble to the LCD
		*addrLCD = (*addrLCD & mask) | nibbleNum;
 138:	90 81       	ld	r25, Z
 13a:	96 23       	and	r25, r22
 13c:	89 2b       	or	r24, r25
 13e:	80 83       	st	Z, r24
		
		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
 140:	35 96       	adiw	r30, 0x05	; 5
		} else {
		mask = 0x0F;
	}
	
	//Place each of the four nibbles of the number on the LCD
	for (int i = 0; i < 4; i++){
 142:	4e 17       	cp	r20, r30
 144:	5f 07       	cpc	r21, r31
 146:	61 f7       	brne	.-40     	; 0x120 <writeChar+0x6c>
		*addrLCD = (*addrLCD & mask) | nibbleNum;
		
		//Move to the next nibble sequence of the current digit on the LCD
		addrLCD += 5;
	}
}
 148:	66 96       	adiw	r28, 0x16	; 22
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <is_prime>:

bool is_prime(long i){
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	6b 01       	movw	r12, r22
 168:	7c 01       	movw	r14, r24
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	c8 16       	cp	r12, r24
 16e:	d1 04       	cpc	r13, r1
 170:	e1 04       	cpc	r14, r1
 172:	f1 04       	cpc	r15, r1
 174:	74 f1       	brlt	.+92     	; 0x1d2 <is_prime+0x78>
		if (i % n == 0){
 176:	d7 01       	movw	r26, r14
 178:	c6 01       	movw	r24, r12
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	99 27       	eor	r25, r25
 17e:	aa 27       	eor	r26, r26
 180:	b0 78       	andi	r27, 0x80	; 128
 182:	bb 23       	and	r27, r27
 184:	54 f4       	brge	.+20     	; 0x19a <is_prime+0x40>
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	a1 09       	sbc	r26, r1
 18a:	b1 09       	sbc	r27, r1
 18c:	8e 6f       	ori	r24, 0xFE	; 254
 18e:	9f 6f       	ori	r25, 0xFF	; 255
 190:	af 6f       	ori	r26, 0xFF	; 255
 192:	bf 6f       	ori	r27, 0xFF	; 255
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	a1 1d       	adc	r26, r1
 198:	b1 1d       	adc	r27, r1
 19a:	89 2b       	or	r24, r25
 19c:	8a 2b       	or	r24, r26
 19e:	8b 2b       	or	r24, r27
 1a0:	d1 f0       	breq	.+52     	; 0x1d6 <is_prime+0x7c>
 1a2:	c2 e0       	ldi	r28, 0x02	; 2
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <is_prime+0x5e>
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__divmodsi4>
 1b0:	67 2b       	or	r22, r23
 1b2:	68 2b       	or	r22, r24
 1b4:	69 2b       	or	r22, r25
 1b6:	89 f0       	breq	.+34     	; 0x1da <is_prime+0x80>
	}
}

bool is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	9e 01       	movw	r18, r28
 1bc:	0d 2e       	mov	r0, r29
 1be:	00 0c       	add	r0, r0
 1c0:	44 0b       	sbc	r20, r20
 1c2:	55 0b       	sbc	r21, r21
 1c4:	2c 15       	cp	r18, r12
 1c6:	3d 05       	cpc	r19, r13
 1c8:	4e 05       	cpc	r20, r14
 1ca:	5f 05       	cpc	r21, r15
 1cc:	6c f3       	brlt	.-38     	; 0x1a8 <is_prime+0x4e>
		if (i % n == 0){
			return false;
		}
	}
	return true;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <is_prime+0x82>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <is_prime+0x82>

bool is_prime(long i){
	//Check if the given long has any prime factors
	for(int n = 2; n < i; n++){
		if (i % n == 0){
			return false;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <is_prime+0x82>
 1da:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	cf 90       	pop	r12
 1e8:	08 95       	ret

000001ea <printAt>:

void printAt(long num, int pos) {
 1ea:	8f 92       	push	r8
 1ec:	9f 92       	push	r9
 1ee:	af 92       	push	r10
 1f0:	bf 92       	push	r11
 1f2:	cf 92       	push	r12
 1f4:	df 92       	push	r13
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	4b 01       	movw	r8, r22
 200:	5c 01       	movw	r10, r24
 202:	ea 01       	movw	r28, r20
    lock(&m);
 204:	8a e1       	ldi	r24, 0x1A	; 26
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 ab 02 	call	0x556	; 0x556 <lock>
    pp = pos;
 20c:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <pp+0x1>
 210:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <pp>
    writeChar( (num % 100) / 10 + '0', pp);
 214:	c5 01       	movw	r24, r10
 216:	b4 01       	movw	r22, r8
 218:	24 e6       	ldi	r18, 0x64	; 100
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__divmodsi4>
 224:	0f 2e       	mov	r0, r31
 226:	fa e0       	ldi	r31, 0x0A	; 10
 228:	cf 2e       	mov	r12, r31
 22a:	d1 2c       	mov	r13, r1
 22c:	e1 2c       	mov	r14, r1
 22e:	f1 2c       	mov	r15, r1
 230:	f0 2d       	mov	r31, r0
 232:	a7 01       	movw	r20, r14
 234:	96 01       	movw	r18, r12
 236:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__divmodsi4>
 23a:	be 01       	movw	r22, r28
 23c:	80 e3       	ldi	r24, 0x30	; 48
 23e:	82 0f       	add	r24, r18
 240:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
    //for(volatile int i  = 0; i < 10000; i++){}
    pp++;
 244:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <pp>
 248:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <pp+0x1>
 24c:	21 96       	adiw	r28, 0x01	; 1
 24e:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <pp+0x1>
 252:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <pp>
    writeChar( num % 10 + '0', pp);
 256:	c5 01       	movw	r24, r10
 258:	b4 01       	movw	r22, r8
 25a:	a7 01       	movw	r20, r14
 25c:	96 01       	movw	r18, r12
 25e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__divmodsi4>
 262:	86 2f       	mov	r24, r22
 264:	be 01       	movw	r22, r28
 266:	80 5d       	subi	r24, 0xD0	; 208
 268:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
    unlock(&m);
 26c:	8a e1       	ldi	r24, 0x1A	; 26
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <unlock>
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	bf 90       	pop	r11
 282:	af 90       	pop	r10
 284:	9f 90       	pop	r9
 286:	8f 90       	pop	r8
 288:	08 95       	ret

0000028a <computePrimes>:

void computePrimes(int pos) {
 28a:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 28c:	c1 2c       	mov	r12, r1
 28e:	d1 2c       	mov	r13, r1
 290:	76 01       	movw	r14, r12
 292:	c3 94       	inc	r12
        if (is_prime(n)) {
 294:	c7 01       	movw	r24, r14
 296:	b6 01       	movw	r22, r12
 298:	0e 94 ad 00 	call	0x15a	; 0x15a <is_prime>
 29c:	88 23       	and	r24, r24
 29e:	29 f0       	breq	.+10     	; 0x2aa <computePrimes+0x20>
            printAt(n, pos);
 2a0:	ae 01       	movw	r20, r28
 2a2:	c7 01       	movw	r24, r14
 2a4:	b6 01       	movw	r22, r12
 2a6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	c8 1a       	sub	r12, r24
 2ae:	d8 0a       	sbc	r13, r24
 2b0:	e8 0a       	sbc	r14, r24
 2b2:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 2b4:	ef cf       	rjmp	.-34     	; 0x294 <computePrimes+0xa>

000002b6 <main>:
}


int main() {
	
	CLKPR = 0x80;
 2b6:	e1 e6       	ldi	r30, 0x61	; 97
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	80 83       	st	Z, r24
	CLKPR = 0x00;
 2be:	10 82       	st	Z, r1
	
	LCDInit();
 2c0:	0e 94 4d 00 	call	0x9a	; 0x9a <LCDInit>
    spawn(computePrimes, 0);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	85 e4       	ldi	r24, 0x45	; 69
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 a3 01 	call	0x346	; 0x346 <spawn>
    computePrimes(3);
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 45 01 	call	0x28a	; 0x28a <computePrimes>

000002d8 <enqueue>:
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 2d8:	dc 01       	movw	r26, r24
 2da:	15 96       	adiw	r26, 0x05	; 5
 2dc:	1c 92       	st	X, r1
 2de:	1e 92       	st	-X, r1
 2e0:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 2e2:	db 01       	movw	r26, r22
 2e4:	ed 91       	ld	r30, X+
 2e6:	fc 91       	ld	r31, X
 2e8:	11 97       	sbiw	r26, 0x01	; 1
 2ea:	30 97       	sbiw	r30, 0x00	; 0
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <enqueue+0x1e>
        *queue = p;
 2ee:	8d 93       	st	X+, r24
 2f0:	9c 93       	st	X, r25
 2f2:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 2f4:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 2f6:	24 81       	ldd	r18, Z+4	; 0x04
 2f8:	35 81       	ldd	r19, Z+5	; 0x05
 2fa:	21 15       	cp	r18, r1
 2fc:	31 05       	cpc	r19, r1
 2fe:	d1 f7       	brne	.-12     	; 0x2f4 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 300:	95 83       	std	Z+5, r25	; 0x05
 302:	84 83       	std	Z+4, r24	; 0x04
 304:	08 95       	ret

00000306 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	00 d0       	rcall	.+0      	; 0x30c <dispatch+0x6>
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	9a 83       	std	Y+2, r25	; 0x02
 312:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 314:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 318:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 31c:	06 96       	adiw	r24, 0x06	; 6
 31e:	0e 94 38 03 	call	0x670	; 0x670 <setjmp>
 322:	89 2b       	or	r24, r25
 324:	59 f4       	brne	.+22     	; 0x33c <dispatch+0x36>
        current = next;
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	9a 81       	ldd	r25, Y+2	; 0x02
 32a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 32e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	06 96       	adiw	r24, 0x06	; 6
 338:	0e 94 58 03 	call	0x6b0	; 0x6b0 <longjmp>
    }
}
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <spawn>:

void spawn(void (* function)(int), int arg) {
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	00 d0       	rcall	.+0      	; 0x34c <spawn+0x6>
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 350:	f8 94       	cli
    if (!initialized) initialize();
 352:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <initialized>
 356:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <initialized+0x1>
 35a:	23 2b       	or	r18, r19
 35c:	e1 f5       	brne	.+120    	; 0x3d6 <spawn+0x90>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++){
        threads[i].next = &threads[i+1];
 35e:	2e ef       	ldi	r18, 0xFE	; 254
 360:	31 e0       	ldi	r19, 0x01	; 1
 362:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <threads+0x5>
 366:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <threads+0x4>
 36a:	2b e6       	ldi	r18, 0x6B	; 107
 36c:	32 e0       	ldi	r19, 0x02	; 2
 36e:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <threads+0x72>
 372:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <threads+0x71>
 376:	28 ed       	ldi	r18, 0xD8	; 216
 378:	32 e0       	ldi	r19, 0x02	; 2
 37a:	30 93 70 02 	sts	0x0270, r19	; 0x800270 <threads+0xdf>
 37e:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <threads+0xde>
	}
    threads[NTHREADS-1].next = NULL;
 382:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <threads+0x14c>
 386:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <threads+0x14b>


    initialized = 1;
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <initialized+0x1>
 392:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <initialized>
	
	// Initialize for butterfly joystick
	EIMSK = (1<<PCIE1) | EIMSK;
 396:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 = (1<<PCINT15) | PCMSK1;
 398:	ec e6       	ldi	r30, 0x6C	; 108
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	20 81       	ld	r18, Z
 39e:	20 68       	ori	r18, 0x80	; 128
 3a0:	20 83       	st	Z, r18
	PORTB = (1<<PB7) | PORTB;
 3a2:	2f 9a       	sbi	0x05, 7	; 5
	
	// Initialize for timer 
	
	// Enable timer output compare A interrupts 
	TIMSK1 = (1<<OCIE1A) | TIMSK1;
 3a4:	ef e6       	ldi	r30, 0x6F	; 111
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	20 81       	ld	r18, Z
 3aa:	22 60       	ori	r18, 0x02	; 2
 3ac:	20 83       	st	Z, r18
	// Turn on OC1A compare match
	TCCR1A = (1<<COM1A0) | (1<<COM1A1) | TCCR1A;
 3ae:	e0 e8       	ldi	r30, 0x80	; 128
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	20 81       	ld	r18, Z
 3b4:	20 6c       	ori	r18, 0xC0	; 192
 3b6:	20 83       	st	Z, r18
	// Set timer to clear on timer compare (CTC) and timer prescaling factor 1024 
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10) | TCCR1B;
 3b8:	e1 e8       	ldi	r30, 0x81	; 129
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	20 81       	ld	r18, Z
 3be:	2d 60       	ori	r18, 0x0D	; 13
 3c0:	20 83       	st	Z, r18
	
	// 20 intervals of 50 ms per second 
	// 1 second = 8 000 000 / 1024 = 7812.5 
	// 1 second divided by 20 intervals = 7812.5/ 20 = 390.625 = 0x187
	OCR1A = 0x187;	
 3c2:	27 e8       	ldi	r18, 0x87	; 135
 3c4:	31 e0       	ldi	r19, 0x01	; 1
 3c6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 3ca:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCNT1 = 0x0;
 3ce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 3d2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3d6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 3da:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 3de:	3a 83       	std	Y+2, r19	; 0x02
 3e0:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 3e2:	23 2b       	or	r18, r19
 3e4:	a9 f0       	breq	.+42     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        *queue = (*queue)->next;
 3e6:	e9 81       	ldd	r30, Y+1	; 0x01
 3e8:	fa 81       	ldd	r31, Y+2	; 0x02
 3ea:	44 81       	ldd	r20, Z+4	; 0x04
 3ec:	55 81       	ldd	r21, Z+5	; 0x05
 3ee:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 3f2:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 3f6:	91 83       	std	Z+1, r25	; 0x01
 3f8:	80 83       	st	Z, r24
    newp->arg = arg;
 3fa:	73 83       	std	Z+3, r23	; 0x03
 3fc:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 3fe:	15 82       	std	Z+5, r1	; 0x05
 400:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 402:	cf 01       	movw	r24, r30
 404:	06 96       	adiw	r24, 0x06	; 6
 406:	0e 94 38 03 	call	0x670	; 0x670 <setjmp>
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	49 f5       	brne	.+82     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	ff cf       	rjmp	.-2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        ENABLE();
 412:	78 94       	sei
        current->function(current->arg);
 414:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 418:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 41c:	ed 91       	ld	r30, X+
 41e:	fc 91       	ld	r31, X
 420:	11 97       	sbiw	r26, 0x01	; 1
 422:	12 96       	adiw	r26, 0x02	; 2
 424:	8d 91       	ld	r24, X+
 426:	9c 91       	ld	r25, X
 428:	13 97       	sbiw	r26, 0x03	; 3
 42a:	09 95       	icall
        DISABLE();
 42c:	f8 94       	cli
        enqueue(current, &freeQ);
 42e:	62 e0       	ldi	r22, 0x02	; 2
 430:	71 e0       	ldi	r23, 0x01	; 1
 432:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 436:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 43a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 43e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 442:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 446:	00 97       	sbiw	r24, 0x00	; 0
 448:	51 f0       	breq	.+20     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
        *queue = (*queue)->next;
 44a:	fc 01       	movw	r30, r24
 44c:	24 81       	ldd	r18, Z+4	; 0x04
 44e:	35 81       	ldd	r19, Z+5	; 0x05
 450:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 454:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 458:	0e 94 83 01 	call	0x306	; 0x306 <dispatch>
 45c:	01 c0       	rjmp	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
    }
    SETSTACK(&newp->context, &newp->stack);
 460:	e9 81       	ldd	r30, Y+1	; 0x01
 462:	fa 81       	ldd	r31, Y+2	; 0x02
 464:	36 96       	adiw	r30, 0x06	; 6
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	9a 81       	ldd	r25, Y+2	; 0x02
 46a:	87 59       	subi	r24, 0x97	; 151
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	91 8b       	std	Z+17, r25	; 0x11
 470:	80 8b       	std	Z+16, r24	; 0x10
 472:	93 8b       	std	Z+19, r25	; 0x13
 474:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 476:	60 e2       	ldi	r22, 0x20	; 32
 478:	71 e0       	ldi	r23, 0x01	; 1
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	9a 81       	ldd	r25, Y+2	; 0x02
 47e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <enqueue>
    ENABLE();
 482:	78 94       	sei
}
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <yield>:

void yield(void) {
	DISABLE();
 48e:	f8 94       	cli
	enqueue(current, &readyQ);
 490:	60 e2       	ldi	r22, 0x20	; 32
 492:	71 e0       	ldi	r23, 0x01	; 1
 494:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 498:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 49c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4a0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4a4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 4a8:	00 97       	sbiw	r24, 0x00	; 0
 4aa:	59 f0       	breq	.+22     	; 0x4c2 <yield+0x34>
        *queue = (*queue)->next;
 4ac:	fc 01       	movw	r30, r24
 4ae:	24 81       	ldd	r18, Z+4	; 0x04
 4b0:	35 81       	ldd	r19, Z+5	; 0x05
 4b2:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 4b6:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 4ba:	0e 94 83 01 	call	0x306	; 0x306 <dispatch>
	ENABLE();
 4be:	78 94       	sei
}
 4c0:	08 95       	ret
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <yield+0x34>

000004c4 <__vector_3>:

ISR(PCINT1_vect){
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
	if (!pressed && down){
		yield();
		pressed = true;
	}
	*/
	if (( PINB & 1<<PB7) == 0){
 4e6:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 4e8:	0e 94 47 02 	call	0x48e	; 0x48e <yield>
	}
	
}
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	7f 91       	pop	r23
 4fa:	6f 91       	pop	r22
 4fc:	5f 91       	pop	r21
 4fe:	4f 91       	pop	r20
 500:	3f 91       	pop	r19
 502:	2f 91       	pop	r18
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <__vector_7>:

ISR(TIMER1_COMPA_vect){
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	4f 93       	push	r20
 51e:	5f 93       	push	r21
 520:	6f 93       	push	r22
 522:	7f 93       	push	r23
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
 528:	af 93       	push	r26
 52a:	bf 93       	push	r27
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
	yield();
 530:	0e 94 47 02 	call	0x48e	; 0x48e <yield>
}
 534:	ff 91       	pop	r31
 536:	ef 91       	pop	r30
 538:	bf 91       	pop	r27
 53a:	af 91       	pop	r26
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	7f 91       	pop	r23
 542:	6f 91       	pop	r22
 544:	5f 91       	pop	r21
 546:	4f 91       	pop	r20
 548:	3f 91       	pop	r19
 54a:	2f 91       	pop	r18
 54c:	0f 90       	pop	r0
 54e:	0f be       	out	0x3f, r0	; 63
 550:	0f 90       	pop	r0
 552:	1f 90       	pop	r1
 554:	18 95       	reti

00000556 <lock>:

void lock(mutex *m) {
	DISABLE();
 556:	f8 94       	cli
	//If the mutex isn't locked, lock it
	if ((m->locked) == 0){
 558:	fc 01       	movw	r30, r24
 55a:	20 81       	ld	r18, Z
 55c:	31 81       	ldd	r19, Z+1	; 0x01
 55e:	23 2b       	or	r18, r19
 560:	29 f4       	brne	.+10     	; 0x56c <lock+0x16>
		m->locked = 1;
 562:	21 e0       	ldi	r18, 0x01	; 1
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	31 83       	std	Z+1, r19	; 0x01
 568:	20 83       	st	Z, r18
 56a:	1a c0       	rjmp	.+52     	; 0x5a0 <lock+0x4a>
	}
	//if the mutex is locked, add the thread to the wait queue and change to the next thread in the ready queue
	else {
		enqueue(current, &(m->waitQ));
 56c:	bc 01       	movw	r22, r24
 56e:	6e 5f       	subi	r22, 0xFE	; 254
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 576:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 57a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 57e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 582:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 586:	00 97       	sbiw	r24, 0x00	; 0
 588:	51 f0       	breq	.+20     	; 0x59e <lock+0x48>
        *queue = (*queue)->next;
 58a:	fc 01       	movw	r30, r24
 58c:	24 81       	ldd	r18, Z+4	; 0x04
 58e:	35 81       	ldd	r19, Z+5	; 0x05
 590:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 594:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
		m->locked = 1;
	}
	//if the mutex is locked, add the thread to the wait queue and change to the next thread in the ready queue
	else {
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 598:	0e 94 83 01 	call	0x306	; 0x306 <dispatch>
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <lock+0x4a>
 59e:	ff cf       	rjmp	.-2      	; 0x59e <lock+0x48>
	}
	ENABLE();
 5a0:	78 94       	sei
 5a2:	08 95       	ret

000005a4 <unlock>:
	
}

void unlock(mutex *m) {
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
	DISABLE();
 5a8:	f8 94       	cli
	//If the wait queue isn't empty, add the current thread to the ready queue and go ot the next thread in the wait queue
	if (m->waitQ != NULL){
 5aa:	fc 01       	movw	r30, r24
 5ac:	22 81       	ldd	r18, Z+2	; 0x02
 5ae:	33 81       	ldd	r19, Z+3	; 0x03
 5b0:	23 2b       	or	r18, r19
 5b2:	b1 f0       	breq	.+44     	; 0x5e0 <unlock+0x3c>
 5b4:	ec 01       	movw	r28, r24
		enqueue(current, &readyQ);
 5b6:	60 e2       	ldi	r22, 0x20	; 32
 5b8:	71 e0       	ldi	r23, 0x01	; 1
 5ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5c2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 5ca:	00 97       	sbiw	r24, 0x00	; 0
 5cc:	41 f0       	breq	.+16     	; 0x5de <unlock+0x3a>
        *queue = (*queue)->next;
 5ce:	fc 01       	movw	r30, r24
 5d0:	24 81       	ldd	r18, Z+4	; 0x04
 5d2:	35 81       	ldd	r19, Z+5	; 0x05
 5d4:	3b 83       	std	Y+3, r19	; 0x03
 5d6:	2a 83       	std	Y+2, r18	; 0x02
void unlock(mutex *m) {
	DISABLE();
	//If the wait queue isn't empty, add the current thread to the ready queue and go ot the next thread in the wait queue
	if (m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 5d8:	0e 94 83 01 	call	0x306	; 0x306 <dispatch>
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <unlock+0x42>
 5de:	ff cf       	rjmp	.-2      	; 0x5de <unlock+0x3a>
	}
	//If the wait queue is empty, unlock the mutex and continue in the current thread
	else  {
		m->locked = 0;
 5e0:	fc 01       	movw	r30, r24
 5e2:	11 82       	std	Z+1, r1	; 0x01
 5e4:	10 82       	st	Z, r1
	}
	ENABLE();
 5e6:	78 94       	sei
	
}
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	08 95       	ret

000005ee <__divmodsi4>:
 5ee:	05 2e       	mov	r0, r21
 5f0:	97 fb       	bst	r25, 7
 5f2:	1e f4       	brtc	.+6      	; 0x5fa <__divmodsi4+0xc>
 5f4:	00 94       	com	r0
 5f6:	0e 94 0e 03 	call	0x61c	; 0x61c <__negsi2>
 5fa:	57 fd       	sbrc	r21, 7
 5fc:	07 d0       	rcall	.+14     	; 0x60c <__divmodsi4_neg2>
 5fe:	0e 94 16 03 	call	0x62c	; 0x62c <__udivmodsi4>
 602:	07 fc       	sbrc	r0, 7
 604:	03 d0       	rcall	.+6      	; 0x60c <__divmodsi4_neg2>
 606:	4e f4       	brtc	.+18     	; 0x61a <__divmodsi4_exit>
 608:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__negsi2>

0000060c <__divmodsi4_neg2>:
 60c:	50 95       	com	r21
 60e:	40 95       	com	r20
 610:	30 95       	com	r19
 612:	21 95       	neg	r18
 614:	3f 4f       	sbci	r19, 0xFF	; 255
 616:	4f 4f       	sbci	r20, 0xFF	; 255
 618:	5f 4f       	sbci	r21, 0xFF	; 255

0000061a <__divmodsi4_exit>:
 61a:	08 95       	ret

0000061c <__negsi2>:
 61c:	90 95       	com	r25
 61e:	80 95       	com	r24
 620:	70 95       	com	r23
 622:	61 95       	neg	r22
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	08 95       	ret

0000062c <__udivmodsi4>:
 62c:	a1 e2       	ldi	r26, 0x21	; 33
 62e:	1a 2e       	mov	r1, r26
 630:	aa 1b       	sub	r26, r26
 632:	bb 1b       	sub	r27, r27
 634:	fd 01       	movw	r30, r26
 636:	0d c0       	rjmp	.+26     	; 0x652 <__udivmodsi4_ep>

00000638 <__udivmodsi4_loop>:
 638:	aa 1f       	adc	r26, r26
 63a:	bb 1f       	adc	r27, r27
 63c:	ee 1f       	adc	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	a2 17       	cp	r26, r18
 642:	b3 07       	cpc	r27, r19
 644:	e4 07       	cpc	r30, r20
 646:	f5 07       	cpc	r31, r21
 648:	20 f0       	brcs	.+8      	; 0x652 <__udivmodsi4_ep>
 64a:	a2 1b       	sub	r26, r18
 64c:	b3 0b       	sbc	r27, r19
 64e:	e4 0b       	sbc	r30, r20
 650:	f5 0b       	sbc	r31, r21

00000652 <__udivmodsi4_ep>:
 652:	66 1f       	adc	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	1a 94       	dec	r1
 65c:	69 f7       	brne	.-38     	; 0x638 <__udivmodsi4_loop>
 65e:	60 95       	com	r22
 660:	70 95       	com	r23
 662:	80 95       	com	r24
 664:	90 95       	com	r25
 666:	9b 01       	movw	r18, r22
 668:	ac 01       	movw	r20, r24
 66a:	bd 01       	movw	r22, r26
 66c:	cf 01       	movw	r24, r30
 66e:	08 95       	ret

00000670 <setjmp>:
 670:	dc 01       	movw	r26, r24
 672:	2d 92       	st	X+, r2
 674:	3d 92       	st	X+, r3
 676:	4d 92       	st	X+, r4
 678:	5d 92       	st	X+, r5
 67a:	6d 92       	st	X+, r6
 67c:	7d 92       	st	X+, r7
 67e:	8d 92       	st	X+, r8
 680:	9d 92       	st	X+, r9
 682:	ad 92       	st	X+, r10
 684:	bd 92       	st	X+, r11
 686:	cd 92       	st	X+, r12
 688:	dd 92       	st	X+, r13
 68a:	ed 92       	st	X+, r14
 68c:	fd 92       	st	X+, r15
 68e:	0d 93       	st	X+, r16
 690:	1d 93       	st	X+, r17
 692:	cd 93       	st	X+, r28
 694:	dd 93       	st	X+, r29
 696:	ff 91       	pop	r31
 698:	ef 91       	pop	r30
 69a:	8d b7       	in	r24, 0x3d	; 61
 69c:	8d 93       	st	X+, r24
 69e:	8e b7       	in	r24, 0x3e	; 62
 6a0:	8d 93       	st	X+, r24
 6a2:	8f b7       	in	r24, 0x3f	; 63
 6a4:	8d 93       	st	X+, r24
 6a6:	ed 93       	st	X+, r30
 6a8:	fd 93       	st	X+, r31
 6aa:	88 27       	eor	r24, r24
 6ac:	99 27       	eor	r25, r25
 6ae:	09 94       	ijmp

000006b0 <longjmp>:
 6b0:	dc 01       	movw	r26, r24
 6b2:	cb 01       	movw	r24, r22
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	91 05       	cpc	r25, r1
 6b8:	81 1d       	adc	r24, r1
 6ba:	2d 90       	ld	r2, X+
 6bc:	3d 90       	ld	r3, X+
 6be:	4d 90       	ld	r4, X+
 6c0:	5d 90       	ld	r5, X+
 6c2:	6d 90       	ld	r6, X+
 6c4:	7d 90       	ld	r7, X+
 6c6:	8d 90       	ld	r8, X+
 6c8:	9d 90       	ld	r9, X+
 6ca:	ad 90       	ld	r10, X+
 6cc:	bd 90       	ld	r11, X+
 6ce:	cd 90       	ld	r12, X+
 6d0:	dd 90       	ld	r13, X+
 6d2:	ed 90       	ld	r14, X+
 6d4:	fd 90       	ld	r15, X+
 6d6:	0d 91       	ld	r16, X+
 6d8:	1d 91       	ld	r17, X+
 6da:	cd 91       	ld	r28, X+
 6dc:	dd 91       	ld	r29, X+
 6de:	ed 91       	ld	r30, X+
 6e0:	fd 91       	ld	r31, X+
 6e2:	0d 90       	ld	r0, X+
 6e4:	f8 94       	cli
 6e6:	fe bf       	out	0x3e, r31	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	ed bf       	out	0x3d, r30	; 61
 6ec:	ed 91       	ld	r30, X+
 6ee:	fd 91       	ld	r31, X+
 6f0:	09 94       	ijmp

000006f2 <_exit>:
 6f2:	f8 94       	cli

000006f4 <__stop_program>:
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <__stop_program>
